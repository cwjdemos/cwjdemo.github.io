{"version":3,"sources":["webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/core-js/library/modules/web.dom.iterable.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/vue-router/dist/vue-router.esm.js","webpack:///./node_modules/midiconvert/src/Util.js","webpack:///./node_modules/midiconvert/src/BinaryInsert.js","webpack:///./node_modules/midiconvert/src/Control.js","webpack:///./node_modules/midiconvert/src/Merge.js","webpack:///./node_modules/midiconvert/src/Note.js","webpack:///./node_modules/midiconvert/src/instrumentMaps.js","webpack:///./node_modules/midiconvert/src/Track.js","webpack:///./node_modules/midiconvert/src/Midi.js","webpack:///./node_modules/midiconvert/src/Header.js","webpack:///./node_modules/midiconvert/src/MidiConvert.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator-method.js","webpack:///./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack:///./node_modules/midi-file-parser/index.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/modules/core.is-iterable.js","webpack:///./node_modules/vue/dist/vue.esm.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/core-js/library/modules/_redefine.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/babel-runtime/core-js/get-iterator.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/core-js/library/modules/_iter-step.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/jsmidgen/lib/jsmidgen.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/core-js/library/modules/_classof.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/core-js/library/fn/is-iterable.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/tone/build/Tone.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/babel-runtime/helpers/slicedToArray.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/library/fn/get-iterator.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/babel-runtime/core-js/is-iterable.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/core-js/library/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js"],"names":["module","exports","__webpack_require__","Object","defineProperty","get","a","aFunction","fn","that","length","undefined","call","b","c","apply","arguments","global","hide","Iterators","TO_STRING_TAG","DOMIterables","split","i","NAME","Collection","proto","prototype","Array","warn","condition","message","isError","err","toString","indexOf","View","name","functional","props","type","String","default","render","_","ref","children","parent","data","routerView","h","$createElement","route","$route","cache","_routerViewCache","depth","inactive","_routerRoot","$vnode","_inactive","$parent","routerViewDepth","matched","component","components","registerRouteInstance","vm","val","current","instances","hook","prepatch","vnode","componentInstance","propsToPass","config","params","resolveProps","to","from","key","extend","attrs","encodeReserveRE","encodeReserveReplacer","charCodeAt","commaRE","encode","str","encodeURIComponent","replace","decode","decodeURIComponent","parseQuery","query","res","trim","forEach","param","parts","shift","join","isArray","push","stringifyQuery","obj","keys","map","result","val2","filter","x","trailingSlashRE","createRoute","record","location","redirectedFrom","router","stringifyQuery$$1","options","clone","e","meta","path","hash","fullPath","getFullPath","unshift","formatMatch","freeze","value","START","_stringifyQuery","isSameRoute","isObjectEqual","aKeys","bKeys","every","aVal","bVal","_Vue","toTypes","eventTypes","Link","required","tag","exact","Boolean","append","activeClass","exactActiveClass","event","this$1","this","$router","resolve","href","classes","globalActiveClass","linkActiveClass","globalExactActiveClass","linkExactActiveClass","activeClassFallback","exactActiveClassFallback","compareTarget","target","queryIncludes","isIncludedRoute","handler","guardEvent","on","click","class","findAnchor","child","$slots","isStatic","util","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","getAttribute","test","preventDefault","install","Vue","installed","isDef","v","registerInstance","callVal","$options","_parentVnode","mixin","beforeCreate","_router","init","defineReactive","history","destroyed","_route","strats","optionMergeStrategies","beforeRouteEnter","beforeRouteLeave","beforeRouteUpdate","created","inBrowser","window","resolvePath","relative","base","firstChar","charAt","stack","pop","segments","segment","cleanPath","isarray","arr","pathToRegexp_1","pathToRegexp","parse_1","parse","compile_1","tokensToFunction","tokensToFunction_1","tokensToRegExp_1","tokensToRegExp","PATH_REGEXP","RegExp","tokens","index","defaultDelimiter","delimiter","exec","m","escaped","offset","slice","next","prefix","capture","group","modifier","asterisk","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","toUpperCase","matches","opts","pretty","token","TypeError","JSON","stringify","j","attachKeys","re","flags","sensitive","strict","end","endsWithDelimiter","groups","source","match","regexpToRegexp","arrayToRegexp","stringToRegexp","compile","regexpCompileCache","create","fillParams","routeMsg","createRouteMap","routes","oldPathList","oldPathMap","oldNameMap","pathList","pathMap","nameMap","addRouteRecord","matchAs","pathToRegexpOptions","normalizedPath","normalizePath","caseSensitive","regex","compileRouteRegex","redirect","beforeEnter","childMatchAs","alias","aliases","aliasRoute","l","splice","normalizeLocation","raw","_normalized","assign","rawPath","parsedPath","hashIndex","queryIndex","parsePath","basePath","extraQuery","_parseQuery","parsedQuery","resolveQuery","createMatcher","currentRoute","_createRoute","paramNames","record$1","matchRoute","originalRedirect","hasOwnProperty","resolveRecordPath","aliasedMatch","aliasedRecord","addRoutes","len","positionStore","setupScroll","replaceState","getStateKey","addEventListener","saveScrollPosition","state","_key","handleScroll","isPop","app","behavior","scrollBehavior","$nextTick","position","getScrollPosition","shouldScroll","then","scrollToPosition","catch","pageXOffset","y","pageYOffset","isValidPosition","isNumber","normalizePosition","isObject","selector","el","document","querySelector","docRect","documentElement","getBoundingClientRect","elRect","left","top","getElementPosition","scrollTo","ua","supportsPushState","navigator","userAgent","Time","performance","now","Date","genKey","toFixed","pushState","url","runQueue","queue","cb","step","resolveAsyncComponents","hasAsync","pending","error","flatMapComponents","def","cid","once","resolvedDef","__esModule","hasSymbol","Symbol","toStringTag","resolved","reject","reason","msg","Error","comp","flatten","concat","called","args","History","baseEl","normalizeBase","ready","readyCbs","readyErrorCbs","errorCbs","extractGuards","records","bind","reverse","guards","instance","guard","extractGuard","bindGuard","listen","onReady","errorCb","onError","transitionTo","onComplete","onAbort","confirmTransition","updateRoute","ensureURL","abort","console","max","Math","updated","activated","deactivated","resolveQueue","extractLeaveGuards","beforeHooks","extractUpdateHooks","iterator","postEnterCbs","cbs","isValid","poll","setTimeout","bindEnterGuard","extractEnterGuards","resolveHooks","prev","afterHooks","HTML5History","History$$1","expectScroll","initLocation","getLocation","__proto__","constructor","go","n","fromRoute","getCurrentLocation","pathname","search","HashHistory","fallback","checkFallback","ensureSlash","setupListeners","supportsScroll","getHash","replaceHash","pushHash","getUrl","AbstractHistory","targetIndex","VueRouter","apps","matcher","mode","prototypeAccessors","configurable","registerHook","list","setupHashListener","beforeEach","beforeResolve","afterEach","back","forward","getMatchedComponents","createHref","normalizedTo","defineProperties","version","use","__webpack_exports__","isPitch","regexp","isString","pitchToMidi","noteToScaleIndex","cbb","c#","cx","dbb","db","d","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a#","ax","bbb","bb","b#","bx","note","pitch","octave","toLowerCase","parseInt","BinaryInsert","array","time","beginning","midPoint","floor","nextEvent","findElement","channelNames","1","2","4","5","7","8","10","64","65","66","67","68","84","Control","[object Object]","number","hasMoreValues","arrays","positions","pos","getLowestAtPosition","encoders","lowestIndex","lowestValue","Infinity","Note_Note","json","midi","duration","velocity","midiToPitch","noteOn","t","noteOff","instrumentByPatchID","instrumentFamilyByID","drumKitByPatchID","0","16","24","25","32","40","48","56","Track_Track","track","instrumentNumber","channelNumber","id","notes","newNote","fromJSON","controlChanges","channel","num","cc","noteOns","noteOffs","startTime","instrument","isPercussion","inst","includes","instrumentFamily","amount","endTime","noteStartIndex","findIndex","noteEndIndex","trackEncoder","header","ticksPerSecond","PPQ","bpm","lastEventTime","getDeltaTime","ticks","delta","Uint32Array","Merge","sort","addNoteOn","addNoteOff","ret","toJSON","Midi_Midi","tracks","newTrack","timeSignature","method","Promise","success","fail","request","XMLHttpRequest","open","responseType","readyState","status","response","send","log","bytes","ArrayBuffer","byteArray","Uint8Array","fromCharCode","midiData","midi_file_parser","midiJson","ticksPerBeat","datum","subtype","numerator","denominator","microsecondsPerBeat","parseHeader","trackData","absoluteTime","ticksToSeconds","deltaTime","cleanName","text","noteNumber","controllerType","patch","programNumber","output","jsmidgen","firstEmptyTrack","addTrack","addEvent","TRACK_NAME","setTempo","toBytes","encodedStr","buffer","trackName","find","startTimes","min","prevTempo","ratio","scale","timeSig","durations","fileBlob","px","random","webpackPolyfill","deprecate","paths","enumerable","classof","ITERATOR","getIteratorMethod","it","Stream","readInt8","signed","eof","read","readInt32","readInt16","readVarInt","file","readChunk","stream","lastEventTypeByte","readEvent","param1","eventTypeByte","subtypeByte","hourByte","frameRate","96","hour","sec","frame","subframe","pow","metronome","thirtyseconds","eventType","headerChunk","headerStream","formatType","trackCount","timeDivision","trackChunk","trackStream","MidiFile","isIterable","O","emptyObject","isUndef","isTrue","isPrimitive","_toString","isPlainObject","isRegExp","isValidArrayIndex","parseFloat","isFinite","toNumber","isNaN","makeMap","expectsLowerCase","isBuiltInTag","isReservedAttribute","remove","item","hasOwn","cached","camelizeRE","camelize","capitalize","hyphenateRE","hyphenate","Function","ctx","boundFn","_length","toArray","start","_from","toObject","noop","no","identity","looseEqual","isObjectA","isObjectB","isArrayA","isArrayB","keysA","keysB","looseIndexOf","SSR_ATTR","ASSET_TYPES","LIFECYCLE_HOOKS","silent","productionTip","devtools","errorHandler","warnHandler","ignoredElements","keyCodes","isReservedTag","isReservedAttr","isUnknownElement","getTagNamespace","parsePlatformTagName","mustUseProp","_lifecycleHooks","isReserved","writable","bailRE","_isServer","hasProto","inWeex","WXEnvironment","platform","weexPlatform","UA","isIE","isIE9","isEdge","isIOS","nativeWatch","watch","supportsPassive","isServerRendering","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","isNative","Ctor","_Set","Reflect","ownKeys","Set","set","has","add","clear","uid","Dep","subs","addSub","sub","removeSub","depend","addDep","notify","update","targetStack","pushTarget","_target","popTarget","VNode","elm","context","componentOptions","asyncFactory","ns","fnContext","fnOptions","fnScopeId","isRootInsert","isComment","isCloned","isOnce","asyncMeta","isAsyncPlaceholder","createEmptyVNode","node","createTextVNode","cloneVNode","cloned","arrayProto","arrayMethods","original","inserted","ob","__ob__","observeArray","dep","arrayKeys","getOwnPropertyNames","shouldObserve","toggleObserving","Observer","vmCount","protoAugment","copyAugment","walk","src","observe","asRootData","isExtensible","_isVue","customSetter","shallow","property","getOwnPropertyDescriptor","getter","setter","childOb","dependArray","newVal","del","items","mergeData","toVal","fromVal","mergeDataOrFn","parentVal","childVal","instanceData","defaultData","mergeHook","mergeAssets","key$1","methods","inject","computed","provide","defaultStrat","mergeOptions","normalizeProps","normalized","normalizeInject","dirs","directives","normalizeDirectives","extendsFrom","extends","mixins","mergeField","strat","resolveAsset","warnMissing","assets","camelizedId","PascalCaseId","validateProp","propOptions","propsData","prop","absent","booleanIndex","getTypeIndex","stringIndex","_props","getType","getPropDefaultValue","prevShouldObserve","isSameType","expectedTypes","handleError","info","cur","hooks","errorCaptured","globalHandleError","logError","microTimerFunc","macroTimerFunc","callbacks","flushCallbacks","copies","useMacroTask","setImmediate","MessageChannel","port","port2","port1","onmessage","postMessage","p","nextTick","_resolve","seenObjects","traverse","_traverse","seen","isA","isFrozen","depId","normalizeEvent","passive","once$$1","createFnInvoker","fns","invoker","arguments$1","updateListeners","oldOn","remove$$1","old","mergeVNodeHook","hookKey","oldHook","wrappedHook","merged","checkProp","preserve","normalizeChildren","normalizeArrayChildren","nestedIndex","lastIndex","last","isTextNode","_isVList","ensureCtor","getFirstComponentChild","$once","$on","remove$1","$off","updateComponentListeners","listeners","oldListeners","resolveSlots","slots","slot","name$1","isWhitespace","resolveScopedSlots","activeInstance","isInInactiveTree","activateChildComponent","direct","_directInactive","$children","callHook","handlers","_hasHookEvent","$emit","activatedChildren","waiting","flushing","flushSchedulerQueue","watcher","run","activatedQueue","updatedQueue","callActivatedHooks","_watcher","_isMounted","callUpdatedHooks","emit","uid$1","Watcher","expOrFn","isRenderWatcher","_watchers","deep","user","lazy","sync","active","dirty","deps","newDeps","depIds","newDepIds","expression","cleanupDeps","tmp","queueWatcher","oldValue","evaluate","teardown","_isBeingDestroyed","sharedPropertyDefinition","proxy","sourceKey","initState","propsOptions","_propKeys","loop","initProps","initMethods","_data","getData","initData","watchers","_computedWatchers","isSSR","userDef","computedWatcherOptions","defineComputed","initComputed","createWatcher","initWatch","shouldCache","createComputedGetter","$watch","resolveInject","provideKey","_provided","provideDefault","renderList","renderSlot","bindObject","nodes","scopedSlotFn","$scopedSlots","slotNodes","_rendered","resolveFilter","isKeyNotMatch","expect","actual","checkKeyCodes","eventKeyCode","builtInKeyCode","eventKeyName","builtInKeyName","mappedKeyCode","bindObjectProps","asProp","isSync","domProps","$event","renderStatic","isInFor","_staticTrees","tree","markStatic","staticRenderFns","_renderProxy","markOnce","markStaticNode","bindObjectListeners","existing","ours","installRenderHelpers","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_b","_v","_e","_u","_g","FunctionalRenderContext","contextVm","_original","isCompiled","_compiled","needNormalization","injections","scopedSlots","_scopeId","_c","createElement","cloneAndMarkFunctionalResult","mergeProps","componentVNodeHooks","hydrating","parentElm","refElm","_isDestroyed","keepAlive","mountedNode","_isComponent","_parentElm","_refElm","inlineTemplate","createComponentInstanceForVnode","$mount","oldVnode","parentVnode","renderChildren","hasChildren","_renderChildren","_vnode","$attrs","$listeners","propKeys","_parentListeners","$forceUpdate","updateChildComponent","insert","destroy","deactivateChildComponent","$destroy","hooksToMerge","createComponent","baseCtor","_base","factory","errorComp","loading","loadingComp","contexts","forceRender","delay","timeout","resolveAsyncComponent","createAsyncPlaceholder","resolveConstructorOptions","model","callback","transformModel","extractPropsFromVNodeData","renderContext","vnodes","createFunctionalComponent","nativeOn","abstract","installComponentHooks","SIMPLE_NORMALIZE","ALWAYS_NORMALIZE","normalizationType","alwaysNormalize","is","simpleNormalizeChildren","applyNS","force","style","registerDeepBindings","_createElement","uid$3","super","superOptions","modifiedOptions","modified","latest","extended","extendOptions","sealed","sealedOptions","dedupe","resolveModifiedOptions","_init","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","Comp","initProps$1","initComputed$1","getComponentName","pruneCache","keepAliveInstance","cachedNode","pruneCacheEntry","cached$$1","_uid","vnodeComponentOptions","_componentTag","initInternalComponent","_self","$root","$refs","initLifecycle","_events","initEvents","parentData","initRender","initInjections","initProvide","initMixin","dataDef","propsDef","$set","$delete","immediate","stateMixin","hookRE","i$1","eventsMixin","_update","prevEl","$el","prevVnode","prevActiveInstance","__patch__","__vue__","lifecycleMixin","_render","renderMixin","patternTypes","builtInComponents","KeepAlive","include","exclude","Number","mounted","configDef","delete","plugin","installedPlugins","_installedPlugins","initUse","initMixin$1","definition","initAssetRegisters","initGlobalAPI","ssrContext","acceptValue","attr","isEnumeratedAttr","isBooleanAttr","xlinkNS","isXlink","getXlinkProp","isFalsyAttrValue","genClassForVnode","parentNode","childNode","mergeClassData","staticClass","dynamicClass","stringifyClass","renderClass","stringified","stringifyArray","stringifyObject","namespaceMap","svg","math","isHTMLTag","isSVG","unknownElementCache","isTextInputType","selected","nodeOps","tagName","multiple","setAttribute","createElementNS","namespace","createTextNode","createComment","insertBefore","newNode","referenceNode","removeChild","appendChild","nextSibling","setTextContent","textContent","setStyleScope","scopeId","registerRef","isRemoval","refs","refInFor","emptyNode","sameVnode","typeA","typeB","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldDir","dir","isCreate","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","callHook$1","componentUpdated","callInsert","emptyModifiers","modifiers","getRawDirName","rawName","baseModules","updateAttrs","inheritAttrs","oldAttrs","setAttr","removeAttributeNS","removeAttribute","baseSetAttr","setAttributeNS","__ieph","blocker","stopImmediatePropagation","removeEventListener","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","chr","index$1","expressionPos","expressionEndPos","klass","validDivisionCharRE","parseFilters","exp","filters","inSingle","inDouble","inTemplateString","inRegex","curly","square","paren","lastFilterIndex","pushFilter","wrapFilter","baseWarn","pluckModuleFunction","modules","addProp","plain","addAttr","addRawAttr","attrsMap","attrsList","addDirective","arg","addHandler","important","events","right","middle","native","nativeEvents","newHandler","getBindingAttr","getStatic","dynamicValue","getAndRemoveAttr","staticValue","removeFromMap","genComponentModel","valueExpression","assignment","genAssignmentCode","lastIndexOf","isStringStart","parseString","parseBracket","parseModel","inBracket","stringQuote","target$1","RANGE_TOKEN","CHECKBOX_RADIO_TOKEN","add$1","_withTask","onceHandler","remove$2","createOnceHandler","updateDOMListeners","change","normalizeEvents","updateDOMProps","oldProps","childNodes","_value","strCur","shouldUpdateValue","checkVal","composing","notInFocus","activeElement","isNotInFocusAndDirty","_vModifiers","isDirtyWithModifiers","parseStyleText","cssText","propertyDelimiter","normalizeStyleData","normalizeStyleBinding","staticStyle","bindingStyle","emptyStyle","cssVarRE","importantRE","setProp","setProperty","normalizedName","normalize","vendorNames","capName","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","checkChild","styleData","getStyle","addClass","classList","removeClass","tar","resolveTransition","css","autoCssTransition","enterClass","enterToClass","enterActiveClass","leaveClass","leaveToClass","leaveActiveClass","hasTransition","TRANSITION","ANIMATION","transitionProp","transitionEndEvent","animationProp","animationEndEvent","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","raf","requestAnimationFrame","nextFrame","addTransitionClass","transitionClasses","removeTransitionClass","whenTransitionEnds","expectedType","getTransitionInfo","propCount","ended","onEnd","transformRE","styles","getComputedStyle","transitionDelays","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationDurations","animationTimeout","hasTransform","delays","toMs","s","enter","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","nodeType","appearClass","appearToClass","appearActiveClass","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","transitionNode","isAppear","startClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","rm","beforeLeave","afterLeave","leaveCancelled","delayLeave","explicitLeaveDuration","performLeave","invokerFns","_enter","backend","removeNode","createElm","insertedVnodeQueue","nested","ownerArray","isReactivated","initComponent","innerNode","activate","reactivateComponent","setScope","createChildren","invokeCreateHooks","pendingInsert","isPatchable","ref$$1","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","childElm","createRmCb","findIdxInOld","oldCh","patchVnode","removeOnly","hydrate","newCh","oldKeyToIdx","idxInOld","vnodeToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","updateChildren","postpatch","invokeInsertHook","initial","isRenderedModule","inVPre","pre","hasChildNodes","innerHTML","childrenMatch","firstChild","fullInvoke","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","patchable","i$2","createPatchFunction","vmodel","trigger","directive","binding","_vOptions","setSelected","getValue","onCompositionStart","onCompositionEnd","prevOptions","curOptions","some","o","hasNoMatchingOption","actuallySetSelected","isMultiple","option","selectedIndex","createEvent","initEvent","dispatchEvent","locateNode","platformDirectives","transition$$1","originalDisplay","__vOriginalDisplay","display","unbind","transitionProps","getRealChild","compOptions","extractTransitionData","placeholder","rawChild","Transition","hasParentTransition","_leaving","oldRawChild","oldChild","isSameChild","delayedLeave","moveClass","callPendingCbs","_moveCb","recordPosition","newPos","applyTranslation","oldPos","dy","moved","transform","WebkitTransform","transitionDuration","platformComponents","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","hasMove","_reflow","body","offsetHeight","propertyName","_hasMove","cloneNode","HTMLUnknownElement","HTMLElement","mountComponent","defaultTagRE","regexEscapeRE","buildRegex","delimiters","close","parseText","tagRE","tokenValue","rawTokens","@binding","klass$1","staticKeys","transformNode","classBinding","genData","decoder","style$1","styleBinding","he","html","isUnaryTag","canBeLeftOpenTag","isNonPhrasingTag","attribute","ncname","qnameCapture","startTagOpen","startTagClose","endTag","doctype","comment","conditionalComment","IS_REGEX_CAPTURING_BROKEN","isPlainTextElement","reCache","decodingMap","&lt;","&gt;","&quot;","&amp;","&#10;","&#9;","encodedAttr","encodedAttrWithNewLines","isIgnoreNewlineTag","shouldIgnoreFirstNewline","decodeAttr","shouldDecodeNewlines","warn$2","transforms","preTransforms","postTransforms","platformIsPreTag","platformMustUseProp","platformGetTagNamespace","onRE","dirRE","forAliasRE","forIteratorRE","stripParensRE","argRE","bindRE","modifierRE","decodeHTMLCached","createASTElement","makeAttrsMap","template","isPreTag","root","currentParent","preserveWhitespace","inPre","closeElement","element","lastTag","expectHTML","isUnaryTag$$1","canBeLeftOpenTag$$1","endTagLength","stackedTag","reStackedTag","rest$1","all","chars","parseEndTag","textEnd","commentEnd","shouldKeepComment","substring","advance","conditionalEnd","doctypeMatch","endTagMatch","curIndex","startTagMatch","parseStartTag","handleStartTag","rest","unarySlash","unary","shouldDecodeNewlinesForHref","lowerCasedTag","lowerCasedTagName","parseHTML","comments","ieNSBug","ieNSPrefix","guardIESVGBug","forbidden","checkRootConstraints","processPre","processRawAttrs","processed","processFor","if","addIfCondition","block","else","elseif","processIf","processOnce","processElement","findPrevElement","processIfConditions","slotScope","slotTarget","lastNode","for","checkInFor","processRef","slotName","processSlot","processComponent","isProp","hasBindings","parseModifiers","camel","argMatch","processAttrs","inMatch","iteratorMatch","iterator1","iterator2","parseFor","ifConditions","cloneASTElement","modules$1","preTransformNode","typeBinding","ifCondition","ifConditionExtra","hasElse","elseIfCondition","branch0","branch1","branch2","isStaticKey","isPlatformReservedTag","baseOptions","_warn","code","genSelect","valueBinding","trueValueBinding","falseValueBinding","genCheckboxModel","genRadioModel","needCompositionGuard","genDefaultModel","reduce","genStaticKeys","genStaticKeysCached","optimize","markStatic$1","static","isDirectChildOfTemplateFor","l$1","markStaticRoots","staticInFor","staticRoot","fnExpRE","simplePathRE","esc","tab","space","up","down","keyNames","genGuard","modifierCode","stop","prevent","self","ctrl","alt","genHandlers","genHandler","isMethodPath","isFunctionExpression","genModifierCode","keyModifier","genFilterCode","genKeyFilter","keyVal","keyCode","keyName","baseDirectives","wrapListeners","wrapData","cloak","CodegenState","dataGenFns","maybeComponent","onceId","generate","ast","genElement","staticProcessed","genStatic","onceProcessed","genOnce","forProcessed","altGen","altHelper","genFor","ifProcessed","genIf","genChildren","bind$$1","genSlot","componentName","genData$2","genComponent","altEmpty","genIfConditions","conditions","genTernaryExp","needRuntime","hasRuntime","gen","genDirectives","genProps","genScopedSlot","inlineRenderFns","genInlineTemplate","genForScopedSlot","checkSkip","altGenElement","altGenNode","el$1","needsNormalization","getNormalizationType","genNode","transformSpecialNewlines","createFunction","errors","baseCompile","div","compileToFunctions","finalOptions","tips","tip","compiled","fnGenErrors","createCompileToFunctionFn","getShouldDecode","idToTemplate","mount","outerHTML","container","getOuterHTML","__g","descriptor","setToStringTag","IteratorPrototype","Constructor","eval","done","core","__e","toIObject","arrayIndexOf","IE_PROTO","object","names","cof","propertyIsEnumerable","S","valueOf","ObjectProto","getPrototypeOf","Midi","exported","DEFAULT_VOLUME","Util","DEFAULT_DURATION","DEFAULT_CHANNEL","midi_letter_pitches","midiPitchFromNote","accidental","ensureMidiPitch","midi_pitches_letter","12","13","14","15","17","18","19","20","21","22","23","midi_flattened_notes","noteFromMidiPitch","returnFlattened","noteName","noteNum","mpqnFromBpm","mpqn","bpmFromMpqn","codes2Str","str2Bytes","finalBytes","translateTickTime","bList","MidiEvent","setTime","setType","setChannel","setParam1","setParam2","param2","NOTE_OFF","NOTE_ON","AFTER_TOUCH","CONTROLLER","PROGRAM_CHANGE","CHANNEL_AFTERTOUCH","PITCH_BEND","typeChannelByte","MetaEvent","setData","SEQUENCE","TEXT","COPYRIGHT","INSTRUMENT","LYRIC","MARKER","CUE_POINT","CHANNEL_PREFIX","END_OF_TRACK","TEMPO","SMPTE","TIME_SIG","KEY_SIG","SEQ_EVENT","dataBytes","Track","START_BYTES","END_BYTES","addNote","dur","addChord","chord","setInstrument","tempo","trackLength","eventBytes","startBytes","endBytes","lengthBytes","File","HDR_CHUNKID","HDR_CHUNK_SIZE","HDR_TYPE0","HDR_TYPE1","Event","toInteger","TAG","ARG","T","B","tryGet","callee","IObject","defined","ceil","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","moduleIdentifier","esModule","scriptExports","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","_injectStyles","bitmap","anObject","dPs","enumBugKeys","Empty","createDict","iframeDocument","iframe","contentWindow","write","lt","F","Properties","__WEBPACK_AMD_DEFINE_RESULT__","Tone","func","Module","className","isLetter","sameConstructor","isFunction","dispose","rampTime","tmpObj","paramLoop","attrSplit","innerParam","Signal","Param","rampTo","AudioParam","TimeBase","_collectDefaults","subRet","subAttr","isDefined","constr","defaults","_super","superDefs","values","defaultArg","given","givenProp","fallbackProp","connectSeries","currentUnit","toUnit","connect","isBoolean","isNote","noOp","_readOnly","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","PI","sin","dbToGain","gainToDb","gain","LN10","intervalToFrequencyRatio","interval","TempConstructor","audioContext","Context","setContext","sampleRate","hasAudioContext","hasPromises","hasWorkers","getContext","initialized","resCallback","off","Emitter","eventName","boundCallback","ev","eventList","functions","emitterFunc","Timeline","_timeline","memory","_search","diff","comparator","peek","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","supported","OfflineAudioContext","webkitOfflineAudioContext","startRendering","_native_startRendering","oncomplete","renderedBuffer","AudioContext","webkitAudioContext","suspend","resume","createGain","createGainNode","createDelay","createDelayNode","decodeAudioDataPromise","offlineContext","audioData","decodeAudioData","_native_decodeAudioData","_context","_defineProperty","_latencyHint","latencyHint","_constants","lookAhead","_computedUpdateInterval","_ticker","Ticker","clockSource","updateInterval","_timeouts","_timeoutIds","_timeoutLoop","currentTime","getConstant","createBuffer","getChannelData","constant","createBufferSource","channelCount","channelCountMode","clearTimeout","hint","con","disconnect","_type","_updateInterval","_callback","_createClock","Type","Worker","Timeout","Offline","_createWorker","URL","webkitURL","blob","Blob","blobUrl","createObjectURL","worker","_worker","_createTimeout","_timeout","_disposeClock","terminate","nativeConnect","AudioNode","nativeDisconnect","toneConnect","outNum","inNum","input","TONE_SILENCE_VERSION_LOGGING","createInsOuts","inputs","outputs","channelInterpretation","_onConnect","unit","outputNum","inputNum","destination","chain","fan","SignalBase","outputNumber","inputNumber","_param","cancelScheduledValues","overridden","WaveShaperNode","_internalNode","_native_createWaveShaper","_curve","curve","Float32Array","createWaveShaper","WaveShaper","mapping","bufferLen","_shaper","setMap","oversample","oversampling","RangeError","units","_val","_units","_defaultUnits","toSeconds","toTicks","toFrequency","toMidi","_expressions","dot","scalar","_beatsToUnits","_getTimeSignature","_ticksToUnits","hz","_frequencyToUnits","tr","q","total","_secondsToUnits","samples","_getBpm","Transport","_getPPQ","_now","freq","beats","seconds","_noArg","expr","matching","toSamples","toMilliseconds","Frequency","mtof","transpose","harmonize","intervals","ftom","toNote","log2","A4","round","scaleIndexToNote","quarterTime","quarters","frequency","quantize","quantTo","nextSubdivision","subdiv","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","measures","sixteenths","TransportTime","Default","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Gain","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","convert","_toUnits","getValueAtTime","_initialValue","_fromUnits","setValueAtTime","minValue","maxValue","_minOutput","AutomationType","Linear","Exponential","Target","SetValue","before","initialValue","defaultValue","previousVal","previous","_exponentialApproach","_linearInterpolate","_exponentialInterpolate","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","scaling","segTime","valueAtTime","t0","v0","v1","t1","OfflineContext","channels","_duration","_currentTime","blockTime","bufferSource","_native_start","_gainNode","createConstantSource","ConstantSourceNode","_bufferSource","gainNode","_output","_proxies","_sourceStarted","_constantSource","_isParam","_applyAutomations","_connectProxies","previousMethod","signal","Pow","_exp","_expScaler","_expFunc","Envelope","attack","decay","sustain","release","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","triggerAttack","originalAttack","currentValue","percentComplete","sliceIndex","triggerRelease","triggerAttackRelease","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","cos","bounceCurve","invertCurve","out","linear","exponential","bounce","cosine","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","uint8","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_buffer","size","smoothing","Waveform","FFT","getFloatFrequencyData","frequencyBinCount","fftSize","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","threshold","knee","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","EqualPowerGain","_eqPower","CrossFade","initialFade","fade","_equalPowerA","_equalPowerB","_one","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","cascadingCount","count","createBiquadFilter","connectionChain","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_scale","_add","_setRange","ScaleExp","exponent","Delay","_maxDelay","maxDelay","delayTime","_delayNode","FeedbackCombFilter","_delay","_feedback","resonance","Abs","_abs","Follower","_filter","_frequencyValues","_sub","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","octaves","baseFrequency","GreaterThanZero","_thresh","GreaterThan","_gtz","Gate","_follower","_gt","thresh","attackTime","releaseTime","_wrapScheduleMethods","ticksUntilTime","_getTicksUntilEvent","TickSignal","prevEvent","rampVal","segmentDur","val0","val1","sampleTime","getTicksAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","sqrt","sol1","ticksToTime","when","timeToTicks","startTicks","endTicks","TimelineState","_initial","setStateAtTime","getLastState","getNextState","TickSource","_state","_tickOffset","setTicksAtTime","pause","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","getSecondsAtTime","elapsedSeconds","getStateAtTime","absoluteTicks","forEachTickBetween","lastStateEvent","nextTickTime","Clock","_nextTick","_tickSource","_lastUpdate","_boundLoop","_loop","IntervalTimeline","_root","IntervalNode","updateHeight","updateMax","_rebalance","results","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","allNodes","searchAfter","_left","_right","height","point","TransportEvent","_eventId","_once","invoke","TransportRepeatEvent","_interval","_currentId","_nextId","_boundRestart","_restart","_createEvents","scheduleOnce","_boundCreateEvents","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_timeSignature","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","tickTime","progress","schedule","_addEvent","scheduleRepeat","eventId","timeline","toggle","startPosition","endPosition","setLoopPoints","ppq","remainingTicks","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","Master","_volume","toMaster","MasterConstructor","Source","_synced","_scheduled","_start","restart","_stop","sched","_syncedStart","stateEvent","startOffset","_syncedStop","unsync","AudioBuffer","copyToChannel","chanNum","copyFromChannel","dest","Buffer","_reversed","_xhr","_onload","onload","loaded","load","onerror","buff","_removeFromDownloadQueue","numberOfChannels","fromArray","isMultidimensional","toMono","outputArray","numChannels","channelArray","sample","startSamples","endSamples","_reverse","rev","_downloadQueue","baseUrl","fromUrl","extensions","extension","supportsType","onProgress","totalProgress","lengthComputable","cancelDownloads","canPlayType","removeEvents","OscillatorNode","onended","_startTime","_stopTime","_oscillator","createOscillator","_gain","setPeriodicWave","periodicWave","cancelStop","Oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","syncFrequency","unsyncFrequency","isBasicType","coefs","_getRealImaginary","createPeriodicWave","periodicWaveSize","real","imag","partialCount","_inverseFFT","sum","_getInitialValue","twoPi","AudioToGain","_norm","Zero","LFO","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","_merger","createChannelMerger","Meter","getLevel","Split","_splitter","createChannelSplitter","MidSideSplit","_split","_midAdd","SQRT1_2","_sideSubtract","side","MidSideMerge","_timesTwoLeft","_timesTwoRight","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","StereoPannerNode","pan","rightWaveShaper","leftWaveShaper","leftGain","rightGain","merge","createStereoPanner","Panner","initialPan","_panner","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","z","setOrientation","_aliasProperty","PanVol","Solo","_soloBind","_soloed","solo","_isSoloed","_addSolo","_removeSolo","_currentSolo","_noSolos","CtrlInterpolate","lowerPosition","lower","upper","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","dist","chosen","needsNormalizing","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","copy","randVal","CtrlRandom","integer","Buffers","urls","_buffers","_loadingCount","_bufferLoaded","isLoaded","buffName","Buses","channelName","sendKnob","receive","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","listener","originalContext","renderRet","attemptRender","tries","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","AutoFilter","_lfo","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackEffect","_feedbackGain","feedback","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","r","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","BufferSource","_sourceStopped","_source","_onended","playbackRate","fadeIn","fadeOut","_onendedTimeout","fadeInTime","computedDur","fadeOutTime","heldDuration","startFade","additionalTail","Noise","_playbackRate","_noiseBuffers","rate","_noiseArrays","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","createBuffers","Reverb","preDelay","noiseL","noiseR","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","width","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","_oneMinusWidth","_sideMult","Tremolo","_amplitudeL","_amplitudeR","Vibrato","_startOffset","_probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","lastEvent","loopDuration","Loop","_event","iterations","iters","Part","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","Pattern","_pattern","vals","Sequence","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","OmniOscillator","_sourceType","OmniOscType","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","mType","Instrument","_syncMethod","timePosition","originalMethod","_original_triggerAttack","_original_triggerRelease","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","portTime","Synth","oscillator","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","mult","vel","octs","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","_triggers","voice","oldest","desc","releaseAll","Sampler","urlMap","_activeSources","_findClosest","difference","closestNote","sources","setWaveTable","createWaveTable","GainToAudio","Normalize","inputMin","inputMax","_inputMin","_inputMax","_div","TransportTimelineSignal","_outputSig","_lastVal","_onTick","_bindAnchorValue","_anchorValue","_syncedCallback","GrainPlayer","grainSize","_grainSize","_overlap","overlap","_onstop","_offset","seek","Player","autostart","_elapsedTime","retrigger","_onSourceEnd","computedDuration","_stopAtNextIteration","nextStop","stopTime","Players","_players","_fadeIn","_fadeOut","player","playing","playerName","stopAll","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","label","deviceId","constraints","audio","echoCancellation","mediaDevices","getUserMedia","createMediaStreamSource","getAudioTracks","kind","groupId","shared","_isIterable3","_interopRequireDefault","_getIterator3","_arr","_d","sliceIterator","store","USE_SYMBOL","stat","copyright","IE8_DOM_DEFINE","toPrimitive","dP","P","Attributes","getIterator","iterFn","TO_STRING","createDesc","$export","own","IS_FORCED","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","IS_WRAP","W","expProto","C","virtual","R","U","$keys","getKeys","toLength","toAbsoluteIndex","IS_INCLUDES","$this","fromIndex","LIBRARY","redefine","$iterCreate","BUGGY","returnThis","Base","DEFAULT","IS_SET","FORCED","getMethod","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","entries","addToUnscopables","iterated","Arguments","$at"],"mappings":"yCACAA,EAAAC,SAAAC,EAAA,OAAAA,CAAA,WACA,OAA0E,GAA1EC,OAAAC,kBAAiC,KAAQC,IAAA,WAAmB,YAAcC,4BCD1E,IAAAC,EAAAL,EAAA,QACAF,EAAAC,QAAA,SAAAO,EAAAC,EAAAC,GAEA,GADAH,EAAAC,QACAG,IAAAF,EAAA,OAAAD,EACA,OAAAE,GACA,uBAAAJ,GACA,OAAAE,EAAAI,KAAAH,EAAAH,IAEA,uBAAAA,EAAAO,GACA,OAAAL,EAAAI,KAAAH,EAAAH,EAAAO,IAEA,uBAAAP,EAAAO,EAAAC,GACA,OAAAN,EAAAI,KAAAH,EAAAH,EAAAO,EAAAC,IAGA,kBACA,OAAAN,EAAAO,MAAAN,EAAAO,qCCjBAd,EAAA,QAYA,IAXA,IAAAe,EAAAf,EAAA,QACAgB,EAAAhB,EAAA,QACAiB,EAAAjB,EAAA,QACAkB,EAAAlB,EAAA,OAAAA,CAAA,eAEAmB,EAAA,wbAIAC,MAAA,KAEAC,EAAA,EAAeA,EAAAF,EAAAX,OAAyBa,IAAA,CACxC,IAAAC,EAAAH,EAAAE,GACAE,EAAAR,EAAAO,GACAE,EAAAD,KAAAE,UACAD,MAAAN,IAAAF,EAAAQ,EAAAN,EAAAI,GACAL,EAAAK,GAAAL,EAAAS,6BCjBA5B,EAAAC;;;;;ICaA,SAAA4B,EAAAC,EAAAC,GACA,EAKA,SAAAC,EAAAC,GACA,OAAA9B,OAAAwB,UAAAO,SAAAtB,KAAAqB,GAAAE,QAAA,YAGA,IAAAC,GACAC,KAAA,cACAC,YAAA,EACAC,OACAF,MACAG,KAAAC,OACAC,QAAA,YAGAC,OAAA,SAAAC,EAAAC,GACA,IAAAN,EAAAM,EAAAN,MACAO,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,OACAC,EAAAH,EAAAG,KAEAA,EAAAC,YAAA,EAaA,IATA,IAAAC,EAAAH,EAAAI,eACAd,EAAAE,EAAAF,KACAe,EAAAL,EAAAM,OACAC,EAAAP,EAAAQ,mBAAAR,EAAAQ,qBAIAC,EAAA,EACAC,GAAA,EACAV,KAAAW,cAAAX,GACAA,EAAAY,QAAAZ,EAAAY,OAAAX,KAAAC,YACAO,IAEAT,EAAAa,YACAH,GAAA,GAEAV,IAAAc,QAKA,GAHAb,EAAAc,gBAAAN,EAGAC,EACA,OAAAP,EAAAI,EAAAjB,GAAAW,EAAAF,GAGA,IAAAiB,EAAAX,EAAAW,QAAAP,GAEA,IAAAO,EAEA,OADAT,EAAAjB,GAAA,KACAa,IAGA,IAAAc,EAAAV,EAAAjB,GAAA0B,EAAAE,WAAA5B,GAIAW,EAAAkB,sBAAA,SAAAC,EAAAC,GAEA,IAAAC,EAAAN,EAAAO,UAAAjC,IAEA+B,GAAAC,IAAAF,IACAC,GAAAC,IAAAF,KAEAJ,EAAAO,UAAAjC,GAAA+B,KAMKpB,EAAAuB,OAAAvB,EAAAuB,UAA6BC,SAAA,SAAA5B,EAAA6B,GAClCV,EAAAO,UAAAjC,GAAAoC,EAAAC,mBAIA,IAAAC,EAAA3B,EAAAT,MAkBA,SAAAa,EAAAwB,GACA,cAAAA,GACA,gBACA,OACA,aACA,OAAAA,EACA,eACA,OAAAA,EAAAxB,GACA,cACA,OAAAwB,EAAAxB,EAAAyB,YAAAlE,EACA,QACA,GA7BAmE,CAAA1B,EAAAW,EAAAxB,OAAAwB,EAAAxB,MAAAF,IACA,GAAAsC,EAAA,CAEAA,EAAA3B,EAAAT,MAoCA,SAAAwC,EAAAC,GACA,QAAAC,KAAAD,EACAD,EAAAE,GAAAD,EAAAC,GAEA,OAAAF,EAxCAG,IAA0CP,GAE1C,IAAAQ,EAAAnC,EAAAmC,MAAAnC,EAAAmC,UACA,QAAAF,KAAAN,EACAX,EAAAzB,OAAA0C,KAAAjB,EAAAzB,QACA4C,EAAAF,GAAAN,EAAAM,UACAN,EAAAM,IAKA,OAAA/B,EAAAc,EAAAhB,EAAAF,KAkCA,IAAAsC,EAAA,WACAC,EAAA,SAAAvE,GAA0C,UAAAA,EAAAwE,WAAA,GAAApD,SAAA,KAC1CqD,EAAA,OAKAC,EAAA,SAAAC,GAA6B,OAAAC,mBAAAD,GAC7BE,QAAAP,EAAAC,GACAM,QAAAJ,EAAA,MAEAK,EAAAC,mBAuBA,SAAAC,EAAAC,GACA,IAAAC,KAIA,OAFAD,IAAAE,OAAAN,QAAA,kBAMAI,EAAAzE,MAAA,KAAA4E,QAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAR,QAAA,WAAArE,MAAA,KACA2D,EAAAW,EAAAQ,EAAAC,SACAjC,EAAAgC,EAAA1F,OAAA,EACAkF,EAAAQ,EAAAE,KAAA,MACA,UAEA3F,IAAAqF,EAAAf,GACAe,EAAAf,GAAAb,EACKxC,MAAA2E,QAAAP,EAAAf,IACLe,EAAAf,GAAAuB,KAAApC,GAEA4B,EAAAf,IAAAe,EAAAf,GAAAb,KAIA4B,GAnBAA,EAsBA,SAAAS,EAAAC,GACA,IAAAV,EAAAU,EAAAvG,OAAAwG,KAAAD,GAAAE,IAAA,SAAA3B,GACA,IAAAb,EAAAsC,EAAAzB,GAEA,QAAAtE,IAAAyD,EACA,SAGA,UAAAA,EACA,OAAAoB,EAAAP,GAGA,GAAArD,MAAA2E,QAAAnC,GAAA,CACA,IAAAyC,KAWA,OAVAzC,EAAA8B,QAAA,SAAAY,QACAnG,IAAAmG,IAGA,OAAAA,EACAD,EAAAL,KAAAhB,EAAAP,IAEA4B,EAAAL,KAAAhB,EAAAP,GAAA,IAAAO,EAAAsB,OAGAD,EAAAP,KAAA,KAGA,OAAAd,EAAAP,GAAA,IAAAO,EAAApB,KACG2C,OAAA,SAAAC,GAAuB,OAAAA,EAAAtG,OAAA,IAAuB4F,KAAA,UACjD,OAAAN,EAAA,IAAAA,EAAA,GAMA,IAAAiB,EAAA,OAEA,SAAAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAAC,EAAAD,KAAAE,QAAAf,eAEAV,EAAAqB,EAAArB,UACA,IACAA,EAAA0B,EAAA1B,GACG,MAAA2B,IAEH,IAAAtE,GACAf,KAAA+E,EAAA/E,MAAA8E,KAAA9E,KACAsF,KAAAR,KAAAQ,SACAC,KAAAR,EAAAQ,MAAA,IACAC,KAAAT,EAAAS,MAAA,GACA9B,QACAlB,OAAAuC,EAAAvC,WACAiD,SAAAC,EAAAX,EAAAG,GACAxD,QAAAoD,EA2BA,SAAAA,GACA,IAAAnB,KACA,KAAAmB,GACAnB,EAAAgC,QAAAb,GACAA,IAAApE,OAEA,OAAAiD,EAjCAiC,CAAAd,OAKA,OAHAE,IACAjE,EAAAiE,eAAAU,EAAAV,EAAAE,IAEApH,OAAA+H,OAAA9E,GAGA,SAAAqE,EAAAU,GACA,GAAAvG,MAAA2E,QAAA4B,GACA,OAAAA,EAAAvB,IAAAa,GACG,GAAAU,GAAA,iBAAAA,EAAA,CACH,IAAAnC,KACA,QAAAf,KAAAkD,EACAnC,EAAAf,GAAAwC,EAAAU,EAAAlD,IAEA,OAAAe,EAEA,OAAAmC,EAKA,IAAAC,EAAAlB,EAAA,MACAU,KAAA,MAYA,SAAAG,EACAlF,EACAwF,GAEA,IAAAT,EAAA/E,EAAA+E,KACA7B,EAAAlD,EAAAkD,WAAwB,IAAAA,UACxB,IAAA8B,EAAAhF,EAAAgF,KAGA,YAHsB,IAAAA,MAAA,KAGtBD,GAAA,MADAS,GAAA5B,GACAV,GAAA8B,EAGA,SAAAS,EAAAhI,EAAAO,GACA,OAAAA,IAAAuH,EACA9H,IAAAO,IACGA,IAEAP,EAAAsH,MAAA/G,EAAA+G,KAEHtH,EAAAsH,KAAAjC,QAAAsB,EAAA,MAAApG,EAAA+G,KAAAjC,QAAAsB,EAAA,KACA3G,EAAAuH,OAAAhH,EAAAgH,MACAU,EAAAjI,EAAAyF,MAAAlF,EAAAkF,UAEGzF,EAAA+B,OAAAxB,EAAAwB,QAEH/B,EAAA+B,OAAAxB,EAAAwB,MACA/B,EAAAuH,OAAAhH,EAAAgH,MACAU,EAAAjI,EAAAyF,MAAAlF,EAAAkF,QACAwC,EAAAjI,EAAAuE,OAAAhE,EAAAgE,UAOA,SAAA0D,EAAAjI,EAAAO,GAKA,QAJA,IAAAP,eACA,IAAAO,WAGAP,IAAAO,EAAiB,OAAAP,IAAAO,EACjB,IAAA2H,EAAArI,OAAAwG,KAAArG,GACAmI,EAAAtI,OAAAwG,KAAA9F,GACA,OAAA2H,EAAA9H,SAAA+H,EAAA/H,QAGA8H,EAAAE,MAAA,SAAAzD,GACA,IAAA0D,EAAArI,EAAA2E,GACA2D,EAAA/H,EAAAoE,GAEA,uBAAA0D,GAAA,iBAAAC,EACAL,EAAAI,EAAAC,GAEAnG,OAAAkG,KAAAlG,OAAAmG,KA0BA,IA0IAC,EA1IAC,GAAArG,OAAAtC,QACA4I,GAAAtG,OAAAb,OAEAoH,GACA3G,KAAA,cACAE,OACAwC,IACAvC,KAAAsG,EACAG,UAAA,GAEAC,KACA1G,KAAAC,OACAC,QAAA,KAEAyG,MAAAC,QACAC,OAAAD,QACAzD,QAAAyD,QACAE,YAAA7G,OACA8G,iBAAA9G,OACA+G,OACAhH,KAAAuG,EACArG,QAAA,UAGAC,OAAA,SAAAO,GACA,IAAAuG,EAAAC,KAEApC,EAAAoC,KAAAC,QACAtF,EAAAqF,KAAArG,OACAR,EAAAyE,EAAAsC,QAAAF,KAAA3E,GAAAV,EAAAqF,KAAAL,QACAjC,EAAAvE,EAAAuE,SACAhE,EAAAP,EAAAO,MACAyG,EAAAhH,EAAAgH,KAEAC,KACAC,EAAAzC,EAAAE,QAAAwC,gBACAC,EAAA3C,EAAAE,QAAA0C,qBAEAC,EAAA,MAAAJ,EACA,qBACAA,EACAK,EAAA,MAAAH,EACA,2BACAA,EACAX,EAAA,MAAAI,KAAAJ,YACAa,EACAT,KAAAJ,YACAC,EAAA,MAAAG,KAAAH,iBACAa,EACAV,KAAAH,iBACAc,EAAAjD,EAAAQ,KACAV,EAAA,KAAAE,EAAA,KAAAE,GACAlE,EAEA0G,EAAAP,GAAAjB,EAAAjE,EAAAgG,GACAP,EAAAR,GAAAI,KAAAP,MACAW,EAAAP,GA9EA,SAAAlF,EAAAiG,GACA,OAGA,IAFAjG,EAAAuD,KAAAjC,QAAAsB,EAAA,KAAA9E,QACAmI,EAAA1C,KAAAjC,QAAAsB,EAAA,SAEAqD,EAAAzC,MAAAxD,EAAAwD,OAAAyC,EAAAzC,OAKA,SAAAxD,EAAAiG,GACA,QAAArF,KAAAqF,EACA,KAAArF,KAAAZ,GACA,SAGA,SAVAkG,CAAAlG,EAAA0B,MAAAuE,EAAAvE,OAyEAyE,CAAAnG,EAAAgG,GAEA,IAAAI,EAAA,SAAA/C,GACAgD,EAAAhD,KACA+B,EAAA9D,QACA2B,EAAA3B,QAAAyB,GAEAE,EAAAd,KAAAY,KAKAuD,GAAcC,MAAAF,GACd9I,MAAA2E,QAAAmD,KAAAF,OACAE,KAAAF,MAAAtD,QAAA,SAAAwB,GAAuCiD,EAAAjD,GAAA+C,IAEvCE,EAAAjB,KAAAF,OAAAiB,EAGA,IAAAzH,GACA6H,MAAAf,GAGA,SAAAJ,KAAAR,IACAlG,EAAA2H,KACA3H,EAAAmC,OAAoB0E,YACf,CAEL,IAAAvJ,EAsCA,SAAAwK,EAAAhI,GACA,GAAAA,EAEA,IADA,IAAAiI,EACAxJ,EAAA,EAAmBA,EAAAuB,EAAApC,OAAqBa,IAAA,CAExC,UADAwJ,EAAAjI,EAAAvB,IACA2H,IACA,OAAA6B,EAEA,GAAAA,EAAAjI,WAAAiI,EAAAD,EAAAC,EAAAjI,WACA,OAAAiI,GA/CAD,CAAApB,KAAAsB,OAAAtI,SACA,GAAApC,EAAA,CAEAA,EAAA2K,UAAA,EACA,IAAA/F,EAAA2D,EAAAqC,KAAAhG,QACA5E,EAAA0C,KAAAkC,KAAsC5E,EAAA0C,OACtC2H,MACArK,EAAA0C,KAAAmC,MAAAD,KAA6C5E,EAAA0C,KAAAmC,QAC7C0E,YAGA7G,EAAA2H,KAIA,OAAAzH,EAAAwG,KAAAR,IAAAlG,EAAA0G,KAAAsB,OAAAtI,WAIA,SAAAgI,EAAAhD,GAEA,KAAAA,EAAAyD,SAAAzD,EAAA0D,QAAA1D,EAAA2D,SAAA3D,EAAA4D,UAEA5D,EAAA6D,uBAEA5K,IAAA+G,EAAA8D,QAAA,IAAA9D,EAAA8D,QAAA,CAEA,GAAA9D,EAAA+D,eAAA/D,EAAA+D,cAAAC,aAAA,CACA,IAAApB,EAAA5C,EAAA+D,cAAAC,aAAA,UACA,iBAAAC,KAAArB,GAAqC,OAMrC,OAHA5C,EAAAkE,gBACAlE,EAAAkE,kBAEA,GAoBA,SAAAC,EAAAC,GACA,IAAAD,EAAAE,WAAAlD,IAAAiD,EAAA,CACAD,EAAAE,WAAA,EAEAlD,EAAAiD,EAEA,IAAAE,EAAA,SAAAC,GAA4B,YAAAtL,IAAAsL,GAE5BC,EAAA,SAAA/H,EAAAgI,GACA,IAAA5K,EAAA4C,EAAAiI,SAAAC,aACAL,EAAAzK,IAAAyK,EAAAzK,IAAAyB,OAAAgJ,EAAAzK,IAAA2C,wBACA3C,EAAA4C,EAAAgI,IAIAL,EAAAQ,OACAC,aAAA,WACAP,EAAAtC,KAAA0C,SAAA9E,SACAoC,KAAAhG,YAAAgG,KACAA,KAAA8C,QAAA9C,KAAA0C,SAAA9E,OACAoC,KAAA8C,QAAAC,KAAA/C,MACAoC,EAAAZ,KAAAwB,eAAAhD,KAAA,SAAAA,KAAA8C,QAAAG,QAAAtI,UAEAqF,KAAAhG,YAAAgG,KAAA7F,SAAA6F,KAAA7F,QAAAH,aAAAgG,KAEAwC,EAAAxC,YAEAkD,UAAA,WACAV,EAAAxC,SAIAvJ,OAAAC,eAAA0L,EAAAnK,UAAA,WACAtB,IAAA,WAA0B,OAAAqJ,KAAAhG,YAAA8I,WAG1BrM,OAAAC,eAAA0L,EAAAnK,UAAA,UACAtB,IAAA,WAA0B,OAAAqJ,KAAAhG,YAAAmJ,UAG1Bf,EAAA9H,UAAA,cAAA5B,GACA0J,EAAA9H,UAAA,cAAAgF,GAEA,IAAA8D,EAAAhB,EAAAlH,OAAAmI,sBAEAD,EAAAE,iBAAAF,EAAAG,iBAAAH,EAAAI,kBAAAJ,EAAAK,SAKA,IAAAC,EAAA,oBAAAC,OAIA,SAAAC,EACAC,EACAC,EACAnE,GAEA,IAAAoE,EAAAF,EAAAG,OAAA,GACA,SAAAD,EACA,OAAAF,EAGA,SAAAE,GAAA,MAAAA,EACA,OAAAD,EAAAD,EAGA,IAAAI,EAAAH,EAAAlM,MAAA,KAKA+H,GAAAsE,IAAAjN,OAAA,IACAiN,EAAAC,MAKA,IADA,IAAAC,EAAAN,EAAA5H,QAAA,UAAArE,MAAA,KACAC,EAAA,EAAiBA,EAAAsM,EAAAnN,OAAqBa,IAAA,CACtC,IAAAuM,EAAAD,EAAAtM,GACA,OAAAuM,EACAH,EAAAC,MACK,MAAAE,GACLH,EAAAnH,KAAAsH,GASA,MAJA,KAAAH,EAAA,IACAA,EAAA3F,QAAA,IAGA2F,EAAArH,KAAA,KA0BA,SAAAyH,EAAAnG,GACA,OAAAA,EAAAjC,QAAA,aAGA,IAAAqI,EAAApM,MAAA2E,SAAA,SAAA0H,GACA,wBAAA9N,OAAAwB,UAAAO,SAAAtB,KAAAqN,IAMAC,EAAAC,EACAC,EAAAC,EACAC,EAsGA,SAAA7I,EAAA+B,GACA,OAAA+G,EAAAF,EAAA5I,EAAA+B,KAtGAgH,EAAAD,EACAE,EAAAC,EAOAC,EAAA,IAAAC,QAGA,UAOA,0GACAtI,KAAA,UASA,SAAA+H,EAAA5I,EAAA+B,GAQA,IAPA,IAKAxB,EALA6I,KACA5J,EAAA,EACA6J,EAAA,EACAlH,EAAA,GACAmH,EAAAvH,KAAAwH,WAAA,IAGA,OAAAhJ,EAAA2I,EAAAM,KAAAxJ,KAAA,CACA,IAAAyJ,EAAAlJ,EAAA,GACAmJ,EAAAnJ,EAAA,GACAoJ,EAAApJ,EAAA8I,MAKA,GAJAlH,GAAAnC,EAAA4J,MAAAP,EAAAM,GACAN,EAAAM,EAAAF,EAAAxO,OAGAyO,EACAvH,GAAAuH,EAAA,OADA,CAKA,IAAAG,EAAA7J,EAAAqJ,GACAS,EAAAvJ,EAAA,GACA3D,EAAA2D,EAAA,GACAwJ,EAAAxJ,EAAA,GACAyJ,EAAAzJ,EAAA,GACA0J,EAAA1J,EAAA,GACA2J,EAAA3J,EAAA,GAGA4B,IACAiH,EAAArI,KAAAoB,GACAA,EAAA,IAGA,IAAAgI,EAAA,MAAAL,GAAA,MAAAD,OAAAC,EACAM,EAAA,MAAAH,GAAA,MAAAA,EACAI,EAAA,MAAAJ,GAAA,MAAAA,EACAV,EAAAhJ,EAAA,IAAA+I,EACAgB,EAAAP,GAAAC,EAEAZ,EAAArI,MACAnE,QAAA4C,IACAsK,UAAA,GACAP,YACAc,WACAD,SACAD,UACAD,aACAI,UAAAC,EAAAD,GAAAJ,EAAA,UAAAM,EAAAjB,GAAA,SAcA,OATAF,EAAArJ,EAAA/E,SACAkH,GAAAnC,EAAAyK,OAAApB,IAIAlH,GACAiH,EAAArI,KAAAoB,GAGAiH,EAoBA,SAAAsB,EAAA1K,GACA,OAAA2K,UAAA3K,GAAAE,QAAA,mBAAA7E,GACA,UAAAA,EAAAwE,WAAA,GAAApD,SAAA,IAAAmO,gBAmBA,SAAA9B,EAAAM,GAKA,IAHA,IAAAyB,EAAA,IAAA1O,MAAAiN,EAAAnO,QAGAa,EAAA,EAAiBA,EAAAsN,EAAAnO,OAAmBa,IACpC,iBAAAsN,EAAAtN,KACA+O,EAAA/O,GAAA,IAAAqN,OAAA,OAAAC,EAAAtN,GAAAwO,QAAA,OAIA,gBAAArJ,EAAA6J,GAMA,IALA,IAAA3I,EAAA,GACA5E,EAAA0D,MAEAlB,GADA+K,OACAC,OAAAL,EAAAzK,mBAEAnE,EAAA,EAAmBA,EAAAsN,EAAAnO,OAAmBa,IAAA,CACtC,IAAAkP,EAAA5B,EAAAtN,GAEA,oBAAAkP,EAAA,CAMA,IACA3C,EADA3F,EAAAnF,EAAAyN,EAAApO,MAGA,SAAA8F,EAAA,CACA,GAAAsI,EAAAX,SAAA,CAEAW,EAAAb,UACAhI,GAAA6I,EAAAlB,QAGA,SAEA,UAAAmB,UAAA,aAAAD,EAAApO,KAAA,mBAIA,GAAA2L,EAAA7F,GAAA,CACA,IAAAsI,EAAAZ,OACA,UAAAa,UAAA,aAAAD,EAAApO,KAAA,kCAAAsO,KAAAC,UAAAzI,GAAA,KAGA,OAAAA,EAAAzH,OAAA,CACA,GAAA+P,EAAAX,SACA,SAEA,UAAAY,UAAA,aAAAD,EAAApO,KAAA,qBAIA,QAAAwO,EAAA,EAAuBA,EAAA1I,EAAAzH,OAAkBmQ,IAAA,CAGzC,GAFA/C,EAAAtI,EAAA2C,EAAA0I,KAEAP,EAAA/O,GAAAoK,KAAAmC,GACA,UAAA4C,UAAA,iBAAAD,EAAApO,KAAA,eAAAoO,EAAAV,QAAA,oBAAAY,KAAAC,UAAA9C,GAAA,KAGAlG,IAAA,IAAAiJ,EAAAJ,EAAAlB,OAAAkB,EAAAzB,WAAAlB,OApBA,CA4BA,GAFAA,EAAA2C,EAAAd,SA5EAS,UA4EAjI,GA5EAxC,QAAA,iBAAA7E,GACA,UAAAA,EAAAwE,WAAA,GAAApD,SAAA,IAAAmO,gBA2EA7K,EAAA2C,IAEAmI,EAAA/O,GAAAoK,KAAAmC,GACA,UAAA4C,UAAA,aAAAD,EAAApO,KAAA,eAAAoO,EAAAV,QAAA,oBAAAjC,EAAA,KAGAlG,GAAA6I,EAAAlB,OAAAzB,QArDAlG,GAAA6I,EAwDA,OAAA7I,GAUA,SAAAqI,EAAAxK,GACA,OAAAA,EAAAE,QAAA,6BAAmC,QASnC,SAAAqK,EAAAP,GACA,OAAAA,EAAA9J,QAAA,wBAUA,SAAAmL,EAAAC,EAAApK,GAEA,OADAoK,EAAApK,OACAoK,EASA,SAAAC,EAAAxJ,GACA,OAAAA,EAAAyJ,UAAA,OAwEA,SAAAvC,EAAAG,EAAAlI,EAAAa,GACAwG,EAAArH,KACAa,EAAiCb,GAAAa,EACjCb,MAUA,IALA,IAAAuK,GAFA1J,SAEA0J,OACAC,GAAA,IAAA3J,EAAA2J,IACA/N,EAAA,GAGA7B,EAAA,EAAiBA,EAAAsN,EAAAnO,OAAmBa,IAAA,CACpC,IAAAkP,EAAA5B,EAAAtN,GAEA,oBAAAkP,EACArN,GAAA6M,EAAAQ,OACK,CACL,IAAAlB,EAAAU,EAAAQ,EAAAlB,QACAC,EAAA,MAAAiB,EAAAV,QAAA,IAEApJ,EAAAH,KAAAiK,GAEAA,EAAAZ,SACAL,GAAA,MAAAD,EAAAC,EAAA,MAaApM,GANAoM,EAJAiB,EAAAX,SACAW,EAAAb,QAGAL,EAAA,IAAAC,EAAA,KAFA,MAAAD,EAAA,IAAAC,EAAA,MAKAD,EAAA,IAAAC,EAAA,KAOA,IAAAR,EAAAiB,EAAAzI,EAAAwH,WAAA,KACAoC,EAAAhO,EAAAiM,OAAAL,EAAAtO,UAAAsO,EAkBA,OAZAkC,IACA9N,GAAAgO,EAAAhO,EAAAiM,MAAA,GAAAL,EAAAtO,QAAA0C,GAAA,MAAA4L,EAAA,WAIA5L,GADA+N,EACA,IAIAD,GAAAE,EAAA,SAAApC,EAAA,MAGA8B,EAAA,IAAAlC,OAAA,IAAAxL,EAAA4N,EAAAxJ,IAAAb,GAeA,SAAAwH,EAAAvG,EAAAjB,EAAAa,GAQA,OAPAwG,EAAArH,KACAa,EAAiCb,GAAAa,EACjCb,MAGAa,QAEAI,aAAAgH,OAlJA,SAAAhH,EAAAjB,GAEA,IAAA0K,EAAAzJ,EAAA0J,OAAAC,MAAA,aAEA,GAAAF,EACA,QAAA9P,EAAA,EAAmBA,EAAA8P,EAAA3Q,OAAmBa,IACtCoF,EAAAH,MACAnE,KAAAd,EACAgO,OAAA,KACAP,UAAA,KACAc,UAAA,EACAD,QAAA,EACAD,SAAA,EACAD,UAAA,EACAI,QAAA,OAKA,OAAAe,EAAAlJ,EAAAjB,GAgIA6K,CAAA5J,EAAkD,GAGlDoG,EAAApG,GAxHA,SAAAA,EAAAjB,EAAAa,GAGA,IAFA,IAAApB,KAEA7E,EAAA,EAAiBA,EAAAqG,EAAAlH,OAAiBa,IAClC6E,EAAAI,KAAA2H,EAAAvG,EAAArG,GAAAoF,EAAAa,GAAA8J,QAKA,OAAAR,EAFA,IAAAlC,OAAA,MAAAxI,EAAAE,KAAA,SAAA0K,EAAAxJ,IAEAb,GAgHA8K,CAA2C,EAA8B,EAAAjK,GArGzE,SAAAI,EAAAjB,EAAAa,GACA,OAAAkH,EAAAL,EAAAzG,EAAAJ,GAAAb,EAAAa,GAuGAkK,CAA0C,EAA8B,EAAAlK,GAGxE0G,EAAAG,MAAAD,EACAF,EAAAyD,QAAArD,EACAJ,EAAAK,iBAAAC,EACAN,EAAAQ,eAAAD,EAKA,IAAAmD,EAAAzR,OAAA0R,OAAA,MAEA,SAAAC,EACAlK,EACA/C,EACAkN,GAEA,IAIA,OAFAH,EAAAhK,KACAgK,EAAAhK,GAAAsG,EAAAyD,QAAA/J,KACA/C,OAAiC2L,QAAA,IAC9B,MAAA9I,GAIH,UAMA,SAAAsK,EACAC,EACAC,EACAC,EACAC,GAGA,IAAAC,EAAAH,MAEAI,EAAAH,GAAAhS,OAAA0R,OAAA,MAEAU,EAAAH,GAAAjS,OAAA0R,OAAA,MAEAI,EAAA/L,QAAA,SAAA9C,IAoBA,SAAAoP,EACAH,EACAC,EACAC,EACAnP,EACAL,EACA0P,GAEA,IAAA7K,EAAAxE,EAAAwE,KACA,IAAAvF,EAAAe,EAAAf,KACA,EASA,IAAAqQ,EAAAtP,EAAAsP,wBACA,IAAAC,EAuGA,SAAA/K,EAAA7E,EAAAmO,GACAA,IAAgBtJ,IAAAjC,QAAA,WAChB,SAAAiC,EAAA,GAAwB,OAAAA,EACxB,SAAA7E,EAAuB,OAAA6E,EACvB,OAAAmG,EAAAhL,EAAA,SAAA6E,GA3GAgL,CACAhL,EACA7E,EACA2P,EAAAxB,QAGA,kBAAA9N,EAAAyP,gBACAH,EAAAzB,UAAA7N,EAAAyP,eAGA,IAAA1L,GACAS,KAAA+K,EACAG,MA+EA,SAAAlL,EAAA8K,GACA,IAAAI,EAAA5E,EAAAtG,KAAA8K,GAQA,OAAAI,EAxFAC,CAAAJ,EAAAD,GACAzO,WAAAb,EAAAa,aAAqCvB,QAAAU,EAAAY,WACrCM,aACAjC,OACAU,SACA0P,UACAO,SAAA5P,EAAA4P,SACAC,YAAA7P,EAAA6P,YACAtL,KAAAvE,EAAAuE,SACApF,MAAA,MAAAa,EAAAb,SAEAa,EAAAa,WACAb,EAAAb,OACWG,QAAAU,EAAAb,QAGXa,EAAAN,UAgBAM,EAAAN,SAAAoD,QAAA,SAAA6E,GACA,IAAAmI,EAAAT,EACA1E,EAAA0E,EAAA,IAAA1H,EAAA,WACApK,EACA6R,EAAAH,EAAAC,EAAAC,EAAAxH,EAAA5D,EAAA+L,KAIA,QAAAvS,IAAAyC,EAAA+P,MAAA,CACA,IAAAC,EAAAxR,MAAA2E,QAAAnD,EAAA+P,OACA/P,EAAA+P,OACA/P,EAAA+P,OAEAC,EAAAlN,QAAA,SAAAiN,GACA,IAAAE,GACAzL,KAAAuL,EACArQ,SAAAM,EAAAN,UAEA0P,EACAH,EACAC,EACAC,EACAc,EACAtQ,EACAoE,EAAAS,MAAA,OAKA0K,EAAAnL,EAAAS,QACAyK,EAAA7L,KAAAW,EAAAS,MACA0K,EAAAnL,EAAAS,MAAAT,GAGA9E,IACAkQ,EAAAlQ,KACAkQ,EAAAlQ,GAAA8E,IAvHAqL,CAAAH,EAAAC,EAAAC,EAAAnP,KAIA,QAAA7B,EAAA,EAAA+R,EAAAjB,EAAA3R,OAAsCa,EAAA+R,EAAO/R,IAC7C,MAAA8Q,EAAA9Q,KACA8Q,EAAA7L,KAAA6L,EAAAkB,OAAAhS,EAAA,OACA+R,IACA/R,KAIA,OACA8Q,WACAC,UACAC,WAyIA,SAAAiB,EACAC,EACApP,EACAgF,EACA/B,GAEA,IAAAgI,EAAA,iBAAAmE,GAAwC7L,KAAA6L,GAAYA,EAEpD,GAAAnE,EAAAjN,MAAAiN,EAAAoE,YACA,OAAApE,EAIA,IAAAA,EAAA1H,MAAA0H,EAAAzK,QAAAR,EAAA,EACAiL,EAAAqE,KAAoBrE,IACpBoE,aAAA,EACA,IAAA7O,EAAA8O,OAAiCtP,EAAAQ,QAAAyK,EAAAzK,QACjC,GAAAR,EAAAhC,KACAiN,EAAAjN,KAAAgC,EAAAhC,KACAiN,EAAAzK,cACK,GAAAR,EAAAN,QAAArD,OAAA,CACL,IAAAkT,EAAAvP,EAAAN,QAAAM,EAAAN,QAAArD,OAAA,GAAAkH,KACA0H,EAAA1H,KAAAkK,EAAA8B,EAAA/O,EAAAR,EAAA,WACK,EAGL,OAAAiL,EAGA,IAAAuE,EAzqBA,SAAAjM,GACA,IAAAC,EAAA,GACA9B,EAAA,GAEA+N,EAAAlM,EAAAzF,QAAA,KACA2R,GAAA,IACAjM,EAAAD,EAAAyH,MAAAyE,GACAlM,IAAAyH,MAAA,EAAAyE,IAGA,IAAAC,EAAAnM,EAAAzF,QAAA,KAMA,OALA4R,GAAA,IACAhO,EAAA6B,EAAAyH,MAAA0E,EAAA,GACAnM,IAAAyH,MAAA,EAAA0E,KAIAnM,OACA7B,QACA8B,QAspBAmM,CAAA1E,EAAA1H,MAAA,IACAqM,EAAA5P,KAAAuD,MAAA,IACAA,EAAAiM,EAAAjM,KACA0F,EAAAuG,EAAAjM,KAAAqM,EAAA5K,GAAAiG,EAAAjG,QACA4K,EAEAlO,EAznCA,SACAA,EACAmO,EACAC,QAEA,IAAAD,UAEA,IACAE,EADA/F,EAAA8F,GAAArO,EAEA,IACAsO,EAAA/F,EAAAtI,GAAA,IACG,MAAA2B,GAEH0M,KAEA,QAAAnP,KAAAiP,EACAE,EAAAnP,GAAAiP,EAAAjP,GAEA,OAAAmP,EAumCAC,CACAR,EAAA9N,MACAuJ,EAAAvJ,MACAuB,KAAAE,QAAA1B,YAGA+B,EAAAyH,EAAAzH,MAAAgM,EAAAhM,KAKA,OAJAA,GAAA,MAAAA,EAAA6F,OAAA,KACA7F,EAAA,IAAAA,IAIA6L,aAAA,EACA9L,OACA7B,QACA8B,QAIA,SAAA8L,EAAArT,EAAAO,GACA,QAAAoE,KAAApE,EACAP,EAAA2E,GAAApE,EAAAoE,GAEA,OAAA3E,EAMA,SAAAgU,EACArC,EACA3K,GAEA,IAAAzE,EAAAmP,EAAAC,GACAI,EAAAxP,EAAAwP,SACAC,EAAAzP,EAAAyP,QACAC,EAAA1P,EAAA0P,QAMA,SAAAhB,EACAkC,EACAc,EACAlN,GAEA,IAAAD,EAAAoM,EAAAC,EAAAc,GAAA,EAAAjN,GACAjF,EAAA+E,EAAA/E,KAEA,GAAAA,EAAA,CACA,IAAA8E,EAAAoL,EAAAlQ,GAIA,IAAA8E,EAAoB,OAAAqN,EAAA,KAAApN,GACpB,IAAAqN,EAAAtN,EAAA2L,MAAAnM,KACAI,OAAA,SAAA9B,GAAgC,OAAAA,EAAA6K,WAChClJ,IAAA,SAAA3B,GAA6B,OAAAA,EAAA5C,OAM7B,GAJA,iBAAA+E,EAAAvC,SACAuC,EAAAvC,WAGA0P,GAAA,iBAAAA,EAAA1P,OACA,QAAAI,KAAAsP,EAAA1P,SACAI,KAAAmC,EAAAvC,SAAA4P,EAAAtS,QAAA8C,IAAA,IACAmC,EAAAvC,OAAAI,GAAAsP,EAAA1P,OAAAI,IAKA,GAAAkC,EAEA,OADAC,EAAAQ,KAAAkK,EAAA3K,EAAAS,KAAAR,EAAAvC,QACA2P,EAAArN,EAAAC,EAAAC,QAEK,GAAAD,EAAAQ,KAAA,CACLR,EAAAvC,UACA,QAAAtD,EAAA,EAAqBA,EAAA8Q,EAAA3R,OAAqBa,IAAA,CAC1C,IAAAqG,EAAAyK,EAAA9Q,GACAmT,EAAApC,EAAA1K,GACA,GAAA+M,EAAAD,EAAA5B,MAAA1L,EAAAQ,KAAAR,EAAAvC,QACA,OAAA2P,EAAAE,EAAAtN,EAAAC,IAKA,OAAAmN,EAAA,KAAApN,GAGA,SAAA4L,EACA7L,EACAC,GAEA,IAAAwN,EAAAzN,EAAA6L,SACAA,EAAA,mBAAA4B,EACAA,EAAA1N,EAAAC,EAAAC,EAAA,KAAAE,IACAsN,EAMA,GAJA,iBAAA5B,IACAA,GAAkBpL,KAAAoL,KAGlBA,GAAA,iBAAAA,EAMA,OAAAwB,EAAA,KAAApN,GAGA,IAAA2J,EAAAiC,EACA3Q,EAAA0O,EAAA1O,KACAuF,EAAAmJ,EAAAnJ,KACA7B,EAAAqB,EAAArB,MACA8B,EAAAT,EAAAS,KACAhD,EAAAuC,EAAAvC,OAKA,GAJAkB,EAAAgL,EAAA8D,eAAA,SAAA9D,EAAAhL,QACA8B,EAAAkJ,EAAA8D,eAAA,QAAA9D,EAAAlJ,OACAhD,EAAAkM,EAAA8D,eAAA,UAAA9D,EAAAlM,SAEAxC,EAAA,CAEAkQ,EAAAlQ,GAIA,OAAAkP,GACAmC,aAAA,EACArR,OACA0D,QACA8B,OACAhD,eACOlE,EAAAyG,GACF,GAAAQ,EAAA,CAEL,IAAAgM,EAiFA,SAAAhM,EAAAT,GACA,OAAAmG,EAAA1F,EAAAT,EAAApE,OAAAoE,EAAApE,OAAA6E,KAAA,QAlFAkN,CAAAlN,EAAAT,GAIA,OAAAoK,GACAmC,aAAA,EACA9L,KAJAkK,EAAA8B,EAAA/O,GAKAkB,QACA8B,aACOlH,EAAAyG,GAKP,OAAAoN,EAAA,KAAApN,GAuBA,SAAAoN,EACArN,EACAC,EACAC,GAEA,OAAAF,KAAA6L,SACAA,EAAA7L,EAAAE,GAAAD,GAEAD,KAAAsL,QA3BA,SACAtL,EACAC,EACAqL,GAEA,IACAsC,EAAAxD,GACAmC,aAAA,EACA9L,KAHAkK,EAAAW,EAAArL,EAAAvC,UAKA,GAAAkQ,EAAA,CACA,IAAAhR,EAAAgR,EAAAhR,QACAiR,EAAAjR,IAAArD,OAAA,GAEA,OADA0G,EAAAvC,OAAAkQ,EAAAlQ,OACA2P,EAAAQ,EAAA5N,GAEA,OAAAoN,EAAA,KAAApN,GAYA+L,CAAAhM,EAAAC,EAAAD,EAAAsL,SAEAvL,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,OACAiK,QACA0D,UAxJA,SAAAhD,GACAD,EAAAC,EAAAI,EAAAC,EAAAC,KA2JA,SAAAoC,EACA7B,EACAlL,EACA/C,GAEA,IAAAqK,EAAAtH,EAAA2J,MAAAuB,GAEA,IAAA5D,EACA,SACG,IAAArK,EACH,SAGA,QAAAtD,EAAA,EAAA2T,EAAAhG,EAAAxO,OAAiCa,EAAA2T,IAAS3T,EAAA,CAC1C,IAAA0D,EAAA6N,EAAAnM,KAAApF,EAAA,GACA6C,EAAA,iBAAA8K,EAAA3N,GAAAsE,mBAAAqJ,EAAA3N,IAAA2N,EAAA3N,GACA0D,IACAJ,EAAAI,EAAA5C,MAAA+B,GAIA,SAUA,IAAA+Q,EAAAhV,OAAA0R,OAAA,MAEA,SAAAuD,IAEA/H,OAAAV,QAAA0I,cAA+BpQ,IAAAqQ,MAAqB,IACpDjI,OAAAkI,iBAAA,oBAAA7N,GAuJA,IAAAzC,EAtJAuQ,KACA9N,EAAA+N,OAAA/N,EAAA+N,MAAAxQ,MAqJAA,EApJAyC,EAAA+N,MAAAxQ,IAqJAyQ,GAAAzQ,KAhJA,SAAA0Q,GACArO,EACAvC,EACAC,EACA4Q,GAEA,GAAAtO,EAAAuO,IAAA,CAIA,IAAAC,EAAAxO,EAAAE,QAAAuO,eACAD,GASAxO,EAAAuO,IAAAG,UAAA,WACA,IAAAC,EA+BA,WACA,IAAAhR,EAAAqQ,KACA,GAAArQ,EACA,OAAAkQ,EAAAlQ,GAlCAiR,GACAC,EAAAL,EAAA/Q,EAAAC,EAAA4Q,EAAAK,EAAA,MAEAE,IAIA,mBAAAA,EAAAC,KACAD,EAAAC,KAAA,SAAAD,GACAE,GAAA,EAAAJ,KACOK,MAAA,SAAArU,GACP,IAKAoU,GAAAF,EAAAF,OAKA,SAAAT,KACA,IAAAvQ,EAAAqQ,KACArQ,IACAkQ,EAAAlQ,IACA+B,EAAAqG,OAAAkJ,YACAC,EAAAnJ,OAAAoJ,cAsBA,SAAAC,GAAAhQ,GACA,OAAAiQ,GAAAjQ,EAAAM,IAAA2P,GAAAjQ,EAAA8P,GAGA,SAAAI,GAAAlQ,GACA,OACAM,EAAA2P,GAAAjQ,EAAAM,GAAAN,EAAAM,EAAAqG,OAAAkJ,YACAC,EAAAG,GAAAjQ,EAAA8P,GAAA9P,EAAA8P,EAAAnJ,OAAAoJ,aAWA,SAAAE,GAAA1K,GACA,uBAAAA,EAGA,SAAAoK,GAAAF,EAAAF,GACA,IAZAvP,EAYAmQ,EAAA,iBAAAV,EACA,GAAAU,GAAA,iBAAAV,EAAAW,SAAA,CACA,IAAAC,EAAAC,SAAAC,cAAAd,EAAAW,UACA,GAAAC,EAAA,CACA,IAAA3H,EAAA+G,EAAA/G,QAAA,iBAAA+G,EAAA/G,OAAA+G,EAAA/G,UAEA6G,EAvCA,SAAAc,EAAA3H,GACA,IACA8H,EADAF,SAAAG,gBACAC,wBACAC,EAAAN,EAAAK,wBACA,OACApQ,EAAAqQ,EAAAC,KAAAJ,EAAAI,KAAAlI,EAAApI,EACAwP,EAAAa,EAAAE,IAAAL,EAAAK,IAAAnI,EAAAoH,GAiCAgB,CAAAT,EADA3H,GAfApI,EAAA2P,IAFAjQ,EAiBA0I,GAfApI,GAAAN,EAAAM,EAAA,EACAwP,EAAAG,GAAAjQ,EAAA8P,GAAA9P,EAAA8P,EAAA,SAgBKE,GAAAP,KACLF,EAAAW,GAAAT,SAEGU,GAAAH,GAAAP,KACHF,EAAAW,GAAAT,IAGAF,GACA5I,OAAAoK,SAAAxB,EAAAjP,EAAAiP,EAAAO,GAMA,IACAkB,GADAC,GAAAvK,MAIA,KAHAsK,GAAArK,OAAAuK,UAAAC,WAGA1V,QAAA,oBAAAuV,GAAAvV,QAAA,iBACA,IAAAuV,GAAAvV,QAAA,mBACA,IAAAuV,GAAAvV,QAAA,YACA,IAAAuV,GAAAvV,QAAA,mBAKAkL,OAAAV,SAAA,cAAAU,OAAAV,SAIAmL,GAAA1K,GAAAC,OAAA0K,aAAA1K,OAAA0K,YAAAC,IACA3K,OAAA0K,YACAE,KAEAvC,GAAAwC,KAEA,SAAAA,KACA,OAAAJ,GAAAE,MAAAG,QAAA,GAGA,SAAA7C,KACA,OAAAI,GAOA,SAAA0C,GAAAC,EAAA1S,GACA6P,KAGA,IAAA7I,EAAAU,OAAAV,QACA,IACAhH,EACAgH,EAAA0I,cAA4BpQ,IAAAyQ,IAAY,GAAA2C,IAExC3C,GAAAwC,KACAvL,EAAAyL,WAAyBnT,IAAAyQ,IAAY,GAAA2C,IAElC,MAAA3Q,GACH2F,OAAAjG,SAAAzB,EAAA,oBAAA0S,IAIA,SAAAhD,GAAAgD,GACAD,GAAAC,GAAA,GAKA,SAAAC,GAAAC,EAAA/X,EAAAgY,GACA,IAAAC,EAAA,SAAA3J,GACAA,GAAAyJ,EAAA7X,OACA8X,IAEAD,EAAAzJ,GACAtO,EAAA+X,EAAAzJ,GAAA,WACA2J,EAAA3J,EAAA,KAGA2J,EAAA3J,EAAA,IAIA2J,EAAA,GAKA,SAAAC,GAAA3U,GACA,gBAAAgB,EAAAC,EAAAsK,GACA,IAAAqJ,GAAA,EACAC,EAAA,EACAC,EAAA,KAEAC,GAAA/U,EAAA,SAAAgV,EAAAnW,EAAA2O,EAAAtM,GAMA,sBAAA8T,QAAApY,IAAAoY,EAAAC,IAAA,CACAL,GAAA,EACAC,IAEA,IA0BA5S,EA1BA4D,EAAAqP,GAAA,SAAAC,GAuEA,IAAAxS,MAtEAwS,GAuEAC,YAAAC,IAAA,WAAA1S,EAAA2S,OAAAC,gBAtEAJ,IAAAxW,SAGAqW,EAAAQ,SAAA,mBAAAL,EACAA,EACArQ,EAAA3D,OAAAgU,GACA3H,EAAAtN,WAAAgB,GAAAiU,IACAN,GACA,GACAtJ,MAIAkK,EAAAP,GAAA,SAAAQ,GACA,IAAAC,EAAA,qCAAAzU,EAAA,KAAAwU,EAEAZ,IACAA,EAAA7W,EAAAyX,GACAA,EACA,IAAAE,MAAAD,GACApK,EAAAuJ,MAKA,IACA7S,EAAA+S,EAAAnP,EAAA4P,GACS,MAAA9R,GACT8R,EAAA9R,GAEA,GAAA1B,EACA,sBAAAA,EAAAoQ,KACApQ,EAAAoQ,KAAAxM,EAAA4P,OACW,CAEX,IAAAI,EAAA5T,EAAAhC,UACA4V,GAAA,mBAAAA,EAAAxD,MACAwD,EAAAxD,KAAAxM,EAAA4P,OAOAb,GAAoBrJ,KAIpB,SAAAwJ,GACA/U,EACAvD,GAEA,OAAAqZ,GAAA9V,EAAA6C,IAAA,SAAAsI,GACA,OAAA/O,OAAAwG,KAAAuI,EAAAjL,YAAA2C,IAAA,SAAA3B,GAAyD,OAAAzE,EACzD0O,EAAAjL,WAAAgB,GACAiK,EAAA5K,UAAAW,GACAiK,EAAAjK,QAKA,SAAA4U,GAAA5L,GACA,OAAArM,MAAAD,UAAAmY,OAAA/Y,SAAAkN,GAGA,IAAAmL,GACA,mBAAAC,QACA,iBAAAA,OAAAC,YAUA,SAAAL,GAAAzY,GACA,IAAAuZ,GAAA,EACA,kBAEA,IADA,IAAAC,KAAA9E,EAAAlU,UAAAN,OACAwU,KAAA8E,EAAA9E,GAAAlU,UAAAkU,GAEA,IAAA6E,EAEA,OADAA,GAAA,EACAvZ,EAAAO,MAAA2I,KAAAsQ,IAMA,IAAAC,GAAA,SAAA3S,EAAAkG,GACA9D,KAAApC,SACAoC,KAAA8D,KAkKA,SAAAA,GACA,IAAAA,EACA,GAAAJ,EAAA,CAEA,IAAA8M,EAAAlD,SAAAC,cAAA,QAGAzJ,GAFAA,EAAA0M,KAAAxO,aAAA,cAEA/F,QAAA,8BAEA6H,EAAA,IAIA,MAAAA,EAAAE,OAAA,KACAF,EAAA,IAAAA,GAGA,OAAAA,EAAA7H,QAAA,UAnLAwU,CAAA3M,GAEA9D,KAAArF,QAAA+D,EACAsB,KAAAkP,QAAA,KACAlP,KAAA0Q,OAAA,EACA1Q,KAAA2Q,YACA3Q,KAAA4Q,iBACA5Q,KAAA6Q,aAiMA,SAAAC,GACAC,EACApY,EACAqY,EACAC,GAEA,IAAAC,EAAA9B,GAAA2B,EAAA,SAAA1B,EAAA8B,EAAAtJ,EAAAtM,GACA,IAAA6V,EAUA,SACA/B,EACA9T,GAEA,mBAAA8T,IAEAA,EAAAlQ,EAAA3D,OAAA6T,IAEA,OAAAA,EAAAvR,QAAAvC,GAlBA8V,CAAAhC,EAAA1W,GACA,GAAAyY,EACA,OAAAlZ,MAAA2E,QAAAuU,GACAA,EAAAlU,IAAA,SAAAkU,GAAsC,OAAAJ,EAAAI,EAAAD,EAAAtJ,EAAAtM,KACtCyV,EAAAI,EAAAD,EAAAtJ,EAAAtM,KAGA,OAAA4U,GAAAc,EAAAC,EAAAD,UAAAC,GAsBA,SAAAI,GAAAF,EAAAD,GACA,GAAAA,EACA,kBACA,OAAAC,EAAA/Z,MAAA8Z,EAAA7Z,YArOAiZ,GAAAtY,UAAAsZ,OAAA,SAAAzC,GACA9O,KAAA8O,MAGAyB,GAAAtY,UAAAuZ,QAAA,SAAA1C,EAAA2C,GACAzR,KAAA0Q,MACA5B,KAEA9O,KAAA2Q,SAAA7T,KAAAgS,GACA2C,GACAzR,KAAA4Q,cAAA9T,KAAA2U,KAKAlB,GAAAtY,UAAAyZ,QAAA,SAAAD,GACAzR,KAAA6Q,SAAA/T,KAAA2U,IAGAlB,GAAAtY,UAAA0Z,aAAA,SAAAjU,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAEAtG,EAAAsG,KAAApC,OAAAiK,MAAAnK,EAAAsC,KAAArF,SACAqF,KAAA8R,kBAAApY,EAAA,WACAqG,EAAAgS,YAAArY,GACAkY,KAAAlY,GACAqG,EAAAiS,YAGAjS,EAAA2Q,QACA3Q,EAAA2Q,OAAA,EACA3Q,EAAA4Q,SAAAnU,QAAA,SAAAsS,GAA6CA,EAAApV,OAE1C,SAAAnB,GACHsZ,GACAA,EAAAtZ,GAEAA,IAAAwH,EAAA2Q,QACA3Q,EAAA2Q,OAAA,EACA3Q,EAAA6Q,cAAApU,QAAA,SAAAsS,GAAkDA,EAAAvW,SAKlDgY,GAAAtY,UAAA6Z,kBAAA,SAAApY,EAAAkY,EAAAC,GACA,IAAA9R,EAAAC,KAEArF,EAAAqF,KAAArF,QACAsX,EAAA,SAAA1Z,GACAD,EAAAC,KACAwH,EAAA8Q,SAAA7Z,OACA+I,EAAA8Q,SAAArU,QAAA,SAAAsS,GAA+CA,EAAAvW,MAE/CJ,IACA+Z,QAAA/C,MAAA5W,KAGAsZ,KAAAtZ,IAEA,GACAqG,EAAAlF,EAAAiB,IAEAjB,EAAAW,QAAArD,SAAA2D,EAAAN,QAAArD,OAGA,OADAgJ,KAAAgS,YACAC,IAGA,IAAA9Y,EAwGA,SACAwB,EACAiL,GAEA,IAAA/N,EACAsa,EAAAC,KAAAD,IAAAxX,EAAA3D,OAAA4O,EAAA5O,QACA,IAAAa,EAAA,EAAaA,EAAAsa,GACbxX,EAAA9C,KAAA+N,EAAA/N,GADsBA,KAKtB,OACAwa,QAAAzM,EAAAD,MAAA,EAAA9N,GACAya,UAAA1M,EAAAD,MAAA9N,GACA0a,YAAA5X,EAAAgL,MAAA9N,IAtHA2a,CAAAxS,KAAArF,QAAAN,QAAAX,EAAAW,SACAgY,EAAAlZ,EAAAkZ,QACAE,EAAApZ,EAAAoZ,YACAD,EAAAnZ,EAAAmZ,UAEAzD,KAAAuB,OAiJA,SAAAmC,GACA,OAAAzB,GAAAyB,EAAA,mBAAAjB,IAAA,GAhJAmB,CAAAF,GAEAvS,KAAApC,OAAA8U,YAiJA,SAAAL,GACA,OAAAvB,GAAAuB,EAAA,oBAAAf,IAhJAqB,CAAAN,GAEAC,EAAApV,IAAA,SAAAsI,GAAgC,OAAAA,EAAA+D,cAEhCyF,GAAAsD,IAGAtS,KAAAkP,QAAAxV,EACA,IAAAkZ,EAAA,SAAA/X,EAAA+K,GACA,GAAA7F,EAAAmP,UAAAxV,EACA,OAAAuY,IAEA,IACApX,EAAAnB,EAAAiB,EAAA,SAAAU,IACA,IAAAA,GAAA/C,EAAA+C,IAEA0E,EAAAiS,WAAA,GACAC,EAAA5W,IAEA,iBAAAA,GACA,iBAAAA,IACA,iBAAAA,EAAA6C,MACA,iBAAA7C,EAAA1C,OAIAsZ,IACA,iBAAA5W,KAAAY,QACA8D,EAAA9D,QAAAZ,GAEA0E,EAAAjD,KAAAzB,IAIAuK,EAAAvK,KAGK,MAAA2C,GACLiU,EAAAjU,KAIA4Q,GAAAC,EAAA+D,EAAA,WACA,IAAAC,KAMAjE,GA0GA,SACA0D,EACAQ,EACAC,GAEA,OAAAjC,GAAAwB,EAAA,4BAAAlB,EAAAlY,EAAA2O,EAAAtM,GACA,OAIA,SACA6V,EACAvJ,EACAtM,EACAuX,EACAC,GAEA,gBAAA1X,EAAAC,EAAAsK,GACA,OAAAwL,EAAA/V,EAAAC,EAAA,SAAAwT,GACAlJ,EAAAkJ,GACA,mBAAAA,GACAgE,EAAAhW,KAAA,YAaA,SAAAkW,EACAlE,EACAlU,EACAW,EACAwX,GAEAnY,EAAAW,GACAuT,EAAAlU,EAAAW,IACGwX,KACHE,WAAA,WACAD,EAAAlE,EAAAlU,EAAAW,EAAAwX,IACK,IAlBLC,CAAAlE,EAAAjH,EAAAjN,UAAAW,EAAAwX,QArBAG,CAAA9B,EAAAvJ,EAAAtM,EAAAuX,EAAAC,KAlHAI,CAAAb,EAAAO,EAHA,WAA+B,OAAA9S,EAAApF,UAAAjB,IAI/B0W,OAAArQ,EAAAnC,OAAAwV,cACAR,EAAA,WACA,GAAA7S,EAAAmP,UAAAxV,EACA,OAAAuY,IAEAlS,EAAAmP,QAAA,KACA0C,EAAAlY,GACAqG,EAAAnC,OAAAuO,KACApM,EAAAnC,OAAAuO,IAAAG,UAAA,WACAuG,EAAArW,QAAA,SAAAsS,GAA8CA,aAO9CyB,GAAAtY,UAAA8Z,YAAA,SAAArY,GACA,IAAA2Z,EAAArT,KAAArF,QACAqF,KAAArF,QAAAjB,EACAsG,KAAA8O,IAAA9O,KAAA8O,GAAApV,GACAsG,KAAApC,OAAA0V,WAAA9W,QAAA,SAAA3B,GACAA,KAAAnB,EAAA2Z,MA0IA,IAAAE,GAAA,SAAAC,GACA,SAAAD,EAAA3V,EAAAkG,GACA,IAAA/D,EAAAC,KAEAwT,EAAAtc,KAAA8I,KAAApC,EAAAkG,GAEA,IAAA2P,EAAA7V,EAAAE,QAAAuO,eAEAoH,GACA/H,IAGA,IAAAgI,EAAAC,GAAA3T,KAAA8D,MACAH,OAAAkI,iBAAA,oBAAA7N,GACA,IAAArD,EAAAoF,EAAApF,QAIA+C,EAAAiW,GAAA5T,EAAA+D,MACA/D,EAAApF,UAAA+D,GAAAhB,IAAAgW,GAIA3T,EAAA4R,aAAAjU,EAAA,SAAAhE,GACA+Z,GACAxH,GAAArO,EAAAlE,EAAAiB,GAAA,OAiDA,OA3CA6Y,IAAAD,EAAAK,UAAAJ,GACAD,EAAAtb,UAAAxB,OAAA0R,OAAAqL,KAAAvb,WACAsb,EAAAtb,UAAA4b,YAAAN,EAEAA,EAAAtb,UAAA6b,GAAA,SAAAC,GACApQ,OAAAV,QAAA6Q,GAAAC,IAGAR,EAAAtb,UAAA6E,KAAA,SAAAY,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAGAgU,EADAhU,KACArF,QACAqF,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAgV,GAAArK,EAAAtE,EAAA+D,KAAApK,EAAA0E,WACA6N,GAAAlM,EAAAnC,OAAAlE,EAAAsa,GAAA,GACApC,KAAAlY,IACKmY,IAGL0B,EAAAtb,UAAAgE,QAAA,SAAAyB,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAGAgU,EADAhU,KACArF,QACAqF,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAiS,GAAAtH,EAAAtE,EAAA+D,KAAApK,EAAA0E,WACA6N,GAAAlM,EAAAnC,OAAAlE,EAAAsa,GAAA,GACApC,KAAAlY,IACKmY,IAGL0B,EAAAtb,UAAA+Z,UAAA,SAAAlV,GACA,GAAA6W,GAAA3T,KAAA8D,QAAA9D,KAAArF,QAAAyD,SAAA,CACA,IAAAzD,EAAA0J,EAAArE,KAAA8D,KAAA9D,KAAArF,QAAAyD,UACAtB,EAAA4R,GAAA/T,GAAAgR,GAAAhR,KAIA4Y,EAAAtb,UAAAgc,mBAAA,WACA,OAAAN,GAAA3T,KAAA8D,OAGAyP,EA1EA,CA2EChD,IAED,SAAAoD,GAAA7P,GACA,IAAA5F,EAAAyF,OAAAjG,SAAAwW,SAIA,OAHApQ,GAAA,IAAA5F,EAAAzF,QAAAqL,KACA5F,IAAAyH,MAAA7B,EAAA9M,UAEAkH,GAAA,KAAAyF,OAAAjG,SAAAyW,OAAAxQ,OAAAjG,SAAAS,KAMA,IAAAiW,GAAA,SAAAZ,GACA,SAAAY,EAAAxW,EAAAkG,EAAAuQ,GACAb,EAAAtc,KAAA8I,KAAApC,EAAAkG,GAEAuQ,GAiFA,SAAAvQ,GACA,IAAApG,EAAAiW,GAAA7P,GACA,WAAA7B,KAAAvE,GAIA,OAHAiG,OAAAjG,SAAAzB,QACAoI,EAAAP,EAAA,KAAApG,KAEA,EAvFA4W,CAAAtU,KAAA8D,OAGAyQ,KA2EA,OAxEAf,IAAAY,EAAAR,UAAAJ,GACAY,EAAAnc,UAAAxB,OAAA0R,OAAAqL,KAAAvb,WACAmc,EAAAnc,UAAA4b,YAAAO,EAIAA,EAAAnc,UAAAuc,eAAA,WACA,IAAAzU,EAAAC,KAGAyT,EADAzT,KAAApC,OACAE,QAAAuO,eACAoI,EAAAxG,IAAAwF,EAEAgB,GACA/I,IAGA/H,OAAAkI,iBAAAoC,GAAA,mCACA,IAAAtT,EAAAoF,EAAApF,QACA4Z,MAGAxU,EAAA4R,aAAA+C,KAAA,SAAAhb,GACA+a,GACAxI,GAAAlM,EAAAnC,OAAAlE,EAAAiB,GAAA,GAEAsT,IACA0G,GAAAjb,EAAA0E,eAMAgW,EAAAnc,UAAA6E,KAAA,SAAAY,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAGAgU,EADAhU,KACArF,QACAqF,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAkb,GAAAlb,EAAA0E,UACA6N,GAAAlM,EAAAnC,OAAAlE,EAAAsa,GAAA,GACApC,KAAAlY,IACKmY,IAGLuC,EAAAnc,UAAAgE,QAAA,SAAAyB,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAGAgU,EADAhU,KACArF,QACAqF,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAib,GAAAjb,EAAA0E,UACA6N,GAAAlM,EAAAnC,OAAAlE,EAAAsa,GAAA,GACApC,KAAAlY,IACKmY,IAGLuC,EAAAnc,UAAA6b,GAAA,SAAAC,GACApQ,OAAAV,QAAA6Q,GAAAC,IAGAK,EAAAnc,UAAA+Z,UAAA,SAAAlV,GACA,IAAAnC,EAAAqF,KAAArF,QAAAyD,SACAsW,OAAA/Z,IACAmC,EAAA8X,GAAAja,GAAAga,GAAAha,KAIAyZ,EAAAnc,UAAAgc,mBAAA,WACA,OAAAS,MAGAN,EAlFA,CAmFC7D,IAYD,SAAAgE,KACA,IAAArW,EAAAwW,KACA,YAAAxW,EAAA8F,OAAA,KAGA2Q,GAAA,IAAAzW,IACA,GAGA,SAAAwW,KAGA,IAAAvU,EAAAwD,OAAAjG,SAAAyC,KACAiF,EAAAjF,EAAA1H,QAAA,KACA,WAAA2M,EAAA,GAAAjF,EAAAwF,MAAAP,EAAA,GAGA,SAAAyP,GAAA3W,GACA,IAAAiC,EAAAwD,OAAAjG,SAAAyC,KACAtI,EAAAsI,EAAA1H,QAAA,KAEA,OADAZ,GAAA,EAAAsI,EAAAwF,MAAA,EAAA9N,GAAAsI,GACA,IAAAjC,EAGA,SAAA0W,GAAA1W,GACA+P,GACAS,GAAAmG,GAAA3W,IAEAyF,OAAAjG,SAAAS,KAAAD,EAIA,SAAAyW,GAAAzW,GACA+P,GACAtC,GAAAkJ,GAAA3W,IAEAyF,OAAAjG,SAAAzB,QAAA4Y,GAAA3W,IAOA,IAAA4W,GAAA,SAAAtB,GACA,SAAAsB,EAAAlX,EAAAkG,GACA0P,EAAAtc,KAAA8I,KAAApC,EAAAkG,GACA9D,KAAAiE,SACAjE,KAAAoF,OAAA,EAiDA,OA9CAoO,IAAAsB,EAAAlB,UAAAJ,GACAsB,EAAA7c,UAAAxB,OAAA0R,OAAAqL,KAAAvb,WACA6c,EAAA7c,UAAA4b,YAAAiB,EAEAA,EAAA7c,UAAA6E,KAAA,SAAAY,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAEAA,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAqG,EAAAkE,MAAAlE,EAAAkE,MAAA0B,MAAA,EAAA5F,EAAAqF,MAAA,GAAAgL,OAAA1W,GACAqG,EAAAqF,QACAwM,KAAAlY,IACKmY,IAGLiD,EAAA7c,UAAAgE,QAAA,SAAAyB,EAAAkU,EAAAC,GACA,IAAA9R,EAAAC,KAEAA,KAAA2R,aAAAjU,EAAA,SAAAhE,GACAqG,EAAAkE,MAAAlE,EAAAkE,MAAA0B,MAAA,EAAA5F,EAAAqF,OAAAgL,OAAA1W,GACAkY,KAAAlY,IACKmY,IAGLiD,EAAA7c,UAAA6b,GAAA,SAAAC,GACA,IAAAhU,EAAAC,KAEA+U,EAAA/U,KAAAoF,MAAA2O,EACA,KAAAgB,EAAA,GAAAA,GAAA/U,KAAAiE,MAAAjN,QAAA,CAGA,IAAA0C,EAAAsG,KAAAiE,MAAA8Q,GACA/U,KAAA8R,kBAAApY,EAAA,WACAqG,EAAAqF,MAAA2P,EACAhV,EAAAgS,YAAArY,OAIAob,EAAA7c,UAAAgc,mBAAA,WACA,IAAAtZ,EAAAqF,KAAAiE,MAAAjE,KAAAiE,MAAAjN,OAAA,GACA,OAAA2D,IAAAyD,SAAA,KAGA0W,EAAA7c,UAAA+Z,UAAA,aAIA8C,EArDA,CAsDCvE,IAIDyE,GAAA,SAAAlX,QACA,IAAAA,UAEAkC,KAAAmM,IAAA,KACAnM,KAAAiV,QACAjV,KAAAlC,UACAkC,KAAA0S,eACA1S,KAAAoT,gBACApT,KAAAsT,cACAtT,KAAAkV,QAAAtK,EAAA9M,EAAAyK,WAAAvI,MAEA,IAAAmV,EAAArX,EAAAqX,MAAA,OAUA,OATAnV,KAAAqU,SAAA,YAAAc,IAAAlH,KAAA,IAAAnQ,EAAAuW,SACArU,KAAAqU,WACAc,EAAA,QAEAzR,IACAyR,EAAA,YAEAnV,KAAAmV,OAEAA,GACA,cACAnV,KAAAiD,QAAA,IAAAsQ,GAAAvT,KAAAlC,EAAAgG,MACA,MACA,WACA9D,KAAAiD,QAAA,IAAAmR,GAAApU,KAAAlC,EAAAgG,KAAA9D,KAAAqU,UACA,MACA,eACArU,KAAAiD,QAAA,IAAA6R,GAAA9U,KAAAlC,EAAAgG,MACA,MACA,QACA,IAMAsR,IAA0BvK,cAAgBwK,cAAA,IAgJ1C,SAAAC,GAAAC,EAAAze,GAEA,OADAye,EAAAzY,KAAAhG,GACA,WACA,IAAAe,EAAA0d,EAAA9c,QAAA3B,GACAe,GAAA,GAAiB0d,EAAA1L,OAAAhS,EAAA,IAlJjBmd,GAAA/c,UAAA4P,MAAA,SACAkC,EACApP,EACAgD,GAEA,OAAAqC,KAAAkV,QAAArN,MAAAkC,EAAApP,EAAAgD,IAGAyX,GAAAvK,aAAAlU,IAAA,WACA,OAAAqJ,KAAAiD,SAAAjD,KAAAiD,QAAAtI,SAGAqa,GAAA/c,UAAA8K,KAAA,SAAAoJ,GACA,IAAApM,EAAAC,KAWA,GAHAA,KAAAiV,KAAAnY,KAAAqP,IAGAnM,KAAAmM,IAAA,CAIAnM,KAAAmM,MAEA,IAAAlJ,EAAAjD,KAAAiD,QAEA,GAAAA,aAAAsQ,GACAtQ,EAAA0O,aAAA1O,EAAAgR,2BACG,GAAAhR,aAAAmR,GAAA,CACH,IAAAoB,EAAA,WACAvS,EAAAuR,kBAEAvR,EAAA0O,aACA1O,EAAAgR,qBACAuB,EACAA,GAIAvS,EAAAsO,OAAA,SAAA7X,GACAqG,EAAAkV,KAAAzY,QAAA,SAAA2P,GACAA,EAAAhJ,OAAAzJ,QAKAsb,GAAA/c,UAAAwd,WAAA,SAAA3e,GACA,OAAAwe,GAAAtV,KAAA0S,YAAA5b,IAGAke,GAAA/c,UAAAyd,cAAA,SAAA5e,GACA,OAAAwe,GAAAtV,KAAAoT,aAAAtc,IAGAke,GAAA/c,UAAA0d,UAAA,SAAA7e,GACA,OAAAwe,GAAAtV,KAAAsT,WAAAxc,IAGAke,GAAA/c,UAAAuZ,QAAA,SAAA1C,EAAA2C,GACAzR,KAAAiD,QAAAuO,QAAA1C,EAAA2C,IAGAuD,GAAA/c,UAAAyZ,QAAA,SAAAD,GACAzR,KAAAiD,QAAAyO,QAAAD,IAGAuD,GAAA/c,UAAA6E,KAAA,SAAAY,EAAAkU,EAAAC,GACA7R,KAAAiD,QAAAnG,KAAAY,EAAAkU,EAAAC,IAGAmD,GAAA/c,UAAAgE,QAAA,SAAAyB,EAAAkU,EAAAC,GACA7R,KAAAiD,QAAAhH,QAAAyB,EAAAkU,EAAAC,IAGAmD,GAAA/c,UAAA6b,GAAA,SAAAC,GACA/T,KAAAiD,QAAA6Q,GAAAC,IAGAiB,GAAA/c,UAAA2d,KAAA,WACA5V,KAAA8T,IAAA,IAGAkB,GAAA/c,UAAA4d,QAAA,WACA7V,KAAA8T,GAAA,IAGAkB,GAAA/c,UAAA6d,qBAAA,SAAAza,GACA,IAAA3B,EAAA2B,EACAA,EAAAhB,QACAgB,EACA2E,KAAAE,QAAA7E,GAAA3B,MACAsG,KAAA6K,aACA,OAAAnR,KAGA0W,OAAA/Y,SAAAqC,EAAAW,QAAA6C,IAAA,SAAAsI,GACA,OAAA/O,OAAAwG,KAAAuI,EAAAjL,YAAA2C,IAAA,SAAA3B,GACA,OAAAiK,EAAAjL,WAAAgB,YAKAyZ,GAAA/c,UAAAiI,QAAA,SACA7E,EACAV,EACAgF,GAEA,IAAAjC,EAAAoM,EACAzO,EACAV,GAAAqF,KAAAiD,QAAAtI,QACAgF,EACAK,MAEAtG,EAAAsG,KAAA6H,MAAAnK,EAAA/C,GACAyD,EAAA1E,EAAAiE,gBAAAjE,EAAA0E,SAGA,OACAV,WACAhE,QACAyG,KAwBA,SAAA2D,EAAA1F,EAAA+W,GACA,IAAAjX,EAAA,SAAAiX,EAAA,IAAA/W,IACA,OAAA0F,EAAAO,EAAAP,EAAA,IAAA5F,KA9BA6X,CADA/V,KAAAiD,QAAAa,KACA1F,EAAA4B,KAAAmV,MAMAa,aAAAtY,EACAmS,SAAAnW,IAIAsb,GAAA/c,UAAAsT,UAAA,SAAAhD,GACAvI,KAAAkV,QAAA3J,UAAAhD,GACAvI,KAAAiD,QAAAtI,UAAA+D,GACAsB,KAAAiD,QAAA0O,aAAA3R,KAAAiD,QAAAgR,uBAIAxd,OAAAwf,iBAAAjB,GAAA/c,UAAAmd,IAeAJ,GAAA7S,UACA6S,GAAAkB,QAAA,QAEAxS,GAAAC,OAAAvB,KACAuB,OAAAvB,IAAA+T,IAAAnB,IAGAoB,EAAA,sECrjFA,SAAAnJ,EAAAvS,GACA,uBAAAA,EAOA,MAAA2b,EAAA,WACA,MAAAC,EAAA,sCACA,OAAA5b,IANA,SAAAA,GACA,uBAAAA,GAMA6b,CAAA7b,IAAA4b,EAAArU,KAAAvH,GAHA,GAeA,MAAA8b,EAAA,WACA,MAAAF,EAAA,sCACAG,GACAC,KAAA,EAAA5H,IAAA,EAAA1X,EAAA,EAAAuf,KAAA,EAAAC,GAAA,EACAC,IAAA,EAAAC,GAAA,EAAAC,EAAA,EAAAC,KAAA,EAAAC,GAAA,EACAC,IAAA,EAAAC,GAAA,EAAAnZ,EAAA,EAAAoZ,KAAA,EAAAC,GAAA,EACAC,IAAA,EAAAC,GAAA,EAAAC,EAAA,EAAAC,KAAA,EAAAC,GAAA,EACAC,IAAA,EAAAC,GAAA,EAAAC,EAAA,EAAAC,KAAA,EAAAC,GAAA,EACAC,IAAA,EAAAC,GAAA,EAAArhB,EAAA,EAAAshB,KAAA,GAAAC,GAAA,GACAC,IAAA,EAAAC,GAAA,GAAAlhB,EAAA,GAAAmhB,KAAA,GAAAC,GAAA,IAEA,OAAAC,IACA,MAAA5gB,EAAA0e,EAAA/Q,KAAAiT,GACAC,EAAA7gB,EAAA,GACA8gB,EAAA9gB,EAAA,GAEA,OADA6e,EAAAgC,EAAAE,eACA,IAAAC,SAAAF,GAAA,IAhBA,GCYA,SAAAG,EAAAC,EAAAhZ,GACA,GAAAgZ,EAAA9hB,OAAA,CACA,MAAAoO,EA3CA,SAAA0T,EAAAC,GACA,IAAAC,EAAA,EACA,MAAAxN,EAAAsN,EAAA9hB,OACA,IAAAyQ,EAAA+D,EACA,GAAAA,EAAA,GAAAsN,EAAAtN,EAAA,GAAAuN,QACA,OAAAvN,EAAA,EAEA,KAAAwN,EAAAvR,GAAA,CAEA,IAAAwR,EAAA7G,KAAA8G,MAAAF,GAAAvR,EAAAuR,GAAA,GACA,MAAAlZ,EAAAgZ,EAAAG,GACAE,EAAAL,EAAAG,EAAA,GACA,GAAAnZ,EAAAiZ,SAAA,CAEA,QAAAlhB,EAAAohB,EAAyBphB,EAAAihB,EAAA9hB,OAAkBa,IAC3CihB,EAAAjhB,GACAkhB,WACAE,EAAAphB,GAGA,OAAAohB,EACG,GAAAnZ,EAAAiZ,QAAAI,EAAAJ,OACH,OAAAE,EACGnZ,EAAAiZ,OAEHtR,EAAAwR,EACGnZ,EAAAiZ,SAEHC,EAAAC,EAAA,GAGA,SAYAG,CAAAN,EAAAhZ,EAAAiZ,MACAD,EAAAjP,OAAAzE,EAAA,IAAAtF,QAEAgZ,EAAAhc,KAAAgD,GCjDA,MAAAuZ,GACAC,EAAA,kBACAC,EAAA,SACAC,EAAA,iBACAC,EAAA,iBACAC,EAAA,SACAC,EAAA,UACAC,GAAA,MACAC,GAAA,UACAC,GAAA,iBACAC,GAAA,YACAC,GAAA,YACAC,GAAA,mBACAC,GAAA,0BAGAC,EACAC,YAAAC,EAAAtB,EAAAta,GAEAuB,KAAAqa,SAEAra,KAAA+Y,OAEA/Y,KAAAvB,QAQA9F,WACA,GAAA0gB,EAAAlO,eAAAnL,KAAAqa,QACA,OAAAhB,EAAArZ,KAAAqa,SChCA,SAAAC,EAAAC,EAAAC,GACA,QAAA3iB,EAAA,EAAgBA,EAAA0iB,EAAAvjB,OAAmBa,IAAA,CACnC,IAAA0M,EAAAgW,EAAA1iB,GACA4iB,EAAAD,EAAA3iB,GACA,GAAA0M,EAAAvN,OAAAyjB,EACA,SAGA,SAGA,SAAAC,EAAAH,EAAAC,EAAAG,GACA,IAAAC,EAAA,EACAC,EAAAC,IACA,QAAAjjB,EAAA,EAAgBA,EAAA0iB,EAAAvjB,OAAmBa,IAAA,CACnC,IAAA0M,EAAAgW,EAAA1iB,GACA4iB,EAAAD,EAAA3iB,GACA0M,EAAAkW,IAAAlW,EAAAkW,GAAA1B,KAAA8B,IACAD,EAAA/iB,EACAgjB,EAAAtW,EAAAkW,GAAA1B,MAGA4B,EAAAC,GAAAL,EAAAK,GAAAJ,EAAAI,KAEAJ,EAAAI,IAAA,QCvBAG,EAOAX,gBAAAY,GAEA,OADA,IAAAD,EAAAC,EAAAC,KAAAD,EAAAjC,KAAAiC,EAAAE,SAAAF,EAAAG,UAIAf,YAAAa,EAAAlC,EAAAmC,EAAA,EAAAC,EAAA,GAMA,GAAAlO,EAAAgO,GACAjb,KAAAib,WACG,KAAA5E,EAAA4E,GAGH,UAAAhL,MAAA,8EAFAjQ,KAAArH,KAAAsiB,EASAjb,KAAA+Y,OAMA/Y,KAAAkb,WAMAlb,KAAAmb,WAQAf,MAAA5B,GACA,OAAAvL,EAAAuL,GACAxY,KAAAib,OAAAzC,EACGnC,EAAAmC,GACHxY,KAAArH,KAAAggB,gBAAAH,EAAAG,mBADG,EASHhgB,WACA,OJxCA,SAAAsiB,GACA,MACAvC,EAAAtG,KAAA8G,MAAA+B,EAAA,MAEA,OAHA,sDAEAA,EAAA,IACAvC,EIoCA0C,CAAApb,KAAAib,MAEAtiB,YACAqH,KAAAib,KAAAzE,EAAA7d,GAOA0iB,aACA,OAAArb,KAAA+Y,KAEAsC,WAAAC,GACAtb,KAAA+Y,KAAAuC,EAOAC,cACA,OAAAvb,KAAA+Y,KAAA/Y,KAAAkb,SAEAK,YAAAxC,GACA/Y,KAAAkb,SAAAnC,EAAA/Y,KAAA+Y,KAOAqB,SACA,OACAzhB,KAAAqH,KAAArH,KACAsiB,KAAAjb,KAAAib,KACAlC,KAAA/Y,KAAA+Y,KACAoC,SAAAnb,KAAAmb,SACAD,SAAAlb,KAAAkb,WCvGA,MAAAM,GACA,uBACA,wBACA,uBACA,mBACA,mBACA,mBACA,cACA,QACA,UACA,eACA,YACA,aACA,UACA,YACA,gBACA,WACA,gBACA,mBACA,aACA,eACA,aACA,YACA,YACA,kBACA,0BACA,0BACA,yBACA,0BACA,0BACA,oBACA,oBACA,mBACA,gBACA,yBACA,uBACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,kBACA,UACA,oBACA,oBACA,iBACA,iBACA,aACA,aACA,cACA,gBACA,UACA,WACA,OACA,gBACA,cACA,gBACA,eACA,eACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,eACA,aACA,UACA,UACA,kBACA,oBACA,oBACA,iBACA,mBACA,iBACA,kBACA,uBACA,kBACA,eACA,oBACA,gBACA,gBACA,mBACA,eACA,gBACA,cACA,oBACA,iBACA,oBACA,oBACA,iBACA,gBACA,gBACA,QACA,QACA,WACA,OA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","file":"static/js/vendor.69b0f3319009dc0505f9.js","sourcesContent":["// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_descriptors.js\n// module id = +E39\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ctx.js\n// module id = +ZMJ\n// module chunks = 0","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/web.dom.iterable.js\n// module id = +tPU\n// module chunks = 0","module.exports = {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iterators.js\n// module id = /bQp\n// module chunks = 0","/**\n  * vue-router v3.0.1\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also register instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);\n    if (propsToPass) {\n      // clone to prevent mutation\n      propsToPass = data.props = extend({}, propsToPass);\n      // pass non-declared props as attrs\n      var attrs = data.attrs = data.attrs || {};\n      for (var key in propsToPass) {\n        if (!component.props || !(key in component.props)) {\n          attrs[key] = propsToPass[key];\n          delete propsToPass[key];\n        }\n      }\n    }\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\nfunction extend (to, from) {\n  for (var key in from) {\n    to[key] = from[key];\n  }\n  return to\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    parsedQuery[key] = extraQuery[key];\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n\n  var query = location.query || {};\n  try {\n    query = clone(query);\n  } catch (e) {}\n\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\nfunction clone (value) {\n  if (Array.isArray(value)) {\n    return value.map(clone)\n  } else if (value && typeof value === 'object') {\n    var res = {};\n    for (var key in value) {\n      res[key] = clone(value[key]);\n    }\n    return res\n  } else {\n    return value\n  }\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  // handle null value #1566\n  if (!a || !b) { return a === b }\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed && _Vue === Vue) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar isarray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\n// $flow-disable-line\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  // $flow-disable-line\n  var pathMap = oldPathMap || Object.create(null);\n  // $flow-disable-line\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n  var normalizedPath = normalizePath(\n    path,\n    parent,\n    pathToRegexpOptions.strict\n  );\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path, pathToRegexpOptions) {\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = Object.create(null);\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent, strict) {\n  if (!strict) { path = path.replace(/\\/$/, ''); }\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  // Fix for #1585 for Firefox\n  window.history.replaceState({ key: getStateKey() }, '');\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n\n    if (!shouldScroll) {\n      return\n    }\n\n    if (typeof shouldScroll.then === 'function') {\n      shouldScroll.then(function (shouldScroll) {\n        scrollToPosition((shouldScroll), position);\n      }).catch(function (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          assert(false, err.toString());\n        }\n      });\n    } else {\n      scrollToPosition(shouldScroll, position);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\nfunction scrollToPosition (shouldScroll, position) {\n  var isObject = typeof shouldScroll === 'object';\n  if (isObject && typeof shouldScroll.selector === 'string') {\n    var el = document.querySelector(shouldScroll.selector);\n    if (el) {\n      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};\n      offset = normalizeOffset(offset);\n      position = getElementPosition(el, offset);\n    } else if (isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n  } else if (isObject && isValidPosition(shouldScroll)) {\n    position = normalizePosition(shouldScroll);\n  }\n\n  if (position) {\n    window.scrollTo(position.x, position.y);\n  }\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\nvar hasSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.toStringTag === 'symbol';\n\nfunction isESModule (obj) {\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    var initLocation = getLocation(this.base);\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n\n      // Avoiding first `popstate` event dispatched in some browsers but first\n      // history route not updated since async guard at the same time.\n      var location = getLocation(this$1.base);\n      if (this$1.current === START && location === initLocation) {\n        return\n      }\n\n      this$1.transitionTo(location, function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {\n      var current = this$1.current;\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        if (supportsScroll) {\n          handleScroll(this$1.router, route, current, true);\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath);\n        }\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction getUrl (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  return (base + \"#\" + path)\n}\n\nfunction pushHash (path) {\n  if (supportsPushState) {\n    pushState(getUrl(path));\n  } else {\n    window.location.hash = path;\n  }\n}\n\nfunction replaceHash (path) {\n  if (supportsPushState) {\n    replaceState(getUrl(path));\n  } else {\n    window.location.replace(getUrl(path));\n  }\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: { configurable: true } };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '3.0.1';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\nexport default VueRouter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-router/dist/vue-router.esm.js\n// module id = /ocq\n// module chunks = 0","export function cleanName(str){\n\t//ableton adds some weird stuff to the track\n\treturn str.replace(/\\u0000/g, '')\n}\n\nexport function ticksToSeconds(ticks, header){\n\treturn (60 / header.bpm) * (ticks / header.PPQ);\n}\n\nexport function isNumber(val){\n\treturn typeof val === 'number'\n}\n\nexport function isString(val){\n\treturn typeof val === 'string'\n}\n\nexport const isPitch = (function(){\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i\n\treturn (val) => {\n\t\treturn isString(val) && regexp.test(val)\n\t}\n}())\n\n\nexport function midiToPitch(midi){\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst octave = Math.floor(midi / 12) - 1;\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note] + octave;\n}\n\nexport const pitchToMidi = (function(){\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i\n\tconst noteToScaleIndex = {\n\t\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0,  \"c#\" : 1,  \"cx\" : 2,\n\t\t\"dbb\" : 0,  \"db\" : 1,  \"d\" : 2,  \"d#\" : 3,  \"dx\" : 4,\n\t\t\"ebb\" : 2,  \"eb\" : 3,  \"e\" : 4,  \"e#\" : 5,  \"ex\" : 6,\n\t\t\"fbb\" : 3,  \"fb\" : 4,  \"f\" : 5,  \"f#\" : 6,  \"fx\" : 7,\n\t\t\"gbb\" : 5,  \"gb\" : 6,  \"g\" : 7,  \"g#\" : 8,  \"gx\" : 9,\n\t\t\"abb\" : 7,  \"ab\" : 8,  \"a\" : 9,  \"a#\" : 10, \"ax\" : 11,\n\t\t\"bbb\" : 9,  \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n\t}\n\treturn (note) => {\n\t\tconst split = regexp.exec(note)\n\t\tconst pitch = split[1]\n\t\tconst octave = split[2]\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()]\n\t\treturn index + (parseInt(octave) + 1) * 12\n\t}\n}())\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Util.js\n// module id = null\n// module chunks = ","/**\n * Return the index of the element at or before the given time\n */\nfunction findElement(array, time) {\n\tlet beginning = 0\n\tconst len = array.length\n\tlet end = len\n\tif (len > 0 && array[len - 1].time <= time){\n\t\treturn len - 1\n\t}\n\twhile (beginning < end){\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2)\n\t\tconst event = array[midPoint]\n\t\tconst nextEvent = array[midPoint + 1]\n\t\tif (event.time === time){\n\t\t\t//choose the last one that has the same time\n\t\t\tfor (let i = midPoint; i < array.length; i++){\n\t\t\t\tlet testEvent = array[i]\n\t\t\t\tif (testEvent.time === time){\n\t\t\t\t\tmidPoint = i\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint\n\t\t} else if (event.time < time && nextEvent.time > time){\n\t\t\treturn midPoint\n\t\t} else if (event.time > time){\n\t\t\t//search lower\n\t\t\tend = midPoint\n\t\t} else if (event.time < time){\n\t\t\t//search upper\n\t\t\tbeginning = midPoint + 1\n\t\t}\n\t}\n\treturn -1\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @param  {Array} array\n * @param  {Object} event\n * @param  {Number=} offset\n */\nfunction BinaryInsert(array, event){\n\tif (array.length){\n\t\tconst index = findElement(array, event.time)\n\t\tarray.splice(index + 1, 0, event)\n\t} else {\n\t\tarray.push(event)\n\t}\n}\n\nexport {BinaryInsert}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/BinaryInsert.js\n// module id = null\n// module chunks = ","const channelNames = {\n\t\"1\"  : \"modulationWheel\",\n\t\"2\"  : \"breath\",\n\t\"4\"  : \"footController\",\n\t\"5\"  : \"portamentoTime\",\n\t\"7\"  : \"volume\",\n\t\"8\"  : \"balance\",\n\t\"10\" : \"pan\",\n\t\"64\" : \"sustain\",\n\t\"65\" : \"portamentoTime\",\n\t\"66\" : \"sostenuto\",\n\t\"67\" : \"softPedal\",\n\t\"68\" : \"legatoFootswitch\",\n\t\"84\" : \"portamentoContro\"\n}\n\nclass Control{\n\tconstructor(number, time, value){\n\n\t\tthis.number = number\n\n\t\tthis.time = time\n\n\t\tthis.value = value\n\t}\n\n\t/**\n\t * The common name of the control change event\n\t * @type {String}\n\t * @readOnly\n\t */\n\tget name(){\n\t\tif (channelNames.hasOwnProperty(this.number)){\n\t\t\treturn channelNames[this.number]\n\t\t}\n\t}\n}\n\nexport {Control}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Control.js\n// module id = null\n// module chunks = ","\nfunction hasMoreValues(arrays, positions){\n\tfor (let i = 0; i < arrays.length; i++){\n\t\tlet arr = arrays[i]\n\t\tlet pos = positions[i]\n\t\tif (arr.length > pos){\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunction getLowestAtPosition(arrays, positions, encoders){\n\tlet lowestIndex = 0\n\tlet lowestValue = Infinity\n\tfor (let i = 0; i < arrays.length; i++){\n\t\tlet arr = arrays[i]\n\t\tlet pos = positions[i]\n\t\tif (arr[pos] && (arr[pos].time < lowestValue)){\n\t\t\tlowestIndex = i\n\t\t\tlowestValue = arr[pos].time\n\t\t}\n\t}\n\tencoders[lowestIndex](arrays[lowestIndex][positions[lowestIndex]])\n\t// increment array\n\tpositions[lowestIndex] += 1\n}\n\n/**\n * Combine multiple arrays keeping the timing in order\n * The arguments should alternate between the array and the encoder callback\n * @param {...Array|Function} args\n */\nfunction Merge(...args){\n\tconst arrays = args.filter((v, i) => (i % 2) === 0)\n\tconst positions = new Uint32Array(arrays.length)\n\tconst encoders = args.filter((v, i) => (i % 2) === 1)\n\tconst output = []\n\twhile(hasMoreValues(arrays, positions)){\n\t\tgetLowestAtPosition(arrays, positions, encoders)\n\t}\n}\n\nexport {Merge}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Merge.js\n// module id = null\n// module chunks = ","import * as Util from './Util'\n\nclass Note{\n\t/**\n\t * Convert JSON to Note object\n\t * @param {object} json\n\t * @static\n\t * @returns {Note}\n\t */\n\tstatic fromJSON(json) {\n\t\tvar note = new Note(json.midi, json.time, json.duration, json.velocity)\n\t\treturn note\n\t}\n\t\n\tconstructor(midi, time, duration=0, velocity=1){\n\n\t\t/**\n\t\t * The MIDI note number\n\t\t * @type {Number}\n\t\t */\n\t\tif (Util.isNumber(midi)){\n\t\t\tthis.midi = midi\n\t\t} else if (Util.isPitch(midi)){\n\t\t\tthis.name = midi\n\t\t} else {\n\t\t\tthrow new Error('the midi value must either be in Pitch Notation (e.g. C#4) or a midi value')\n\t\t}\n\n\t\t/**\n\t\t * The note on time in seconds\n\t\t * @type {Number}\n\t\t */\n\t\tthis.time = time\n\n\t\t/**\n\t\t * The duration in seconds\n\t\t * @type {Number}\n\t\t */\n\t\tthis.duration = duration\n\n\t\t/**\n\t\t * The velocity 0-1\n\t\t * @type {Number}\n\t\t */\n\t\tthis.velocity = velocity\n\t}\n\n\t/**\n\t * If the note is the same as the given note\n\t * @param {String|Number} note\n\t * @return {Boolean}\n\t */\n\tmatch(note){\n\t\tif (Util.isNumber(note)){\n\t\t\treturn this.midi === note\n\t\t} else if (Util.isPitch(note)){\n\t\t\treturn this.name.toLowerCase() === note.toLowerCase()\n\t\t}\n\t}\n\n\t/**\n\t * The note in Scientific Pitch Notation\n\t * @type {String}\n\t */\n\tget name(){\n\t\treturn Util.midiToPitch(this.midi)\n\t}\n\tset name(name){\n\t\tthis.midi = Util.pitchToMidi(name)\n\t}\n\n\t/**\n\t * Alias for time\n\t * @type {Number}\n\t */\n\tget noteOn(){\n\t\treturn this.time\n\t}\n\tset noteOn(t){\n\t\tthis.time = t\n\t}\n\n\t/**\n\t * The note off time\n\t * @type {Number}\n\t */\n\tget noteOff(){\n\t\treturn this.time + this.duration\n\t}\n\tset noteOff(time){\n\t\tthis.duration = time - this.time\n\t}\n\n\t/**\n\t * Convert the note to JSON\n\t * @returns {Object}\n\t */\n\ttoJSON(){\n\t\treturn {\n\t\t\tname : this.name,\n\t\t\tmidi : this.midi,\n\t\t\ttime : this.time,\n\t\t\tvelocity : this.velocity,\n\t\t\tduration : this.duration\n\t\t}\n\t}\n}\n\nexport {Note}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Note.js\n// module id = null\n// module chunks = ","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n]\n\nexport const instrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"ethnic\",\n\t\"percussive\",\n\t\"sound effects\",\n]\n\nexport const drumKitByPatchID = {\n\t 0: \"standard kit\",\n\t 8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/instrumentMaps.js\n// module id = null\n// module chunks = ","import {BinaryInsert} from './BinaryInsert'\nimport {Control} from './Control'\nimport {Merge} from './Merge'\nimport {Note} from './Note'\nimport {instrumentByPatchID, instrumentFamilyByID, drumKitByPatchID} from './instrumentMaps'\n\nclass Track {\n/**\n\t * Convert JSON to Track object\n\t * @param {object} json\n\t * @static\n\t * @returns {Track}\n\t */\n\tstatic fromJSON(json){\n\t\tvar track = new Track(json.name, json.instrumentNumber, json.channelNumber )\n\n\t\ttrack.id = json.id\n\t\t\n\t\tif (json.notes) {\n\t\t\tjson.notes.forEach((note) => {\n\t\t\t\tvar newNote = Note.fromJSON(note)\n\t\t\t\ttrack.notes.push(newNote)\n\t\t\t})\n\t\t}\n\n\t\tif (json.controlChanges) {\n\t\t\ttrack.controlChanges = json.controlChanges\n\t\t}\n\n\t\treturn track\n\t}\n\t\n\tconstructor(name, instrumentNumber=-1, channel=-1){\n\n\t\t/**\n\t\t * The name of the track\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name\n\n\t\t/**\n\t\t * The MIDI channel of the track\n\t\t * @type {number}\n\t\t */\n\t\tthis.channelNumber = channel\n\n\t\t/**\n\t\t * The note events\n\t\t * @type {Array}\n\t\t */\n\t\tthis.notes = []\n\n\t\t/**\n\t\t * The control changes\n\t\t * @type {Object}\n\t\t */\n\t\tthis.controlChanges = {}\n\n\t\t/**\n\t\t * The MIDI patch ID of the instrument. -1 if none is set.\n\t\t * @type {Number}\n\t\t */\n\t\tthis.instrumentNumber = instrumentNumber\n\t}\n\n\tnote(midi, time, duration=0, velocity=1){\n\t\tconst note = new Note(midi, time, duration, velocity)\n\t\tBinaryInsert(this.notes, note)\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a note on event\n\t * @param  {Number|String} midi     The midi note as either a midi number or\n\t *                                  Pitch Notation like ('C#4')\n\t * @param  {Number} time     The time in seconds\n\t * @param  {Number} velocity The velocity value 0-1\n\t * @return {Track} this\n\t */\n\tnoteOn(midi, time, velocity=1){\n\t\tconst note = new Note(midi, time, 0, velocity)\n\t\tBinaryInsert(this.notes, note)\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a note off event. Go through and find an unresolved\n\t * noteOn event with the same pitch.\n\t * @param  {String|Number} midi The midi number or note name.\n\t * @param  {Number} time The time of the event in seconds\n\t * @return {Track} this\n\t */\n\tnoteOff(midi, time){\n\t\tfor (let i = 0; i < this.notes.length; i++){\n\t\t\tlet note = this.notes[i]\n\t\t\tif (note.match(midi) && note.duration === 0){\n\t\t\t\tnote.noteOff = time\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a CC event\n\t * @param  {Number} num The CC number\n\t * @param  {Number} time The time of the event in seconds\n\t * @param  {Number} value The value of the CC\n\t * @return {Track} this\n\t */\n\tcc(num, time, value){\n\t\tif (!this.controlChanges.hasOwnProperty(num)){\n\t\t\tthis.controlChanges[num] = []\n\t\t}\n\t\tconst cc = new Control(num, time, value)\n\t\tBinaryInsert(this.controlChanges[num], cc)\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets instrumentNumber.\n\t * For a list of possible values, see the [General MIDI Instrument Patch Map](https://www.midi.org/specifications/item/gm-level-1-sound-set)\n\t * @param  {Number} id The Patch ID for this instrument, as specified in the General MIDI Instrument Patch Map\n\t */\n\tpatch(id){\n\t\tthis.instrumentNumber = id\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets channelNumber.\n\t * @param  {Number} id The MIDI channel number, between 0 and 0xF.  0x9 and 0xA are percussion\n\t */\n\tchannel(id){\n\t\tthis.channelNumber = id\n\t\treturn this\n\t}\n\n\t/**\n\t * An array of all the note on events\n\t * @type {Array<Object>}\n\t * @readOnly\n\t */\n\tget noteOns(){\n\t\tconst noteOns = []\n\t\tthis.notes.forEach((note) => {\n\t\t\tnoteOns.push({\n\t\t\t\ttime : note.noteOn,\n\t\t\t\tmidi : note.midi,\n\t\t\t\tname : note.name,\n\t\t\t\tvelocity : note.velocity\n\t\t\t})\n\t\t})\n\t\treturn noteOns\n\t}\n\n\t/**\n\t * An array of all the noteOff events\n\t * @type {Array<Object>}\n\t * @readOnly\n\t */\n\tget noteOffs(){\n\t\tconst noteOffs = []\n\t\tthis.notes.forEach((note) => {\n\t\t\tnoteOffs.push({\n\t\t\t\ttime : note.noteOff,\n\t\t\t\tmidi : note.midi,\n\t\t\t\tname : note.name\n\t\t\t})\n\t\t})\n\t\treturn noteOffs\n\t}\n\n\t/**\n\t * The length in seconds of the track\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this.notes.length\n\t}\n\n\t/**\n\t * The time of the first event in seconds\n\t * @type {Number}\n\t */\n\tget startTime() {\n\t\tif (this.notes.length){\n\t\t\tlet firstNote = this.notes[0]\n\t\t\treturn firstNote.noteOn\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\t/**\n\t * The time of the last event in seconds\n\t * @type {Number}\n\t */\n\tget duration() {\n\t\tif (this.notes.length){\n\t\t\tlet lastNote = this.notes[this.notes.length - 1]\n\t\t\treturn lastNote.noteOff\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi instrument\n\t * @type {String}\n\t */\n\tget instrument() {\n\t\tif (this.isPercussion){\n\t\t\treturn drumKitByPatchID[this.instrumentNumber]\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.instrumentNumber]\n\t\t}\n\t}\n\tset instrument(inst) {\n\t\tconst index = instrumentByPatchID.indexOf(inst)\n\t\tif (index !== -1){\n\t\t\tthis.instrumentNumber = index\n\t\t}\n\t}\n\n\n\t/**\n\t * Whether or not this is a percussion track\n\t * @type {Boolean}\n\t */\n\tget isPercussion() {\n\t\treturn [0x9, 0xA].includes(this.channelNumber)\n\t}\n\n\t/**\n\t * The family that the instrument belongs to\n\t * @type {String}\n\t * @readOnly\n\t */\n\tget instrumentFamily() {\n\t\tif (this.isPercussion){\n\t\t\treturn 'drums'\n\t\t} else {\n\t\t\treturn instrumentFamilyByID[Math.floor(this.instrumentNumber / 8)]\n\t\t}\n\t}\n\n\t/**\n\t * Scale the timing of all the events in the track\n\t * @param {Number} amount The amount to scale all the values\n\t */\n\tscale(amount){\n\t\tthis.notes.forEach((note) => {\n\t\t\tnote.time *= amount\n\t\t\tnote.duration *= amount\n\t\t})\n\t\treturn this\n\t}\n\n\t/**\n\t * Slice returns a new track with only events that occured between startTime and endTime.\n\t * Modifies this track.\n\t * @param {Number} startTime\n\t * @param {Number} endTime\n\t * @returns {Track}\n\t */\n\tslice(startTime=0, endTime=this.duration){\n\t\t// get the index before the startTime\n\t\tconst noteStartIndex = Math.max(this.notes.findIndex((note) => note.time >= startTime), 0)\n\t\tconst noteEndIndex = this.notes.findIndex((note) => note.noteOff >= endTime) + 1\n\t\tconst track = new Track(this.name)\n\t\ttrack.notes = this.notes.slice(noteStartIndex, noteEndIndex)\n\t\t//shift the start time\n\t\ttrack.notes.forEach((note) => note.time = note.time - startTime)\n\t\treturn track\n\t}\n\n\t/**\n\t * Write the output to the stream\n\t */\n\tencode(trackEncoder, header){\n\n\t\tconst ticksPerSecond = header.PPQ / (60 / header.bpm)\n\t\tlet lastEventTime = 0\n\n\t\t// unset, `channelNumber` defaults to -1, but that's not a valid MIDI channel\n\t\tconst channelNumber = Math.max(0, this.channelNumber)\n\n\t\tfunction getDeltaTime(time){\n\t\t\tconst ticks = Math.floor(ticksPerSecond * time)\n\t\t\tconst delta = Math.max(ticks - lastEventTime, 0)\n\t\t\tlastEventTime = ticks\n\t\t\treturn delta\n\t\t}\n\n\t\tif (this.instrumentNumber !== -1) {\n\t\t\ttrackEncoder.instrument(channelNumber, this.instrumentNumber)\n\t\t}\n\n\t\tMerge(this.noteOns.sort((a, b) => a.time - b.time), (noteOn) => {\n\t\t\ttrackEncoder.addNoteOn(channelNumber, noteOn.name, getDeltaTime(noteOn.time), Math.floor(noteOn.velocity * 127))\n\t\t}, this.noteOffs.sort((a, b) => a.time - b.time), (noteOff) => {\n\t\t\ttrackEncoder.addNoteOff(channelNumber, noteOff.name, getDeltaTime(noteOff.time))\n\t\t})\n\t}\n\n\t/**\n\t *  Convert all of the fields to JSON\n\t *  @return  {Object}\n\t */\n\ttoJSON(){\n\n\t\tconst ret = {\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\tlength: this.length,\n\t\t\tnotes: [],\n\t\t\tcontrolChanges: {},\n\t\t}\n\n\t\tif (typeof this.id !== 'undefined')\n\t\t\tret.id = this.id\n\n\t\tret.name = this.name\n\n\t\tif (this.instrumentNumber !== -1){\n\t\t\tret.instrumentNumber = this.instrumentNumber\n\t\t\tret.instrument = this.instrument\n\t\t\tret.instrumentFamily = this.instrumentFamily\n\t\t}\n\n\t\tif (this.channelNumber !== -1){\n\t\t\tret.channelNumber = this.channelNumber\n\t\t\tret.isPercussion = this.isPercussion\n\t\t}\n\n\t\tif (this.notes.length)\n\t\t\tret.notes = this.notes.map((n) => n.toJSON())\n\n\t\tif (Object.keys(this.controlChanges).length)\n\t\t\tret.controlChanges = this.controlChanges\n\n\t\treturn ret\n\t}\n}\n\nexport {Track}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Track.js\n// module id = null\n// module chunks = ","import * as Decoder from 'midi-file-parser'\nimport * as Encoder from 'jsmidgen'\nimport * as Util from './Util'\nimport {Track} from './Track'\nimport {parseHeader} from './Header'\n\n/**\n * @class The Midi object. Contains tracks and the header info.\n */\nclass Midi {\n\t/**\n\t * Convert JSON to Midi object\n\t * @param {object} json\n\t * @static\n\t * @returns {Midi}\n\t */\n\tstatic fromJSON(json){\n\t\tvar midi = new Midi()\n\n\t\tmidi.header = json.header\n\t\tjson.tracks.forEach((track) => {\n\t\t\tvar newTrack = Track.fromJSON(track)\n\t\t\tmidi.tracks.push(newTrack)\n\t\t})\n\n\t\treturn midi\n\t}\n\t\n\tconstructor(){\n\n\t\tthis.header = {\n\t\t\t//defaults\n\t\t\tbpm : 120,\n\t\t\ttimeSignature : [4, 4],\n\t\t\tPPQ : 480\n\t\t}\n\n\t\tthis.tracks = []\n\t}\n\n\t/**\n\t * Load the given url and parse the midi at that url\n\t * @param  {String}   url\n\t * @param {*} data Anything that should be sent in the XHR\n\t * @param {String} method Either GET or POST\n\t * @return {Promise}\n\t */\n\tload(url, data=null, method='GET'){\n\t\treturn new Promise((success, fail) => {\n\t\t\tvar request = new XMLHttpRequest()\n\t\t\trequest.open(method, url)\n\t\t\trequest.responseType = 'arraybuffer'\n\t\t\t// decode asynchronously\n\t\t\trequest.addEventListener('load', () => {\n\t\t\t\tif (request.readyState === 4 && request.status === 200){\n\t\t\t\t\tsuccess(this.decode(request.response))\n\t\t\t\t} else {\n\t\t\t\t\tfail(request.status)\n\t\t\t\t}\n\t\t\t})\n\t\t\trequest.addEventListener('error', fail)\n\t\t\trequest.send(data)\n\t\t}).catch(function(error) {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}\n\n\t/**\n\t * Decode the bytes\n\t * @param  {String|ArrayBuffer} bytes The midi file encoded as a string or ArrayBuffer\n\t * @return {Midi}       this\n\t */\n\tdecode(bytes){\n\n\t\tif (bytes instanceof ArrayBuffer){\n\t\t\tvar byteArray = new Uint8Array(bytes)\n\t\t\tbytes = String.fromCharCode.apply(null, byteArray)\n\t\t}\n\n\t\tconst midiData = Decoder(bytes)\n\n\t\tthis.header = parseHeader(midiData)\n\n\t\t//replace the previous tracks\n\t\tthis.tracks = []\n\n\t\tmidiData.tracks.forEach((trackData, i) => {\n\n\t\t\tconst track = new Track()\n\t\t\ttrack.id = i\n\t\t\tthis.tracks.push(track)\n\n\t\t\tlet absoluteTime = 0\n\t\t\ttrackData.forEach((event) => {\n\t\t\t\tabsoluteTime += Util.ticksToSeconds(event.deltaTime, this.header)\n\t\t\t\tif (event.type === 'meta' && event.subtype === 'trackName'){\n\t\t\t\t\ttrack.name = Util.cleanName(event.text)\n\t\t\t\t} else if (event.subtype === 'noteOn'){\n\t\t\t\t\ttrack.noteOn(event.noteNumber, absoluteTime, event.velocity / 127)\n\n\t\t\t\t\tif (track.channelNumber === -1) {\n\t\t\t\t\t\ttrack.channelNumber = event.channel\n\t\t\t\t\t}\n\t\t\t\t} else if (event.subtype === 'noteOff'){\n\t\t\t\t\ttrack.noteOff(event.noteNumber, absoluteTime)\n\t\t\t\t} else if (event.subtype === 'controller' && event.controllerType){\n\t\t\t\t\ttrack.cc(event.controllerType, absoluteTime, event.value / 127)\n\t\t\t\t} else if (event.type === 'meta' && event.subtype === 'instrumentName'){\n\t\t\t\t\ttrack.instrument = event.text\n\t\t\t\t} else if (event.type === 'channel' && event.subtype === 'programChange'){\n\t\t\t\t\ttrack.patch(event.programNumber)\n\t\t\t\t\ttrack.channelNumber = event.channel\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t//if the track is empty, then it is the file name\n\t\t\tif (!this.header.name && !track.length && track.name) {\n\t\t\t\tthis.header.name = track.name;\n\t\t\t}\n\t\t})\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Encode the Midi object as a Buffer String\n\t * @returns {String}\n\t */\n\tencode(){\n\t\tconst output = new Encoder.File({\n\t\t\tticks : this.header.PPQ\n\t\t})\n\n\t\tconst firstEmptyTrack = this.tracks.filter(track => !track.length)[0];\n\n\t\tif (this.header.name && !(firstEmptyTrack && firstEmptyTrack.name === this.header.name)) {\n\t\t\tconst track = output.addTrack()\n\t\t\ttrack.addEvent(\n\t\t\t\tnew Encoder.MetaEvent({\n\t\t\t\t\ttime: 0,\n\t\t\t\t\ttype: Encoder.MetaEvent.TRACK_NAME,\n\t\t\t\t\tdata: this.header.name\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\n\t\tthis.tracks.forEach((track) => {\n\t\t\tconst trackEncoder = output.addTrack()\n\t\t\ttrackEncoder.setTempo(this.bpm)\n\n\t\t\tif (track.name) {\n\t\t\t\ttrackEncoder.addEvent(\n\t\t\t\t\tnew Encoder.MetaEvent({\n\t\t\t\t\t\ttime: 0,\n\t\t\t\t\t\ttype: Encoder.MetaEvent.TRACK_NAME,\n\t\t\t\t\t\tdata: track.name\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\n\t\t\ttrack.encode(trackEncoder, this.header)\n\t\t})\n\t\treturn output.toBytes()\n\t}\n\n\t/**\n\t * Convert the output encoding into an Array\n\t * @return {Array}\n\t */\n\ttoArray(){\n\t\tconst encodedStr = this.encode()\n\t\tconst buffer = new Array(encodedStr.length)\n\t\tfor (let i = 0; i < encodedStr.length; i++){\n\t\t\tbuffer[i] = encodedStr.charCodeAt(i)\n\t\t}\n\t\treturn buffer\n\t}\n\n\t/**\n\t *  Convert all of the fields to JSON\n\t *  @return  {Object}\n\t */\n\ttoJSON(){\n\t\tconst ret = {\n\t\t\theader: this.header,\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\ttracks: (this.tracks || []).map(\n\t\t\t\ttrack => track.toJSON()\n\t\t\t)\n\t\t}\n\n\t\tif (!ret.header.name)\n\t\t\tret.header.name = ''\n\n\t\treturn ret\n\t}\n\n\t/**\n\t * Add a new track.\n\t * @param {String=} name Optionally include the name of the track\n\t * @returns {Track}\n\t */\n\ttrack(name){\n\t\tconst track = new Track(name)\n\t\tthis.tracks.push(track)\n\t\treturn track\n\t}\n\n\t/**\n\t * Get a track either by it's name or track index\n\t * @param  {Number|String} trackName\n\t * @return {Track}\n\t */\n\tget(trackName){\n\t\tif (Util.isNumber(trackName)){\n\t\t\treturn this.tracks[trackName]\n\t\t} else {\n\t\t\treturn this.tracks.find((t) => t.name === trackName)\n\t\t}\n\t}\n\n\t/**\n\t * Slice the midi file between the startTime and endTime. Returns a copy of the\n\t * midi\n\t * @param {Number} startTime\n\t * @param {Number} endTime\n\t * @returns {Midi} this\n\t */\n\tslice(startTime=0, endTime=this.duration){\n\t\tconst midi = new Midi()\n\t\tmidi.header = this.header\n\t\tmidi.tracks = this.tracks.map((t) => t.slice(startTime, endTime))\n\t\treturn midi\n\t}\n\n\t/**\n\t * the time of the first event\n\t * @type {Number}\n\t */\n\tget startTime(){\n\t\tconst startTimes = this.tracks.map((t) => t.startTime)\n\n\t\tif (!startTimes.length)\n\t\t\treturn 0\n\n\t\treturn Math.min.apply(Math, startTimes) || 0\n\t}\n\n\t/**\n\t * The bpm of the midi file in beats per minute\n\t * @type {Number}\n\t */\n\tget bpm(){\n\t\treturn this.header.bpm\n\t}\n\tset bpm(bpm){\n\t\tconst prevTempo = this.header.bpm\n\t\tthis.header.bpm = bpm\n\t\t//adjust the timing of all the notes\n\t\tconst ratio = prevTempo / bpm\n\t\tthis.tracks.forEach((track) => track.scale(ratio))\n\n\t}\n\n\t/**\n\t * The timeSignature of the midi file\n\t * @type {Array}\n\t */\n\tget timeSignature(){\n\t\treturn this.header.timeSignature\n\t}\n\tset timeSignature(timeSig){\n\t\tthis.header.timeSignature = timeSig\n\t}\n\n\t/**\n\t * The duration is the end time of the longest track\n\t * @type {Number}\n\t */\n\tget duration(){\n\t\tconst durations = this.tracks.map((t) => t.duration)\n\n\t\tif (!durations.length)\n\t\t\treturn 0\n\n\t\treturn Math.max.apply(Math, durations) || 0\n\t}\n}\n\nexport {Midi}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Midi.js\n// module id = null\n// module chunks = ","/**\n *  Parse tempo and time signature from the midiJson\n *  @param  {Object}  midiJson\n *  @return  {Object}\n */\nfunction parseHeader(midiJson){\n\tvar ret = {\n\t\tPPQ : midiJson.header.ticksPerBeat\n\t}\n\tfor (var i = 0; i < midiJson.tracks.length; i++){\n\t\tvar track = midiJson.tracks[i]\n\t\tfor (var j = 0; j < track.length; j++){\n\t\t\tvar datum = track[j]\n\t\t\tif (datum.type === \"meta\"){\n\t\t\t\tif (datum.subtype === \"timeSignature\"){\n\t\t\t\t\tret.timeSignature = [datum.numerator, datum.denominator]\n\t\t\t\t} else if (datum.subtype === \"setTempo\"){\n\t\t\t\t\tif (!ret.bpm){\n\t\t\t\t\t\tret.bpm = 60000000 / datum.microsecondsPerBeat\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tret.bpm = ret.bpm || 120\n\treturn ret\n}\n\nexport {parseHeader}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/Header.js\n// module id = null\n// module chunks = ","import {Midi} from './Midi'\nexport {instrumentByPatchID, instrumentFamilyByID, drumKitByPatchID} from './instrumentMaps'\n\n/**\n *  Parse all the data from the Midi file into this format:\n *  {\n *  \t// the transport and timing data\n *  \theader : {\n *  \t\tbpm : Number,                     // tempo, e.g. 120\n *  \t\ttimeSignature : [Number, Number], // time signature, e.g. [4, 4],\n *  \t\tPPQ : Number                  // PPQ of the midi file\n *  \t}\n *  \t// an array for each of the midi tracks\n *  \ttracks : [\n *  \t\t{\n *  \t\t\tname : String, // the track name if one was given\n *  \t\t\tnotes : [\n *  \t\t\t\t{\n *  \t\t\t\t\ttime : Number, // time in seconds\n *  \t\t\t\t\tname : String, // note name, e.g. 'C4'\n *  \t\t\t\t\tmidi : Number, // midi number, e.g. 60\n *  \t\t\t\t\tvelocity : Number,  // normalized velocity\n *  \t\t\t\t\tduration : Number   // duration between noteOn and noteOff\n *  \t\t\t\t}\n *  \t\t\t],\n *  \t\t\tcontrolChanges : { //all of the control changes\n *  \t\t\t\t64 : [ //array for each cc value\n *  \t\t\t\t\t{\n *  \t\t\t\t\t\tnumber : Number, //the cc number\n *  \t\t\t\t\t\ttime : Number, //the time of the event in seconds\n *  \t\t\t\t\t\tname : String, // if the cc value has a common name (e.g. 'sustain')\n *  \t\t\t\t\t\tvalue : Number, //the normalized value\n *  \t\t\t\t\t}\n *  \t\t\t\t]\n *  \t\t\t}\n *  \t\t}\n *  \t]\n *  }\n *  @param  {Binary String}  fileBlob  The output from fs.readFile or FileReader\n *  @returns {Object} All of the options parsed from the midi file.\n */\nexport function parse(fileBlob){\n\treturn new Midi().decode(fileBlob)\n}\n\n/**\n *  Load and parse a midi file. See `parse` for what the results look like.\n *  @param  {String}    url\n *  @param {Function=} callback\n *  @returns {Promise} A promise which is invoked with the returned Midi object\n */\nexport function load(url, callback){\n\tconst promise = new Midi().load(url)\n\tif (callback){\n\t\tpromise.then(callback)\n\t}\n\treturn promise\n}\n\n/**\n * Create an empty midi file\n * @return {Midi}\n */\nexport function create(){\n\treturn new Midi()\n}\n\n/**\n * Create midi object from json\n * @param {object} json\n * @returns {Midi} Deserialized midi object\n */\nexport function fromJSON(json){\n\treturn Midi.fromJSON(json)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midiconvert/src/MidiConvert.js\n// module id = null\n// module chunks = ","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_uid.js\n// module id = 3Eo+\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 3IRH\n// module chunks = 0","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/core.get-iterator-method.js\n// module id = 3fs2\n// module chunks = 0","module.exports = function () { /* empty */ };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_add-to-unscopables.js\n// module id = 4mcu\n// module chunks = 0","// https://github.com/gasman/jasmid\n//\n//\n\nmodule.exports = function(file){\n\treturn MidiFile(file)\n};\n\nfunction MidiFile(data) {\n\tfunction readChunk(stream) {\n\t\tvar id = stream.read(4);\n\t\tvar length = stream.readInt32();\n\t\treturn {\n\t\t\t'id': id,\n\t\t\t'length': length,\n\t\t\t'data': stream.read(length)\n\t\t};\n\t}\n\t\n\tvar lastEventTypeByte;\n\t\n\tfunction readEvent(stream) {\n\t\tvar event = {};\n\t\tevent.deltaTime = stream.readVarInt();\n\t\tvar eventTypeByte = stream.readInt8();\n\t\tif ((eventTypeByte & 0xf0) == 0xf0) {\n\t\t\t/* system / meta event */\n\t\t\tif (eventTypeByte == 0xff) {\n\t\t\t\t/* meta event */\n\t\t\t\tevent.type = 'meta';\n\t\t\t\tvar subtypeByte = stream.readInt8();\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tswitch(subtypeByte) {\n\t\t\t\t\tcase 0x00:\n\t\t\t\t\t\tevent.subtype = 'sequenceNumber';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\n\t\t\t\t\t\tevent.number = stream.readInt16();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x01:\n\t\t\t\t\t\tevent.subtype = 'text';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x02:\n\t\t\t\t\t\tevent.subtype = 'copyrightNotice';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x03:\n\t\t\t\t\t\tevent.subtype = 'trackName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x04:\n\t\t\t\t\t\tevent.subtype = 'instrumentName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x05:\n\t\t\t\t\t\tevent.subtype = 'lyrics';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x06:\n\t\t\t\t\t\tevent.subtype = 'marker';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x07:\n\t\t\t\t\t\tevent.subtype = 'cuePoint';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x20:\n\t\t\t\t\t\tevent.subtype = 'midiChannelPrefix';\n\t\t\t\t\t\tif (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\n\t\t\t\t\t\tevent.channel = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x2f:\n\t\t\t\t\t\tevent.subtype = 'endOfTrack';\n\t\t\t\t\t\tif (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x51:\n\t\t\t\t\t\tevent.subtype = 'setTempo';\n\t\t\t\t\t\tif (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\n\t\t\t\t\t\tevent.microsecondsPerBeat = (\n\t\t\t\t\t\t\t(stream.readInt8() << 16)\n\t\t\t\t\t\t\t+ (stream.readInt8() << 8)\n\t\t\t\t\t\t\t+ stream.readInt8()\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x54:\n\t\t\t\t\t\tevent.subtype = 'smpteOffset';\n\t\t\t\t\t\tif (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\n\t\t\t\t\t\tvar hourByte = stream.readInt8();\n\t\t\t\t\t\tevent.frameRate = {\n\t\t\t\t\t\t\t0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\n\t\t\t\t\t\t}[hourByte & 0x60];\n\t\t\t\t\t\tevent.hour = hourByte & 0x1f;\n\t\t\t\t\t\tevent.min = stream.readInt8();\n\t\t\t\t\t\tevent.sec = stream.readInt8();\n\t\t\t\t\t\tevent.frame = stream.readInt8();\n\t\t\t\t\t\tevent.subframe = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x58:\n\t\t\t\t\t\tevent.subtype = 'timeSignature';\n\t\t\t\t\t\tif (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\n\t\t\t\t\t\tevent.numerator = stream.readInt8();\n\t\t\t\t\t\tevent.denominator = Math.pow(2, stream.readInt8());\n\t\t\t\t\t\tevent.metronome = stream.readInt8();\n\t\t\t\t\t\tevent.thirtyseconds = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x59:\n\t\t\t\t\t\tevent.subtype = 'keySignature';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\n\t\t\t\t\t\tevent.key = stream.readInt8(true);\n\t\t\t\t\t\tevent.scale = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x7f:\n\t\t\t\t\t\tevent.subtype = 'sequencerSpecific';\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\n\t\t\t\t\t\tevent.subtype = 'unknown'\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf0) {\n\t\t\t\tevent.type = 'sysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf7) {\n\t\t\t\tevent.type = 'dividedSysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else {\n\t\t\t\tthrow \"Unrecognised MIDI event type byte: \" + eventTypeByte;\n\t\t\t}\n\t\t} else {\n\t\t\t/* channel event */\n\t\t\tvar param1;\n\t\t\tif ((eventTypeByte & 0x80) == 0) {\n\t\t\t\t/* running status - reuse lastEventTypeByte as the event type.\n\t\t\t\t\teventTypeByte is actually the first parameter\n\t\t\t\t*/\n\t\t\t\tparam1 = eventTypeByte;\n\t\t\t\teventTypeByte = lastEventTypeByte;\n\t\t\t} else {\n\t\t\t\tparam1 = stream.readInt8();\n\t\t\t\tlastEventTypeByte = eventTypeByte;\n\t\t\t}\n\t\t\tvar eventType = eventTypeByte >> 4;\n\t\t\tevent.channel = eventTypeByte & 0x0f;\n\t\t\tevent.type = 'channel';\n\t\t\tswitch (eventType) {\n\t\t\t\tcase 0x08:\n\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x09:\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\tif (event.velocity == 0) {\n\t\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.subtype = 'noteOn';\n\t\t\t\t\t}\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0a:\n\t\t\t\t\tevent.subtype = 'noteAftertouch';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.amount = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0b:\n\t\t\t\t\tevent.subtype = 'controller';\n\t\t\t\t\tevent.controllerType = param1;\n\t\t\t\t\tevent.value = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0c:\n\t\t\t\t\tevent.subtype = 'programChange';\n\t\t\t\t\tevent.programNumber = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0d:\n\t\t\t\t\tevent.subtype = 'channelAftertouch';\n\t\t\t\t\tevent.amount = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0e:\n\t\t\t\t\tevent.subtype = 'pitchBend';\n\t\t\t\t\tevent.value = param1 + (stream.readInt8() << 7);\n\t\t\t\t\treturn event;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"Unrecognised MIDI event type: \" + eventType\n\t\t\t\t\t/* \n\t\t\t\t\tconsole.log(\"Unrecognised MIDI event type: \" + eventType);\n\t\t\t\t\tstream.readInt8();\n\t\t\t\t\tevent.subtype = 'unknown';\n\t\t\t\t\treturn event;\n\t\t\t\t\t*/\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstream = Stream(data);\n\tvar headerChunk = readChunk(stream);\n\tif (headerChunk.id != 'MThd' || headerChunk.length != 6) {\n\t\tthrow \"Bad .mid file - header not found\";\n\t}\n\tvar headerStream = Stream(headerChunk.data);\n\tvar formatType = headerStream.readInt16();\n\tvar trackCount = headerStream.readInt16();\n\tvar timeDivision = headerStream.readInt16();\n\t\n\tif (timeDivision & 0x8000) {\n\t\tthrow \"Expressing time division in SMTPE frames is not supported yet\"\n\t} else {\n\t\tticksPerBeat = timeDivision;\n\t}\n\t\n\tvar header = {\n\t\t'formatType': formatType,\n\t\t'trackCount': trackCount,\n\t\t'ticksPerBeat': ticksPerBeat\n\t}\n\tvar tracks = [];\n\tfor (var i = 0; i < header.trackCount; i++) {\n\t\ttracks[i] = [];\n\t\tvar trackChunk = readChunk(stream);\n\t\tif (trackChunk.id != 'MTrk') {\n\t\t\tthrow \"Unexpected chunk - expected MTrk, got \"+ trackChunk.id;\n\t\t}\n\t\tvar trackStream = Stream(trackChunk.data);\n\t\twhile (!trackStream.eof()) {\n\t\t\tvar event = readEvent(trackStream);\n\t\t\ttracks[i].push(event);\n\t\t\t//console.log(event);\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'header': header,\n\t\t'tracks': tracks\n\t}\n};\n\n/* Wrapper for accessing strings through sequential reads */\nfunction Stream(str) {\n\tvar position = 0;\n\t\n\tfunction read(length) {\n\t\tvar result = str.substr(position, length);\n\t\tposition += length;\n\t\treturn result;\n\t}\n\t\n\t/* read a big-endian 32-bit integer */\n\tfunction readInt32() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 24)\n\t\t\t+ (str.charCodeAt(position + 1) << 16)\n\t\t\t+ (str.charCodeAt(position + 2) << 8)\n\t\t\t+ str.charCodeAt(position + 3));\n\t\tposition += 4;\n\t\treturn result;\n\t}\n\n\t/* read a big-endian 16-bit integer */\n\tfunction readInt16() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 8)\n\t\t\t+ str.charCodeAt(position + 1));\n\t\tposition += 2;\n\t\treturn result;\n\t}\n\t\n\t/* read an 8-bit integer */\n\tfunction readInt8(signed) {\n\t\tvar result = str.charCodeAt(position);\n\t\tif (signed && result > 127) result -= 256;\n\t\tposition += 1;\n\t\treturn result;\n\t}\n\t\n\tfunction eof() {\n\t\treturn position >= str.length;\n\t}\n\t\n\t/* read a MIDI-style variable-length integer\n\t\t(big-endian value in groups of 7 bits,\n\t\twith top bit set to signify that another byte follows)\n\t*/\n\tfunction readVarInt() {\n\t\tvar result = 0;\n\t\twhile (true) {\n\t\t\tvar b = readInt8();\n\t\t\tif (b & 0x80) {\n\t\t\t\tresult += (b & 0x7f);\n\t\t\t\tresult <<= 7;\n\t\t\t} else {\n\t\t\t\t/* b is the last byte */\n\t\t\t\treturn result + b;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'eof': eof,\n\t\t'read': read,\n\t\t'readInt32': readInt32,\n\t\t'readInt16': readInt16,\n\t\t'readInt8': readInt8,\n\t\t'readVarInt': readVarInt\n\t}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/midi-file-parser/index.js\n// module id = 51l/\n// module chunks = 0","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_defined.js\n// module id = 52gC\n// module chunks = 0","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').isIterable = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/core.is-iterable.js\n// module id = 5PlU\n// module chunks = 0","/*!\n * Vue.js v2.5.16\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false && isObject(value) && ('@binding' in value))\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.16';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (process.env.NODE_ENV !== 'production') {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        process.env.NODE_ENV !== 'test' &&\n        isChrome\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' &&\n      process.env.NODE_ENV !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\nexport default Vue;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue/dist/vue.esm.js\n// module id = 7+uW\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_an-object.js\n// module id = 77Pl\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_global.js\n// module id = 7KvD\n// module chunks = 0","module.exports = require('./_hide');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_redefine.js\n// module id = 880/\n// module chunks = 0","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-create.js\n// module id = 94VQ\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/get-iterator.js\n// module id = BO1k\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_has.js\n// module id = D2L2\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = DuR2\n// module chunks = 0","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-step.js\n// module id = EGZi\n// module chunks = 0","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_is-object.js\n// module id = EqjI\n// module chunks = 0","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_core.js\n// module id = FeBl\n// module chunks = 0","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys-internal.js\n// module id = Ibhu\n// module chunks = 0","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iobject.js\n// module id = MU5D\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-primitive.js\n// module id = MmMw\n// module chunks = 0","module.exports = true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_library.js\n// module id = O4g8\n// module chunks = 0","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_dom-create.js\n// module id = ON07\n// module chunks = 0","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-gpo.js\n// module id = PzxK\n// module chunks = 0","var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jsmidgen/lib/jsmidgen.js\n// module id = QBBv\n// module chunks = 0","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-length.js\n// module id = QRG4\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_cof.js\n// module id = R9M2\n// module chunks = 0","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_html.js\n// module id = RPLV\n// module chunks = 0","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_classof.js\n// module id = RY/4\n// module chunks = 0","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_fails.js\n// module id = S82l\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_ie8-dom-define.js\n// module id = SfB7\n// module chunks = 0","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-iobject.js\n// module id = TcQ7\n// module chunks = 0","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-integer.js\n// module id = UuGF\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = VU/8\n// module chunks = 0","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_property-desc.js\n// module id = X8DO\n// module chunks = 0","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.is-iterable');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/is-iterable.js\n// module id = Xd32\n// module chunks = 0","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-create.js\n// module id = Yobk\n// module chunks = 0","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2018 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes.\n\t\t *  @constructor\n\t\t */\n\t    var Tone = function () {\n\t        if (!(this instanceof Tone)) {\n\t            throw new Error('constructor needs to be called with the \\'new\\' keyword');\n\t        }\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  @returns {String} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGET/SET\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which\n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|String} params\n\t\t *  @param {Number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds.\n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (Tone.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (Tone.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (Tone.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (Tone.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (Tone.TimeBase && param instanceof Tone.TimeBase) {\n\t                    parent[attr] = value;\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (Tone.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (Tone.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (Tone.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!Tone.isFunction(param) && Tone.isDefined(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {Function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (Tone.isDefined(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (Tone.isDefined(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @memberOf Tone\n\t\t *  @param  {Array}  values  The arguments array\n\t\t *  @param  {Array}  keys    The names of the arguments\n\t\t *  @param {Function|Object} constr The class constructor\n\t\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t\t *                        and the passed in arguments.\n\t\t */\n\t    Tone.defaults = function (values, keys, constr) {\n\t        var options = {};\n\t        if (values.length === 1 && Tone.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (Tone.isDefined(constr.defaults)) {\n\t            return Tone.defaultArg(options, constr.defaults);\n\t        } else if (Tone.isObject(constr)) {\n\t            return Tone.defaultArg(options, constr);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`.\n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both\n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property.\n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an\n\t\t *  infinite recursive loop.\n\t\t *  @memberOf Tone\n\t\t *  @param  {*} given\n\t\t *  @param  {*} fallback\n\t\t *  @return {*}\n\t\t */\n\t    Tone.defaultArg = function (given, fallback) {\n\t        if (Tone.isObject(given) && Tone.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return Tone.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t */\n\t    Tone.connectSeries = function () {\n\t        var currentUnit = arguments[0];\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return Tone;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is undefined\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  Test if the arg is not undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is undefined\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isDefined = function (val) {\n\t        return !Tone.isUndef(val);\n\t    };\n\t    /**\n\t\t *  Test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is a function\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is a number\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is an object literal.\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is a boolean\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is an array\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t\t *  e.g. \"C4\"\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {Boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNote = function (arg) {\n\t        return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only.\n\t\t *  @private\n\t\t *  @param  {String}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only.\n\t\t *  @private\n\t\t *  @param  {String}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.dbToGain = function (db) {\n\t        return Math.pow(10, db / 20);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {Number}          the frequency ratio\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @memberOf Tone#\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call\n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @param  {Function} \tchild\n\t\t *  @param  {Function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Private reference to the global AudioContext\n\t\t *  @type {AudioContext}\n\t\t *  @private\n\t\t */\n\t    var audioContext = null;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context.\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            Tone.Context.emit('init', audioContext);\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context,\n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tATTRIBUTES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    /**\n\t\t *  Boolean value if the audio context has been initialized.\n\t\t *  @type {Boolean}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @name initialized\n\t\t */\n\t    Object.defineProperty(Tone, 'initialized', {\n\t        get: function () {\n\t            return audioContext !== null;\n\t        }\n\t    });\n\t    /**\n\t\t *  Get the context when it becomes available\n\t\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t\t *  @return  {Tone}\n\t\t */\n\t    Tone.getContext = function (resolve) {\n\t        if (Tone.initialized) {\n\t            resolve(Tone.context);\n\t        } else {\n\t            var resCallback = function () {\n\t                resolve(Tone.context);\n\t                Tone.Context.off('init', resCallback);\n\t            };\n\t            Tone.Context.on('init', resCallback);\n\t        }\n\t        return Tone;\n\t    };\n\t    /**\n\t\t * The version number\n\t\t * @type {String}\n\t\t * @static\n\t\t */\n\t    Tone.version = 'r12';\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events.\n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Bind a callback which is only invoked once\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.once = function (event, callback) {\n\t        var boundCallback = function () {\n\t            //invoke the callback\n\t            callback.apply(this, arguments);\n\t            this.off(event, boundCallback);\n\t        }.bind(this);\n\t        this.on(event, boundCallback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to\n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in.\n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*} args... The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event].slice(0);\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t *  @returns {Tone.Emitter}\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'once',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t        return Tone.Emitter;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property.\n\t\t *         Internally, events are stored in time order for fast\n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = Tone.defaults(arguments, ['memory'], Tone.Timeline);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the\n\t\t *                           timeline.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (Tone.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        event.time = event.time.valueOf();\n\t        var index = this._search(event.time);\n\t        this._timeline.splice(index + 1, 0, event);\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        var index = this._timeline.indexOf(event);\n\t        if (index !== -1) {\n\t            this._timeline.splice(index, 1);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1][comparator] < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time, comparator);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        var index = this._search(time);\n\t        if (index >= 0) {\n\t            this._timeline = this._timeline.slice(index + 1);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the previous event if there is one. null otherwise\n\t\t * @param  {Object} event The event to find the previous one of\n\t\t * @return {Object}       The event right before the given event\n\t\t */\n\t    Tone.Timeline.prototype.previousEvent = function (event) {\n\t        var index = this._timeline.indexOf(event);\n\t        if (index > 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Does a binary search on the timeline array and returns the\n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @return  {Number} the index in the timeline array\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time, comparator) {\n\t        if (this._timeline.length === 0) {\n\t            return -1;\n\t        }\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1][comparator] <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event[comparator] === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent[comparator] === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event[comparator] < time && nextEvent[comparator] > time) {\n\t                return midPoint;\n\t            } else if (event[comparator] > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for\n\t\t *  removing items from the array.\n\t\t *  @param  {Function}  callback\n\t\t *  @param  {Number=}    lowerBound\n\t\t *  @param  {Number=}    upperBound\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        lowerBound = Tone.defaultArg(lowerBound, 0);\n\t        upperBound = Tone.defaultArg(upperBound, this._timeline.length - 1);\n\t        this._timeline.slice(lowerBound, upperBound + 1).forEach(function (event) {\n\t            callback.call(this, event);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array between the startTime and endTime. \n\t\t *  The timerange is inclusive of the startTime, but exclusive of the endTime. \n\t\t *  range = [startTime, endTime). \n\t\t *  @param  {Number}  startTime The time to check if items are before\n\t\t *  @param  {Number}  endTime The end of the test interval. \n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBetween = function (startTime, endTime, callback) {\n\t        var lowerBound = this._search(startTime);\n\t        var upperBound = this._search(endTime);\n\t        if (lowerBound !== -1 && upperBound !== -1) {\n\t            if (this._timeline[lowerBound].time !== startTime) {\n\t                lowerBound += 1;\n\t            }\n\t            //exclusive of the end time\n\t            if (this._timeline[upperBound].time === endTime) {\n\t                upperBound -= 1;\n\t            }\n\t            this._iterate(callback, lowerBound, upperBound);\n\t        } else if (lowerBound === -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to\n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback.call(this, event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        return this;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported) {\n\t        if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t            window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t        }\n\t        //returns promise?\n\t        var context = new OfflineAudioContext(1, 1, 44100);\n\t        var ret = context.startRendering();\n\t        if (!(ret instanceof Promise)) {\n\t            OfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;\n\t            OfflineAudioContext.prototype.startRendering = function () {\n\t                return new Promise(function (done) {\n\t                    this.oncomplete = function (e) {\n\t                        done(e.renderedBuffer);\n\t                    };\n\t                    this._native_startRendering();\n\t                }.bind(this));\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported) {\n\t        if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t            window.AudioContext = window.webkitAudioContext;\n\t        }\n\t        //not functionally equivalent, but only an API placeholder\n\t        if (!AudioContext.prototype.close) {\n\t            AudioContext.prototype.close = function () {\n\t                if (Tone.isFunction(this.suspend)) {\n\t                    this.suspend();\n\t                }\n\t                return Promise.resolve();\n\t            };\n\t        }\n\t        //not functionally equivalent\n\t        if (!AudioContext.prototype.resume) {\n\t            AudioContext.prototype.resume = function () {\n\t                return Promise.resolve();\n\t            };\n\t        }\n\t        //createGain\n\t        if (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode) {\n\t            AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t        }\n\t        //createDelay\n\t        if (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode) {\n\t            AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t        }\n\t        //test decodeAudioData returns a promise\n\t        // https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js\n\t        // MIT License (c) 2015 @mohayonao\n\t        var decodeAudioDataPromise = false;\n\t        var offlineContext = new OfflineAudioContext(1, 1, 44100);\n\t        var audioData = new Uint32Array([\n\t            1179011410,\n\t            48,\n\t            1163280727,\n\t            544501094,\n\t            16,\n\t            131073,\n\t            44100,\n\t            176400,\n\t            1048580,\n\t            1635017060,\n\t            8,\n\t            0,\n\t            0,\n\t            0,\n\t            0\n\t        ]).buffer;\n\t        try {\n\t            var ret = offlineContext.decodeAudioData(audioData);\n\t            if (ret instanceof Promise) {\n\t                decodeAudioDataPromise = true;\n\t            }\n\t        } catch (e) {\n\t            decodeAudioDataPromise = false;\n\t        }\n\t        if (!decodeAudioDataPromise) {\n\t            AudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;\n\t            AudioContext.prototype.decodeAudioData = function (audioData) {\n\t                return new Promise(function (success, error) {\n\t                    this._native_decodeAudioData(audioData, success, error);\n\t                }.bind(this));\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = Tone.defaults(arguments, ['context'], Tone.Context);\n\t        if (!options.context) {\n\t            options.context = new window.AudioContext();\n\t            if (!options.context) {\n\t                throw new Error('could not create AudioContext. Possibly too many AudioContexts running already.');\n\t            }\n\t        }\n\t        this._context = options.context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = options.latencyHint;\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.lookAhead = options.lookAhead;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  A reliable callback method\n\t\t\t *  @private\n\t\t\t *  @type  {Ticker}\n\t\t\t */\n\t        this._ticker = new Ticker(this.emit.bind(this, 'tick'), options.clockSource, options.updateInterval);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // TIMEOUTS\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All of the setTimeout events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeouts = new Tone.Timeline();\n\t        /**\n\t\t\t *  The timeout id counter\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._timeoutIds = 0;\n\t        this.on('tick', this._timeoutLoop.bind(this));\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t * defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Context.defaults = {\n\t        'clockSource': 'worker',\n\t        'latencyHint': 'interactive',\n\t        'lookAhead': 0.1,\n\t        'updateInterval': 0.03\n\t    };\n\t    /**\n\t\t *  Define a property on this Tone.Context.\n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (Tone.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime + this.lookAhead;\n\t    };\n\t    /**\n\t\t *  Promise which is invoked when the context is running.\n\t\t *  Tries to resume the context if it's not started.\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.Context.prototype.ready = function () {\n\t        return new Promise(function (done) {\n\t            if (this._context.state === 'running') {\n\t                done();\n\t            } else {\n\t                this._context.resume().then(function () {\n\t                    done();\n\t                });\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Promise which is invoked when the context is running.\n\t\t *  Tries to resume the context if it's not started.\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.Context.prototype.close = function () {\n\t        return this._context.close().then(function () {\n\t            Tone.Context.emit('close', this);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  The private loop which keeps track of the context scheduled timeouts\n\t\t *  Is invoked from the clock source\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._timeoutLoop = function () {\n\t        var now = this.now();\n\t        while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {\n\t            this._timeouts.shift().callback();\n\t        }\n\t    };\n\t    /**\n\t\t *  A setTimeout which is gaurenteed by the clock source.\n\t\t *  Also runs in the offline context.\n\t\t *  @param  {Function}  fn       The callback to invoke\n\t\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t\t */\n\t    Tone.Context.prototype.setTimeout = function (fn, timeout) {\n\t        this._timeoutIds++;\n\t        var now = this.now();\n\t        this._timeouts.add({\n\t            callback: fn,\n\t            time: now + timeout,\n\t            id: this._timeoutIds\n\t        });\n\t        return this._timeoutIds;\n\t    };\n\t    /**\n\t\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t\t *  @param  {Number}  id  The ID returned from setTimeout\n\t\t *  @return  {Tone.Context}  this\n\t\t */\n\t    Tone.Context.prototype.clearTimeout = function (id) {\n\t        this._timeouts.forEach(function (event) {\n\t            if (event.id === id) {\n\t                this.remove(event);\n\t            }\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name updateInterval\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._ticker.updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._ticker.updateInterval = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  What the source of the clock is, either \"worker\" (Web Worker [default]),\n\t\t *  \"timeout\" (setTimeout), or \"offline\" (none).\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name clockSource\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'clockSource', {\n\t        get: function () {\n\t            return this._ticker.type;\n\t        },\n\t        set: function (type) {\n\t            this._ticker.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio\n\t\t *  output latency and responsiveness.\n\t\t *\n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency),\n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (Tone.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    this._context.latencyHint = 'interactive';\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Unlike other dispose methods, this returns a Promise\n\t\t *  which executes when the context is closed and disposed\n\t\t *  @returns {Promise} this\n\t\t */\n\t    Tone.Context.prototype.dispose = function () {\n\t        return this.close().then(function () {\n\t            Tone.Emitter.prototype.dispose.call(this);\n\t            this._ticker.dispose();\n\t            this._ticker = null;\n\t            this._timeouts.dispose();\n\t            this._timeouts = null;\n\t            for (var con in this._constants) {\n\t                this._constants[con].disconnect();\n\t            }\n\t            this._constants = null;\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t * @class A class which provides a reliable callback using either\n\t\t *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n\t\t * @private\n\t\t */\n\t    var Ticker = function (callback, type, updateInterval) {\n\t        /**\n\t\t\t * Either \"worker\" or \"timeout\"\n\t\t\t * @type {String}\n\t\t\t * @private\n\t\t\t */\n\t        this._type = type;\n\t        /**\n\t\t\t * The update interval of the worker\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._updateInterval = updateInterval;\n\t        /**\n\t\t\t * The callback to invoke at regular intervals\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._callback = Tone.defaultArg(callback, Tone.noOp);\n\t        //create the clock source for the first time\n\t        this._createClock();\n\t    };\n\t    /**\n\t\t * The possible ticker types\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t    Ticker.Type = {\n\t        Worker: 'worker',\n\t        Timeout: 'timeout',\n\t        Offline: 'offline'\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Ticker.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.onmessage = this._callback.bind(this);\n\t        this._worker = worker;\n\t    };\n\t    /**\n\t\t * Create a timeout loop\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createTimeout = function () {\n\t        this._timeout = setTimeout(function () {\n\t            this._createTimeout();\n\t            this._callback();\n\t        }.bind(this), this._updateInterval * 1000);\n\t    };\n\t    /**\n\t\t * Create the clock source.\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createClock = function () {\n\t        if (this._type === Ticker.Type.Worker) {\n\t            try {\n\t                this._createWorker();\n\t            } catch (e) {\n\t                // workers not supported, fallback to timeout\n\t                this._type = Ticker.Type.Timeout;\n\t                this._createClock();\n\t            }\n\t        } else if (this._type === Ticker.Type.Timeout) {\n\t            this._createTimeout();\n\t        }\n\t    };\n\t    /**\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name updateInterval\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, 128 / 44100);\n\t            if (this._type === Ticker.Type.Worker) {\n\t                this._worker.postMessage(Math.max(interval * 1000, 1));\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the ticker, either a worker or a timeout\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name type\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._disposeClock();\n\t            this._type = type;\n\t            this._createClock();\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up the current clock source\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._disposeClock = function () {\n\t        if (this._timeout) {\n\t            clearTimeout(this._timeout);\n\t            this._timeout = null;\n\t        }\n\t        if (this._worker) {\n\t            this._worker.terminate();\n\t            this._worker.onmessage = null;\n\t            this._worker = null;\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @private\n\t\t */\n\t    Ticker.prototype.dispose = function () {\n\t        this._disposeClock();\n\t        this._callback = null;\n\t    };\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    Tone.getContext(function () {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                if (Tone.isArray(B.input)) {\n\t                    return this.connect(B.input[inNum]);\n\t                } else {\n\t                    return this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                        return B;\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                        return B;\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Tone.isArray(B.input)) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                this.disconnect(B.input[inNum], outNum, 0);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    });\n\t    // set the audio context initially, and if one is not already created\n\t    if (Tone.supported && !Tone.initialized) {\n\t        Tone.context = new Tone.Context();\n\t        // log on first initialization\n\t        // allow optional silencing of this log\n\t        if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t            // eslint-disable-next-line no-console\n\t            console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t        }\n\t    } else if (!Tone.supported) {\n\t        // eslint-disable-next-line no-console\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.AudioNode is the base class for classes which process audio.\n\t\t *         AudioNodes have inputs and outputs.\n\t\t *  @param\t{AudioContext=} context\tThe audio context to use with the class\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.AudioNode = function () {\n\t        Tone.call(this);\n\t        //use the default context if one is not passed in\n\t        var options = Tone.defaults(arguments, ['context'], { 'context': Tone.context });\n\t        /**\n\t\t\t * The AudioContext of this instance\n\t\t\t * @private\n\t\t\t * @type {AudioContext}\n\t\t\t */\n\t        this._context = options.context;\n\t    };\n\t    Tone.extend(Tone.AudioNode);\n\t    /**\n\t\t * Get the audio context belonging to this instance.\n\t\t * @type {Tone.Context}\n\t\t * @memberOf Tone.AudioNode#\n\t\t * @name context\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'context', {\n\t        get: function () {\n\t            return this._context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  [input=0]   The number of inputs\n\t\t *  @param  {Number}  [outputs=0]  The number of outputs\n\t\t *  @return  {Tone.AudioNode}  this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(outputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t\t *  connections to any inputs to the node. The default value is 2 except for\n\t\t *  specific nodes where its value is specially determined.\n\t\t *\n\t\t *  @memberof Tone.AudioNode#\n\t\t *  @type {Number}\n\t\t *  @name channelCount\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'channelCount', {\n\t        get: function () {\n\t            return this.output.channelCount;\n\t        },\n\t        set: function (c) {\n\t            return this.output.channelCount = c;\n\t        }\n\t    });\n\t    /**\n\t\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t\t *  down-mixing connections to any inputs to the node.\n\t\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t\t *  @memberof Tone.AudioNode#\n\t\t *  @type {String}\n\t\t *  @name channelCountMode\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'channelCountMode', {\n\t        get: function () {\n\t            return this.output.channelCountMode;\n\t        },\n\t        set: function (m) {\n\t            return this.output.channelCountMode = m;\n\t        }\n\t    });\n\t    /**\n\t\t *  channelInterpretation determines how individual channels will be treated\n\t\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t\t *  The default value is \"speakers\".\n\t\t *  @memberof Tone.AudioNode#\n\t\t *  @type {String}\n\t\t *  @name channelInterpretation\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'channelInterpretation', {\n\t        get: function () {\n\t            return this.output.channelInterpretation;\n\t        },\n\t        set: function (i) {\n\t            return this.output.channelInterpretation = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode.\n\t\t *  For source nodes, this will be 0.\n\t\t *  @type {Number}\n\t\t *  @name numberOfInputs\n\t\t *  @memberof Tone.AudioNode#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (Tone.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode.\n\t\t *  @type {Number}\n\t\t *  @name numberOfOutputs\n\t\t *  @memberof Tone.AudioNode#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (Tone.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Called when an audio param connects to this node\n\t\t * @private\n\t\t */\n\t    Tone.AudioNode.prototype._onConnect = function () {\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (unit._onConnect) {\n\t            unit._onConnect(this);\n\t        }\n\t        if (Tone.isArray(this.output)) {\n\t            outputNum = Tone.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (Tone.isArray(this.output)) {\n\t            if (Tone.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = Tone.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.chain = function () {\n\t        var currentUnit = this;\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.fan = function () {\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            this.connect(arguments[i]);\n\t        }\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        //give native nodes chain and fan methods\n\t        AudioNode.prototype.chain = Tone.AudioNode.prototype.chain;\n\t        AudioNode.prototype.fan = Tone.AudioNode.prototype.fan;\n\t    }\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.dispose = function () {\n\t        if (Tone.isDefined(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (Tone.isDefined(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        this._context = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioNode;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t        Tone.AudioNode.call(this);\n\t    };\n\t    Tone.extend(Tone.SignalBase, Tone.AudioNode);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported) {\n\t        //fixes safari only bug which is still present in 11\n\t        var ua = navigator.userAgent.toLowerCase();\n\t        var isSafari = ua.includes('safari') && !ua.includes('chrome');\n\t        if (isSafari) {\n\t            var WaveShaperNode = function (context) {\n\t                this._internalNode = this.input = this.output = context._native_createWaveShaper();\n\t                this._curve = null;\n\t                for (var prop in this._internalNode) {\n\t                    this._defineProperty(this._internalNode, prop);\n\t                }\n\t            };\n\t            Object.defineProperty(WaveShaperNode.prototype, 'curve', {\n\t                get: function () {\n\t                    return this._curve;\n\t                },\n\t                set: function (curve) {\n\t                    this._curve = curve;\n\t                    var array = new Float32Array(curve.length + 1);\n\t                    array.set(curve, 1);\n\t                    array[0] = curve[0];\n\t                    this._internalNode.curve = array;\n\t                }\n\t            });\n\t            WaveShaperNode.prototype._defineProperty = function (context, prop) {\n\t                if (Tone.isUndef(this[prop])) {\n\t                    Object.defineProperty(this, prop, {\n\t                        get: function () {\n\t                            if (typeof context[prop] === 'function') {\n\t                                return context[prop].bind(context);\n\t                            } else {\n\t                                return context[prop];\n\t                            }\n\t                        },\n\t                        set: function (val) {\n\t                            context[prop] = val;\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            AudioContext.prototype._native_createWaveShaper = AudioContext.prototype.createWaveShaper;\n\t            AudioContext.prototype.createWaveShaper = function () {\n\t                return new WaveShaperNode(this);\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API\n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values.\n\t\t *                                    The mapping function should take two arguments:\n\t\t *                                    the first is the value at the current position\n\t\t *                                    and the second is the array position.\n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values.\n\t\t *\n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || Tone.isUndef(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(mapping, 1024));\n\t        } else if (Tone.isFunction(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve.\n\t\t *  @param {function} mapping The function used to define the values.\n\t\t *                            The mapping function take two arguments:\n\t\t *                            the first is the value at the current position\n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        var array = new Array(this._curve.length);\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            array[i] = mapping(normalized, i);\n\t        }\n\t        this.curve = array;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation.\n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when\n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].includes(oversampling)) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\")\n\t\t * Tone.TimeBase(\"2t\") + Tone.TimeBase(\"4n\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  The value\n\t\t\t\t *  @type  {Number|String|Tone.TimeBase}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._val = val;\n\t            /**\n\t\t\t\t * The units\n\t\t\t\t * @type {String?}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            this._units = units;\n\t            //test if the value is a string representation of a number\n\t            if (Tone.isUndef(this._units) && Tone.isString(this._val) && // eslint-disable-next-line eqeqeq\n\t                parseFloat(this._val) == this._val && this._val.charAt(0) !== '+') {\n\t                this._val = parseFloat(this._val);\n\t                this._units = this._defaultUnits;\n\t            } else if (val && val.constructor === this.constructor) {\n\t                //if they're the same type, just copy values over\n\t                this._val = val._val;\n\t                this._units = val._units;\n\t            } else if (val instanceof Tone.TimeBase) {\n\t                switch (this._defaultUnits) {\n\t                case 's':\n\t                    this._val = val.toSeconds();\n\t                    break;\n\t                case 'i':\n\t                    this._val = val.toTicks();\n\t                    break;\n\t                case 'hz':\n\t                    this._val = val.toFrequency();\n\t                    break;\n\t                case 'midi':\n\t                    this._val = val.toMidi();\n\t                    break;\n\t                default:\n\t                    throw new Error('Unrecognized default units ' + this._defaultUnits);\n\t                }\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._expressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n(\\.?)$/i,\n\t            method: function (value, dot) {\n\t                value = parseInt(value);\n\t                var scalar = dot === '.' ? 1.5 : 1;\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._getTimeSignature()) * scalar;\n\t                } else {\n\t                    return this._beatsToUnits(4 / value) * scalar;\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t$/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m$/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._getTimeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i$/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples$/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t            method: function (value) {\n\t                return this._expressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTRANSPORT FALLBACKS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Return the bpm, or 120 if Transport is not available\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.TimeBase.prototype._getBpm = function () {\n\t        if (Tone.Transport) {\n\t            return Tone.Transport.bpm.value;\n\t        } else {\n\t            return 120;\n\t        }\n\t    };\n\t    /**\n\t\t * Return the timeSignature or 4 if Transport is not available\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.TimeBase.prototype._getTimeSignature = function () {\n\t        if (Tone.Transport) {\n\t            return Tone.Transport.timeSignature;\n\t        } else {\n\t            return 4;\n\t        }\n\t    };\n\t    /**\n\t\t * Return the PPQ or 192 if Transport is not available\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.TimeBase.prototype._getPPQ = function () {\n\t        if (Tone.Transport) {\n\t            return Tone.Transport.PPQ;\n\t        } else {\n\t            return 192;\n\t        }\n\t    };\n\t    /**\n\t\t * Return the current time in whichever context is relevant\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.TimeBase.prototype._now = function () {\n\t        return this.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / this._getBpm() * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / this._getPPQ());\n\t    };\n\t    /**\n\t\t * With no arguments, return 'now'\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noArg = function () {\n\t        return this._now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        if (Tone.isUndef(this._val)) {\n\t            return this._noArg();\n\t        } else if (Tone.isString(this._val) && Tone.isUndef(this._units)) {\n\t            for (var units in this._expressions) {\n\t                if (this._expressions[units].regexp.test(this._val.trim())) {\n\t                    this._units = units;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (Tone.isDefined(this._units)) {\n\t            var expr = this._expressions[this._units];\n\t            var matching = this._val.toString().trim().match(expr.regexp);\n\t            if (matching) {\n\t                return expr.method.apply(this, matching.slice(1));\n\t            } else {\n\t                return expr.method.call(this, parseFloat(this._val));\n\t            }\n\t        } else {\n\t            return this._val;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the value in seconds\n\t\t *  @return {Seconds}\n\t\t */\n\t    Tone.TimeBase.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in hertz\n\t\t *  @return {Frequency}\n\t\t */\n\t    Tone.TimeBase.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}\n\t\t */\n\t    Tone.TimeBase.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds}\n\t\t */\n\t    Tone.TimeBase.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._val = null;\n\t        this._units = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method.\n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    Tone.Frequency.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t        'midi': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t            method: function (value) {\n\t                if (this._defaultUnits === 'midi') {\n\t                    return value;\n\t                } else {\n\t                    return Tone.Frequency.mtof(value);\n\t                }\n\t            }\n\t        },\n\t        'note': {\n\t            regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t            method: function (pitch, octave) {\n\t                var index = noteToScaleIndex[pitch.toLowerCase()];\n\t                var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t                if (this._defaultUnits === 'midi') {\n\t                    return noteNumber;\n\t                } else {\n\t                    return Tone.Frequency.mtof(noteNumber);\n\t                }\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 1;\n\t                if (m && m !== '0') {\n\t                    total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total *= this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total *= this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} A new transposed frequency\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        return new this.constructor(this.valueOf() * Tone.intervalToFrequencyRatio(interval));\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        return intervals.map(function (interval) {\n\t            return this.transpose(interval);\n\t        }.bind(this));\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return Tone.Frequency.ftom(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.toFrequency();\n\t        var log = Math.log2(freq / Tone.Frequency.A4);\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / Tone.TimeBase.prototype.toSeconds.call(this);\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return Tone.TimeBase.prototype.toFrequency.call(this);\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  With no arguments, return 0\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._noArg = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz.\n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value.\n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Frequency.mtof(69); // returns 440\n\t\t */\n\t    Tone.Frequency.mtof = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Frequency.ftom(440); // returns 69\n\t\t */\n\t    Tone.Frequency.ftom = function (frequency) {\n\t        return 69 + Math.round(12 * Math.log2(frequency / Tone.Frequency.A4));\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values.\n\t\t *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument.\n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//a quarter note\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    /**\n\t\t * Extend the base expressions\n\t\t */\n\t    Tone.Time.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t        'quantize': {\n\t            regexp: /^@(.+)/,\n\t            method: function (capture) {\n\t                if (Tone.Transport) {\n\t                    var quantTo = new this.constructor(capture);\n\t                    return Tone.Transport.nextSubdivision(quantTo);\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t        },\n\t        'now': {\n\t            regexp: /^\\+(.+)/,\n\t            method: function (capture) {\n\t                return this._now() + new this.constructor(capture);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage.\n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Number}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = Tone.defaultArg(percent, 1);\n\t        var subdivision = new this.constructor(subdiv);\n\t        var value = this.valueOf();\n\t        var multiple = Math.round(value / subdivision);\n\t        var ideal = multiple * subdivision;\n\t        var diff = ideal - value;\n\t        return value + diff * percent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. The notation values are will be the\n\t\t *  closest representation between 1m to 128th note.\n\t\t *  @return {Notation}\n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = ['1m'];\n\t        for (var power = 1; power < 8; power++) {\n\t            var subdiv = Math.pow(2, power);\n\t            testNotations.push(subdiv + 'n.');\n\t            testNotations.push(subdiv + 'n');\n\t            testNotations.push(subdiv + 't');\n\t        }\n\t        testNotations.push('0');\n\t        //find the closets notation representation\n\t        var closest = testNotations[0];\n\t        var closestSeconds = Tone.Time(testNotations[0]).toSeconds();\n\t        testNotations.forEach(function (notation) {\n\t            var notationSeconds = Tone.Time(notation).toSeconds();\n\t            if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t                closest = notation;\n\t                closestSeconds = notationSeconds;\n\t            }\n\t        });\n\t        return closest;\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        var measures = Math.floor(quarters / this._getTimeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._getTimeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            // the additional parseFloat removes insignificant trailing zeroes\n\t            sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.round(quarters * this._getPPQ());\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value as a midi note.\n\t\t *  @return  {Midi}\n\t\t */\n\t    Tone.Time.prototype.toMidi = function () {\n\t        return Tone.Frequency.ftom(this.toFrequency());\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    /**\n\t\t * Return the current time in whichever context is relevant\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.TransportTime.prototype._now = function () {\n\t        return Tone.Transport.seconds;\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /**\n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t\t *  \"the current time plus whatever expression follows\".\n\t\t\t *  * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t\t *  \"now\" (i.e. the currentTime).\n\t\t\t *\n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value.\n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /**\n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /**\n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /**\n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /**\n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t\t *  is twice is loud.\n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /**\n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /**\n\t\t\t *  Beats per minute.\n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /**\n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /**\n\t\t\t *  Gain is the ratio between input and output of a signal.\n\t\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t\t *  1, causes no change to the incoming signal.\n\t\t\t *  @typedef {Gain}\n\t\t\t */\n\t        Gain: 'gain',\n\t        /**\n\t\t\t *  A cent is a hundredth of a semitone.\n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /**\n\t\t\t *  Angle between 0 and 360.\n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /**\n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /**\n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths.\n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /**\n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second.\n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /**\n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /**\n\t\t\t *  A frequency represented by a letter name,\n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /**\n\t\t\t *  One millisecond is a thousandth of a second.\n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /**\n\t\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t\t *  all values need to be evaluated to seconds.\n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /**\n\t\t\t *  A string representing a duration relative to a measure.\n\t\t\t *  * \"4n\" = quarter note\n\t\t\t *  * \"2m\" = two measures\n\t\t\t *  * \"8t\" = eighth-note triplet\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *\n\t\t *  Unlike the method which it overrides, this takes into account\n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n or 1m or 2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time\n\t\t *  @return {Seconds}\n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (Tone.isNumber(time)) {\n\t            return time;\n\t        } else if (Tone.isUndef(time)) {\n\t            return this.now();\n\t        } else if (Tone.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq\n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (Tone.isNumber(freq)) {\n\t            return freq;\n\t        } else if (Tone.isString(freq) || Tone.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (Tone.isNumber(time) || Tone.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (Tone.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by\n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t * The timeline which tracks all of the automations.\n\t\t\t * @type {Tone.Timeline}\n\t\t\t * @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(1000);\n\t        if (Tone.isDefined(options.value) && this._param) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter.\n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            return this._toUnits(this.getValueAtTime(now));\n\t        },\n\t        set: function (value) {\n\t            this._initialValue = this._fromUnits(value);\n\t            this.cancelScheduledValues(this.context.currentTime);\n\t            this.setValueAtTime(value, this.context.currentTime);\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value of the parameter\n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'minValue', {\n\t        get: function () {\n\t            if (this.units === Tone.Type.Time || this.units === Tone.Type.Frequency || this.units === Tone.Type.NormalRange || this.units === Tone.Type.Positive || this.units === Tone.Type.BPM) {\n\t                return 0;\n\t            } else if (this.units === Tone.Type.AudioRange) {\n\t                return -1;\n\t            } else if (this.units === Tone.Type.Decibels) {\n\t                return -Infinity;\n\t            } else {\n\t                return this._param.minValue;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value of the parameter\n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'maxValue', {\n\t        get: function () {\n\t            if (this.units === Tone.Type.NormalRange || this.units === Tone.Type.AudioRange) {\n\t                return 1;\n\t            } else {\n\t                return this._param.maxValue;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if ((this.convert || Tone.isUndef(this.convert)) && !this.overridden) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return Tone.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || Tone.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return Tone.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  The event types\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.AutomationType = {\n\t        Linear: 'linearRampToValueAtTime',\n\t        Exponential: 'exponentialRampToValueAtTime',\n\t        Target: 'setTargetAtTime',\n\t        SetValue: 'setValueAtTime'\n\t    };\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        time = this.toSeconds(time);\n\t        value = this._fromUnits(value);\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.SetValue,\n\t            'value': value,\n\t            'time': time\n\t        });\n\t        this._param.setValueAtTime(value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the signals value at the given time. Subsequent scheduling\n\t\t *  may invalidate the returned value.\n\t\t *  @param {Time} time When to get the value\n\t\t *  @returns {Number} The value at the given time\n\t\t */\n\t    Tone.Param.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._events.getAfter(time);\n\t        var before = this._events.get(time);\n\t        var initialValue = Tone.defaultArg(this._initialValue, this._param.defaultValue);\n\t        var value = initialValue;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = initialValue;\n\t        } else if (before.type === Tone.Param.AutomationType.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previousVal;\n\t            if (previous === null) {\n\t                previousVal = initialValue;\n\t            } else {\n\t                previousVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.Param.AutomationType.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.Param.AutomationType.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to\n\t\t *  schedule changes from the current value.\n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in.\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentVal = this.getValueAtTime(time);\n\t        this.cancelAndHoldAtTime(time);\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this.setValueAtTime(this._toUnits(currentVal), time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the\n\t\t *  previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        endTime = this.toSeconds(endTime);\n\t        //store the event\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.Exponential,\n\t            'time': endTime,\n\t            'value': value\n\t        });\n\t        this._param.exponentialRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds.\n\t\t * signal.linearRampTo(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time. Since it\n\t\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t\t *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.targetRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time. Since it\n\t\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t\t *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods\n\t\t *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param {Time}\ttime \tWhen the ramp should start.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {\n\t        var timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t        time = this.toSeconds(time);\n\t        return this.setTargetAtTime(value, time, timeConstant);\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        if (timeConstant <= 0) {\n\t            throw new Error('timeConstant must be greater than 0');\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *\n\t\t *  @param {Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = Tone.defaultArg(scaling, 1);\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        this.setValueAtTime(values[0] * scaling, startTime);\n\t        var segTime = duration / (values.length - 1);\n\t        for (var i = 1; i < values.length; i++) {\n\t            this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *\n\t\t *  @param  {Time} time\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._events.cancel(time);\n\t        this._param.cancelScheduledValues(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t\t *  it holds the automated value at time until the next automated event.\n\t\t *  @param  {Time} time\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelAndHoldAtTime = function (time) {\n\t        var valueAtTime = this.getValueAtTime(time);\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._events.get(time);\n\t        var after = this._events.getAfter(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            if (after) {\n\t                this._events.cancel(after.time);\n\t            } else {\n\t                this._events.cancel(time + 0.000001);\n\t            }\n\t        } else if (after) {\n\t            //cancel the next event(s)\n\t            this._events.cancel(after.time);\n\t            if (!this._param.cancelAndHoldAtTime) {\n\t                this._param.cancelScheduledValues(time);\n\t            }\n\t            if (after.type === Tone.Param.AutomationType.Linear) {\n\t                if (!this._param.cancelAndHoldAtTime) {\n\t                    this.linearRampToValueAtTime(valueAtTime, time);\n\t                } else {\n\t                    this._events.add({\n\t                        'type': Tone.Param.AutomationType.Linear,\n\t                        'value': valueAtTime,\n\t                        'time': time\n\t                    });\n\t                }\n\t            } else if (after.type === Tone.Param.AutomationType.Exponential) {\n\t                if (!this._param.cancelAndHoldAtTime) {\n\t                    this.exponentialRampToValueAtTime(valueAtTime, time);\n\t                } else {\n\t                    this._events.add({\n\t                        'type': Tone.Param.AutomationType.Exponential,\n\t                        'value': valueAtTime,\n\t                        'time': time\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        //set the value at the given time\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.SetValue,\n\t            'value': valueAtTime,\n\t            'time': time\n\t        });\n\t        if (this._param.cancelAndHoldAtTime) {\n\t            this._param.cancelAndHoldAtTime(time);\n\t        } else {\n\t            this._param.setValueAtTime(valueAtTime, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime.\n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} rampTime \tThe time that it takes the\n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially\n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = Tone.defaultArg(rampTime, 0.1);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampTo(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampTo(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // Calculates the the value along the curve produced by setTargetAtTime\n\t    Tone.Param.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    // Calculates the the value along the curve produced by linearRampToValueAtTime\n\t    Tone.Param.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t    Tone.Param.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context}\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, {\n\t            'context': offlineContext,\n\t            'clockSource': 'offline',\n\t            'lookAhead': 0,\n\t            'updateInterval': 128 / sampleRate\n\t        });\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += this.blockTime;\n\t        }\n\t        return this._context.startRendering();\n\t    };\n\t    /**\n\t\t *  Close the context\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.close = function () {\n\t        this._context = null;\n\t        return Promise.resolve();\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported) {\n\t        var ua = navigator.userAgent.toLowerCase();\n\t        var isMobileSafari = ua.includes('safari') && !ua.includes('chrome') && ua.includes('mobile');\n\t        if (isMobileSafari) {\n\t            //mobile safari has a bizarre bug with the offline context\n\t            //when a BufferSourceNode is started, it starts the offline context\n\t            //\n\t            //deferring all BufferSource starts till the last possible moment\n\t            //reduces the likelihood of this happening\n\t            Tone.OfflineContext.prototype.createBufferSource = function () {\n\t                var bufferSource = this._context.createBufferSource();\n\t                var _native_start = bufferSource.start;\n\t                bufferSource.start = function (time) {\n\t                    this.setTimeout(function () {\n\t                        _native_start.call(bufferSource, time);\n\t                    }.bind(this), 0);\n\t                }.bind(this);\n\t                return bufferSource;\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains.\n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Gain}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported && !AudioContext.prototype.createConstantSource) {\n\t        var ConstantSourceNode = function (context) {\n\t            this.context = context;\n\t            var buffer = context.createBuffer(1, 128, context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = 1;\n\t            }\n\t            this._bufferSource = context.createBufferSource();\n\t            this._bufferSource.channelCount = 1;\n\t            this._bufferSource.channelCountMode = 'explicit';\n\t            this._bufferSource.buffer = buffer;\n\t            this._bufferSource.loop = true;\n\t            var gainNode = this._output = context.createGain();\n\t            this.offset = gainNode.gain;\n\t            this._bufferSource.connect(gainNode);\n\t        };\n\t        ConstantSourceNode.prototype.start = function (time) {\n\t            this._bufferSource.start(time);\n\t            return this;\n\t        };\n\t        ConstantSourceNode.prototype.stop = function (time) {\n\t            this._bufferSource.stop(time);\n\t            return this;\n\t        };\n\t        ConstantSourceNode.prototype.connect = function () {\n\t            this._output.connect.apply(this._output, arguments);\n\t            return this;\n\t        };\n\t        ConstantSourceNode.prototype.disconnect = function () {\n\t            this._output.disconnect.apply(this._output, arguments);\n\t            return this;\n\t        };\n\t        AudioContext.prototype.createConstantSource = function () {\n\t            return new ConstantSourceNode(this);\n\t        };\n\t        Tone.Context.prototype.createConstantSource = function () {\n\t            return new ConstantSourceNode(this);\n\t        };\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio\n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals\n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal.\n\t\t *  @param {string} [units=Number] unit The units the signal is in.\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal);\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t* When a signal is connected to another signal or audio param,\n\t\t\t* this signal becomes a proxy for it\n\t\t\t* @type {Array}\n\t\t\t* @private\n\t\t\t*/\n\t        this._proxies = [];\n\t        /**\n\t\t\t* Indicates if the constant source was started or not\n\t\t\t* @private\n\t\t\t* @type {Boolean}\n\t\t\t*/\n\t        this._sourceStarted = false;\n\t        /**\n\t\t\t * The constant source node which generates the signal\n\t\t\t * @type {ConstantSourceNode}\n\t\t\t * @private\n\t\t\t */\n\t        this._constantSource = this.context.createConstantSource();\n\t        this._param = this._constantSource.offset;\n\t        this.value = options.value;\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._constantSource;\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this.output.offset;\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.Signal} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = function (node) {\n\t        //this is an optimization where this node will forward automations\n\t        //to connected nodes without any signal if possible.\n\t        if (this._isParam(node) && !this._sourceStarted) {\n\t            this._proxies.push(node);\n\t            node.overridden = true;\n\t            this._applyAutomations(node);\n\t        } else {\n\t            Tone.SignalBase.prototype.connect.apply(this, arguments);\n\t            if (!this._sourceStarted) {\n\t                this._sourceStarted = true;\n\t                this._constantSource.start(0);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Takes a node as an argument and returns if it is a Param or AudioParam\n\t\t * @param  {*} node The node to test\n\t\t * @return {Boolean}\n\t\t * @private\n\t\t */\n\t    Tone.Signal.prototype._isParam = function (node) {\n\t        return Tone.Param && Tone.Param === node.constructor || node instanceof AudioParam;\n\t    };\n\t    /**\n\t\t * Discard the optimization and connect all of the proxies\n\t\t * @private\n\t\t */\n\t    Tone.Signal.prototype._connectProxies = function () {\n\t        if (!this._sourceStarted) {\n\t            this._sourceStarted = true;\n\t            this._constantSource.start(0);\n\t        }\n\t        this._proxies.forEach(function (proxy) {\n\t            Tone.SignalBase.prototype.connect.call(this, proxy);\n\t            if (proxy._proxies) {\n\t                proxy._connectProxies();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t * Invoked when a node is connected to this\n\t\t * @param  {AudioNode} from\n\t\t * @private\n\t\t */\n\t    Tone.Signal.prototype._onConnect = function (from) {\n\t        if (!this._isParam(from)) {\n\t            //connect all the proxies\n\t            this._connectProxies();\n\t        }\n\t    };\n\t    /**\n\t\t * Apply all the current automations to the given parameter\n\t\t * @param  {AudioParam} param\n\t\t * @private\n\t\t */\n\t    Tone.Signal.prototype._applyAutomations = function (param) {\n\t        var now = this.context.currentTime;\n\t        param.cancelScheduledValues(now);\n\t        var currentVal = this.getValueAtTime(now);\n\t        param.setValueAtTime(currentVal, now);\n\t        this._events.forEachFrom(now, function (event) {\n\t            param[event.type](event.value, event.time, event.constant);\n\t        });\n\t    };\n\t    /**\n\t\t * Disconnect from the given node or all nodes if no param is given.\n\t\t * @param  {AudioNode|AudioParam} node\n\t\t * @return {Tone.Signal}      this\n\t\t */\n\t    Tone.Signal.prototype.disconnect = function (node) {\n\t        if (this._proxies.includes(node)) {\n\t            var index = this._proxies.indexOf(node);\n\t            this._proxies.splice(index, 1);\n\t        } else if (!node) {\n\t            //no argument, disconnect everything\n\t            this._proxies = [];\n\t        }\n\t        return Tone.SignalBase.prototype.disconnect.apply(this, arguments);\n\t    };\n\t    /**\n\t\t * Return the current signal value at the given time.\n\t\t * @param  {Time} time When to get the signal value\n\t\t * @return {Number}\n\t\t */\n\t    Tone.Signal.prototype.getValueAtTime = function (time) {\n\t        if (this._param.getValueAtTime) {\n\t            return this._param.getValueAtTime(time);\n\t        } else {\n\t            return Tone.Param.prototype.getValueAtTime.call(this, time);\n\t        }\n\t    };\n\t    //wrap all of the automation methods\n\t    [\n\t        'setValueAtTime',\n\t        'linearRampToValueAtTime',\n\t        'exponentialRampToValueAtTime',\n\t        'setTargetAtTime'\n\t    ].forEach(function (method) {\n\t        var previousMethod = Tone.Signal.prototype[method];\n\t        Tone.Signal.prototype[method] = function () {\n\t            var args = arguments;\n\t            previousMethod.apply(this, arguments);\n\t            args[0] = this._fromUnits(args[0]);\n\t            args[1] = this.toSeconds(args[1]);\n\t            //apply it to the proxies\n\t            this._proxies.forEach(function (signal) {\n\t                signal[method].apply(signal, args);\n\t            });\n\t        };\n\t    });\n\t    [\n\t        'cancelScheduledValues',\n\t        'cancelAndHoldAtTime'\n\t    ].forEach(function (method) {\n\t        var previousMethod = Tone.Signal.prototype[method];\n\t        Tone.Signal.prototype[method] = function () {\n\t            var args = arguments;\n\t            previousMethod.apply(this, arguments);\n\t            args[0] = this.toSeconds(args[0]);\n\t            //apply it to the proxies\n\t            this._proxies.forEach(function (signal) {\n\t                signal[method].apply(signal, args);\n\t            });\n\t        };\n\t    });\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._constantSource.disconnect();\n\t        this._constantSource = null;\n\t        this._proxies = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = Tone.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which\n\t\t *          can be connected to an AudioParam or Tone.Signal.\n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from\n\t\t *                         0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value\n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked.\n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.Signal(0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for\n\t\t * syncronizing visual output to the envelope.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack.\n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (Tone.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (Tone.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope.\n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = Tone.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampTo(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.targetRampTo(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.cancelAndHoldAtTime(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        if (decay) {\n\t            this._sig.targetRampTo(velocity * this.sustain, decay, attack + time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampTo(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.targetRampTo(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (Tone.isArray(curve)) {\n\t                    this._sig.cancelAndHoldAtTime(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease.\n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal.\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves.\n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from\n\t\t *                               0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (Tone.supported) {\n\t        if (!AnalyserNode.prototype.getFloatTimeDomainData) {\n\t            //referenced https://github.com/mohayonao/get-float-time-domain-data\n\t            AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t                var uint8 = new Uint8Array(array.length);\n\t                this.getByteTimeDomainData(uint8);\n\t                for (var i = 0; i < uint8.length; i++) {\n\t                    array[i] = (uint8[i] - 128) / 128;\n\t                }\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's\n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\".\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.Analyser, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'type': 'fft',\n\t        'smoothing': 0.8\n\t    };\n\t    /**\n\t\t *  Possible return types of analyser.getValue()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the\n\t\t *  result as a TypedArray.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.getValue = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            this._analyser.getFloatFrequencyData(this._buffer);\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            this._analyser.getFloatTimeDomainData(this._buffer);\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this._buffer = new Float32Array(size);\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio\n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds\n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range.\n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor,\n\t\t *          multiplies the incoming signal by that value.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20.\n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this.value = Tone.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return Tone.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs.\n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone.AudioNode}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally.\n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and\n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(Tone.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._one = this.context.getConstant(1);\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t */\n\t        this._invert = new Tone.Subtract();\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this._one.connect(this._invert, 0, 0);\n\t        this.fade.connect(this._invert, 0, 1);\n\t        this._invert.chain(this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this._one = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12\n\t\t *          (default), -24 and -48.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            Tone.connectSeries.apply(Tone, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit, Tone.AudioNode);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *\n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3, Tone.AudioNode);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = Tone.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = Tone.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0.\n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1.\n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(Tone.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and\n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when\n\t\t * the value input value is 0.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when\n\t\t * the value input value is 1.\n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time.\n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t * The maximum delay time initialized with the node\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this._maxDelay);\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t * The maximum delay time. This cannot be changed. The value is passed into the constructor.\n\t\t * @memberof Tone.Delay#\n\t\t * @type {Time}\n\t\t * @name maxDelay\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Delay.prototype, 'maxDelay', {\n\t        get: function () {\n\t            return this._maxDelay;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter.\n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has.\n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.FFT = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.FFT);\n\t        options.type = Tone.Analyser.Type.FFT;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.FFT, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FFT.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.FFT.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.FFT#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.FFT.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.FFT}  this\n\t\t */\n\t    Tone.FFT.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.FFT;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1.\n\t\t */\n\t    Tone.Abs = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 1024);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow\n\t\t *          the amplitude of an incoming signal.\n\t\t *          Take care with small (< 0.02) attack or decay values\n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known\n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls.\n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack\n\t\t *  @param   {Time} release\n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled\n\t\t *         to any range. It's useful for applying an envelope\n\t\t *         to a frequency or any other non-NormalRange signal\n\t\t *         parameter.\n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.Envelope.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /**\n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at.\n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope.\n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value.\n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter.\n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var freqEnv = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  freqEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        //merge it with the frequency envelope defaults\n\t        options = Tone.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1.\n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0.\n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1.\n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming\n\t\t *          signal exceeds a specified threshold. To do this, Gate uses\n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal.\n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.\n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming\n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(Tone.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return Tone.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = Tone.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TickSignal extends Tone.Signal, but adds the capability\n\t\t *        to calculate the number of elapsed ticks. exponential and target curves\n\t\t *        are approximated with multiple linear ramps.\n\t\t *\n\t\t *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n\t\t *        describing integrating timing functions for tempo calculations.\n\t\t *\n\t\t * @param {Number} value The initial value of the signal\n\t\t * @extends {Tone.Signal}\n\t\t */\n\t    Tone.TickSignal = function (value) {\n\t        value = Tone.defaultArg(value, 1);\n\t        Tone.Signal.call(this, {\n\t            'units': Tone.Type.Ticks,\n\t            'value': value\n\t        });\n\t        //extend the memory\n\t        this._events.memory = Infinity;\n\t        //clear the clock from the beginning\n\t        this.cancelScheduledValues(0);\n\t        //set an initial event\n\t        this._events.add({\n\t            'type': Tone.Param.AutomationType.SetValue,\n\t            'time': 0,\n\t            'value': value\n\t        });\n\t    };\n\t    Tone.extend(Tone.TickSignal, Tone.Signal);\n\t    /**\n\t\t * Wraps Tone.Signal methods so that they also\n\t\t * record the ticks.\n\t\t * @param  {Function} method\n\t\t * @return {Function}\n\t\t * @private\n\t\t */\n\t    function _wrapScheduleMethods(method) {\n\t        return function (value, time) {\n\t            time = this.toSeconds(time);\n\t            method.apply(this, arguments);\n\t            var event = this._events.get(time);\n\t            var previousEvent = this._events.previousEvent(event);\n\t            var ticksUntilTime = this._getTicksUntilEvent(previousEvent, time);\n\t            event.ticks = Math.max(ticksUntilTime, 0);\n\t            return this;\n\t        };\n\t    }\n\t    Tone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.setValueAtTime);\n\t    Tone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.linearRampToValueAtTime);\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        this.setRampPoint(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        var segments = Math.round(Math.max(1 / constant, 1));\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = constant * i + time;\n\t            var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        if (prevEvent === null) {\n\t            prevEvent = {\n\t                'value': this._initialValue,\n\t                'time': 0\n\t            };\n\t        }\n\t        //approx 10 segments per second\n\t        var segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t        var segmentDur = (time - prevEvent.time) / segments;\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = segmentDur * i + prevEvent.time;\n\t            var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @private\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype._getTicksUntilEvent = function (event, time) {\n\t        if (event === null) {\n\t            event = {\n\t                'ticks': 0,\n\t                'time': 0\n\t            };\n\t        } else if (Tone.isUndef(event.ticks)) {\n\t            var previousEvent = this._events.previousEvent(event);\n\t            event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t        }\n\t        var val0 = this.getValueAtTime(event.time);\n\t        var val1 = this.getValueAtTime(time);\n\t        //if it's right on the line, take the previous value\n\t        if (this._events.get(time).time === time && this._events.get(time).type === Tone.Param.AutomationType.SetValue) {\n\t            val1 = this.getValueAtTime(time - this.sampleTime);\n\t        }\n\t        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype.getTicksAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var event = this._events.get(time);\n\t        return Math.max(this._getTicksUntilEvent(event, time), 0);\n\t    };\n\t    /**\n\t\t * Return the elapsed time of the number of ticks from the given time\n\t\t * @param {Ticks} ticks The number of ticks to calculate\n\t\t * @param  {Time} time The time to get the next tick from\n\t\t * @return {Seconds} The duration of the number of ticks from the given time in seconds\n\t\t */\n\t    Tone.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n\t        time = this.toSeconds(time);\n\t        var currentTick = this.getTicksAtTime(time);\n\t        return this.getTimeOfTick(currentTick + ticks) - time;\n\t    };\n\t    /**\n\t\t * Given a tick, returns the time that tick occurs at.\n\t\t * @param  {Ticks} tick\n\t\t * @return {Time}      The time that the tick occurs.\n\t\t */\n\t    Tone.TickSignal.prototype.getTimeOfTick = function (tick) {\n\t        var before = this._events.get(tick, 'ticks');\n\t        var after = this._events.getAfter(tick, 'ticks');\n\t        if (before && before.ticks === tick) {\n\t            return before.time;\n\t        } else if (before && after && after.type === Tone.Param.AutomationType.Linear && before.value !== after.value) {\n\t            var val0 = this.getValueAtTime(before.time);\n\t            var val1 = this.getValueAtTime(after.time);\n\t            var delta = (val1 - val0) / (after.time - before.time);\n\t            var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t            var sol1 = (-val0 + k) / delta;\n\t            var sol2 = (-val0 - k) / delta;\n\t            return (sol1 > 0 ? sol1 : sol2) + before.time;\n\t        } else if (before) {\n\t            if (before.value === 0) {\n\t                return Infinity;\n\t            } else {\n\t                return before.time + (tick - before.ticks) / before.value;\n\t            }\n\t        } else {\n\t            return tick / this._initialValue;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert some number of ticks their the duration in seconds accounting\n\t\t * for any automation curves starting at the given time.\n\t\t * @param  {Ticks} ticks The number of ticks to convert to seconds.\n\t\t * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.\n\t\t * @return {Tone.Time}       The duration in seconds of the ticks.\n\t\t */\n\t    Tone.TickSignal.prototype.ticksToTime = function (ticks, when) {\n\t        when = this.toSeconds(when);\n\t        return new Tone.Time(this.getDurationOfTicks(ticks, when));\n\t    };\n\t    /**\n\t\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t\t * seconds to the corresponding number of ticks accounting for any\n\t\t * automation curves starting at the given time.\n\t\t * @param  {Time} duration The time interval to convert to ticks.\n\t\t * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.\n\t\t * @return {Tone.Ticks}          The duration in ticks.\n\t\t */\n\t    Tone.TickSignal.prototype.timeToTicks = function (duration, when) {\n\t        when = this.toSeconds(when);\n\t        duration = this.toSeconds(duration);\n\t        var startTicks = this.getTicksAtTime(when);\n\t        var endTicks = this.getTicksAtTime(when + duration);\n\t        return new Tone.Ticks(endTicks - startTicks);\n\t    };\n\t    return Tone.TickSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a state to the timeline.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.TimelineState} this\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        //all state changes need to be >= the previous state time\n\t        //TODO throw error if time < the previous event time\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return the event before the time with the given state\n\t\t *  @param {Tone.State} state The state to look for\n\t\t *  @param  {Time}  time  When to check before\t\t\t\n\t\t *  @return  {Object}  The event with the given state before the time\n\t\t */\n\t    Tone.TimelineState.prototype.getLastState = function (state, time) {\n\t        time = this.toSeconds(time);\n\t        var index = this._search(time);\n\t        for (var i = index; i >= 0; i--) {\n\t            var event = this._timeline[i];\n\t            if (event.state === state) {\n\t                return event;\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the event after the time with the given state\n\t\t *  @param {Tone.State} state The state to look for\n\t\t *  @param  {Time}  time  When to check from\n\t\t *  @return  {Object}  The event with the given state after the time\n\t\t */\n\t    Tone.TimelineState.prototype.getNextState = function (state, time) {\n\t        time = this.toSeconds(time);\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            for (var i = index; i < this._timeline.length; i++) {\n\t                var event = this._timeline[i];\n\t                if (event.state === state) {\n\t                    return event;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with\n\t\t *  \t\tcomplex automation curves.\n\t\t *\n\t\t * \t@constructor\n\t     *  @param {Frequency} frequency The initial frequency that the signal ticks at\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.TickSource = function () {\n\t        var options = Tone.defaults(arguments, ['frequency'], Tone.TickSource);\n\t        /**\n\t\t\t *  The frequency the callback function should be invoked.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TickSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.setStateAtTime(Tone.State.Stopped, 0);\n\t        /**\n\t\t\t * The offset values of the ticks\n\t\t\t * @type {Tone.Timeline}\n\t\t\t * @private\n\t\t\t */\n\t        this._tickOffset = new Tone.Timeline();\n\t        //add the first event\n\t        this.setTicksAtTime(0, 0);\n\t    };\n\t    Tone.extend(Tone.TickSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TickSource.defaults = { 'frequency': 1 };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.TickSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.TickSource.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time=}  time    The time the clock should start\n\t\t *  @param {Ticks=0} offset The number of ticks to start the source at\n\t\t *  @return  {Tone.TickSource}  this\n\t\t */\n\t    Tone.TickSource.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            if (Tone.isDefined(offset)) {\n\t                this.setTicksAtTime(offset, time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.TickSource} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.TickSource.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        //cancel the previous stop\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            var event = this._state.get(time);\n\t            if (event.time > 0) {\n\t                this._tickOffset.cancel(event.time);\n\t                this._state.cancel(event.time);\n\t            }\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        this.setTicksAtTime(0, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.TickSource} this\n\t\t */\n\t    Tone.TickSource.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t\t *  @param {Time} [time=now] When to clear the events after\n\t\t *  @returns {Tone.TickSource} this\n\t\t */\n\t    Tone.TickSource.prototype.cancel = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._tickOffset.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Get the elapsed ticks at the given time\n\t\t * @param  {Time} time  When to get the tick value\n\t\t * @return {Ticks}     The number of ticks\n\t\t */\n\t    Tone.TickSource.prototype.getTicksAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var stopEvent = this._state.getLastState(Tone.State.Stopped, time);\n\t        //this event allows forEachBetween to iterate until the current time\n\t        var tmpEvent = {\n\t            state: Tone.State.Paused,\n\t            time: time\n\t        };\n\t        this._state.add(tmpEvent);\n\t        //keep track of the previous offset event\n\t        var lastState = stopEvent;\n\t        var elapsedTicks = 0;\n\t        //iterate through all the events since the last stop\n\t        this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {\n\t            var periodStartTime = lastState.time;\n\t            //if there is an offset event in this period use that\n\t            var offsetEvent = this._tickOffset.get(e.time);\n\t            if (offsetEvent.time >= lastState.time) {\n\t                elapsedTicks = offsetEvent.ticks;\n\t                periodStartTime = offsetEvent.time;\n\t            }\n\t            if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {\n\t                elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t            }\n\t            lastState = e;\n\t        }.bind(this));\n\t        //remove the temporary event\n\t        this._state.remove(tmpEvent);\n\t        //return the ticks\n\t        return elapsedTicks;\n\t    };\n\t    /**\n\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t\t *  @memberOf Tone.TickSource#\n\t\t *  @name ticks\n\t\t *  @type {Ticks}\n\t\t */\n\t    Object.defineProperty(Tone.TickSource.prototype, 'ticks', {\n\t        get: function () {\n\t            return this.getTicksAtTime(this.now());\n\t        },\n\t        set: function (t) {\n\t            this.setTicksAtTime(t, this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t\t *  for tempo curves\n\t\t *  @memberOf Tone.TickSource#\n\t\t *  @name seconds\n\t\t *  @type {Seconds}\n\t\t */\n\t    Object.defineProperty(Tone.TickSource.prototype, 'seconds', {\n\t        get: function () {\n\t            return this.getSecondsAtTime(this.now());\n\t        },\n\t        set: function (s) {\n\t            var now = this.now();\n\t            var ticks = this.frequency.timeToTicks(s, now);\n\t            this.setTicksAtTime(ticks, now);\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the elapsed seconds at the given time.\n\t\t *  @param  {Time}  time  When to get the elapsed seconds\n\t\t *  @return  {Seconds}  The number of elapsed seconds\n\t\t */\n\t    Tone.TickSource.prototype.getSecondsAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var stopEvent = this._state.getLastState(Tone.State.Stopped, time);\n\t        //this event allows forEachBetween to iterate until the current time\n\t        var tmpEvent = {\n\t            state: Tone.State.Paused,\n\t            time: time\n\t        };\n\t        this._state.add(tmpEvent);\n\t        //keep track of the previous offset event\n\t        var lastState = stopEvent;\n\t        var elapsedSeconds = 0;\n\t        //iterate through all the events since the last stop\n\t        this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {\n\t            var periodStartTime = lastState.time;\n\t            //if there is an offset event in this period use that\n\t            var offsetEvent = this._tickOffset.get(e.time);\n\t            if (offsetEvent.time >= lastState.time) {\n\t                elapsedSeconds = offsetEvent.seconds;\n\t                periodStartTime = offsetEvent.time;\n\t            }\n\t            if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {\n\t                elapsedSeconds += e.time - periodStartTime;\n\t            }\n\t            lastState = e;\n\t        }.bind(this));\n\t        //remove the temporary event\n\t        this._state.remove(tmpEvent);\n\t        //return the ticks\n\t        return elapsedSeconds;\n\t    };\n\t    /**\n\t\t * Set the clock's ticks at the given time.\n\t\t * @param  {Ticks} ticks The tick value to set\n\t\t * @param  {Time} time  When to set the tick value\n\t\t * @return {Tone.TickSource}       this\n\t\t */\n\t    Tone.TickSource.prototype.setTicksAtTime = function (ticks, time) {\n\t        time = this.toSeconds(time);\n\t        this._tickOffset.cancel(time);\n\t        this._tickOffset.add({\n\t            'time': time,\n\t            'ticks': ticks,\n\t            'seconds': this.frequency.getDurationOfTicks(ticks, time)\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * source.start(\"+0.1\");\n\t\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.TickSource.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t * Get the time of the given tick. The second argument\n\t\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t\t * there may be multiple times for a given tick value. \n\t\t * @param  {Ticks} ticks The tick number.\n\t\t * @param  {Time=} before When to measure the tick value from. \n\t\t * @return {Time}       The time of the tick\n\t\t */\n\t    Tone.TickSource.prototype.getTimeOfTick = function (tick, before) {\n\t        before = Tone.defaultArg(before, this.now());\n\t        var offset = this._tickOffset.get(before);\n\t        var event = this._state.get(before);\n\t        var startTime = Math.max(offset.time, event.time);\n\t        var absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t        return this.frequency.getTimeOfTick(absoluteTicks);\n\t    };\n\t    /**\n\t\t *  Invoke the callback event at all scheduled ticks between the \n\t\t *  start time and the end time\n\t\t *  @param  {Time}    startTime  The beginning of the search range\n\t\t *  @param  {Time}    endTime    The end of the search range\n\t\t *  @param  {Function<Time,Ticks>}  callback   The callback to invoke with each tick\n\t\t *  @return  {Tone.TickSource}    this\n\t\t */\n\t    Tone.TickSource.prototype.forEachTickBetween = function (startTime, endTime, callback) {\n\t        //only iterate through the sections where it is \"started\"\n\t        var lastStateEvent = this._state.get(startTime);\n\t        this._state.forEachBetween(startTime, endTime, function (event) {\n\t            if (lastStateEvent.state === Tone.State.Started && event.state !== Tone.State.Started) {\n\t                this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t            }\n\t            lastStateEvent = event;\n\t        }.bind(this));\n\t        startTime = Math.max(lastStateEvent.time, startTime);\n\t        if (lastStateEvent.state === Tone.State.Started && this._state) {\n\t            //figure out the difference between the frequency ticks and the \n\t            var startTicks = this.frequency.getTicksAtTime(startTime);\n\t            var ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t            var diff = startTicks - ticksAtStart;\n\t            var offset = diff % 1;\n\t            if (offset !== 0) {\n\t                offset = 1 - offset;\n\t            }\n\t            var nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t            var error = null;\n\t            while (nextTickTime < endTime && this._state) {\n\t                try {\n\t                    callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t                } catch (e) {\n\t                    error = e;\n\t                    break;\n\t                }\n\t                if (this._state) {\n\t                    nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t                }\n\t            }\n\t        }\n\t        if (error) {\n\t            throw error;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.TickSource} this\n\t\t */\n\t    Tone.TickSource.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this._tickOffset.dispose();\n\t        this._tickOffset = null;\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.TickSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate.\n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock);\n\t        Tone.Emitter.call(this);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The tick counter\n\t\t\t *  @type  {Tone.TickSource}\n\t\t\t *  @private\n\t\t\t */\n\t        this._tickSource = new Tone.TickSource(options.frequency);\n\t        /**\n\t\t\t *  The last time the loop callback was invoked\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._lastUpdate = 0;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked.\n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._tickSource.frequency;\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        //add an initial state\n\t        this._state.setStateAtTime(Tone.State.Stopped, 0);\n\t        /**\n\t\t\t *  The loop function bound to its context.\n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time=}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            this._tickSource.start(time, offset);\n\t            if (time < this._lastUpdate) {\n\t                this.emit('start', time, offset);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        this._tickSource.stop(time);\n\t        if (time < this._lastUpdate) {\n\t            this.emit('stop', time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t            this._tickSource.pause(time);\n\t            if (time < this._lastUpdate) {\n\t                this.emit('pause', time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t *  and increments after the callback was invoked.\n\t\t *  @type {Ticks}\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'ticks', {\n\t        get: function () {\n\t            return Math.ceil(this.getTicksAtTime(this.now()));\n\t        },\n\t        set: function (t) {\n\t            this._tickSource.ticks = t;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time since ticks=0 that the Clock has been running. Accounts\n\t\t *  for tempo curves\n\t\t *  @type {Seconds}\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'seconds', {\n\t        get: function () {\n\t            return this._tickSource.seconds;\n\t        },\n\t        set: function (s) {\n\t            this._tickSource.seconds = s;\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the elapsed seconds at the given time.\n\t\t *  @param  {Time}  time  When to get the elapsed seconds\n\t\t *  @return  {Seconds}  The number of elapsed seconds\n\t\t */\n\t    Tone.Clock.prototype.getSecondsAtTime = function (time) {\n\t        return this._tickSource.getSecondsAtTime(time);\n\t    };\n\t    /**\n\t\t * Set the clock's ticks at the given time.\n\t\t * @param  {Ticks} ticks The tick value to set\n\t\t * @param  {Time} time  When to set the tick value\n\t\t * @return {Tone.Clock}       this\n\t\t */\n\t    Tone.Clock.prototype.setTicksAtTime = function (ticks, time) {\n\t        this._tickSource.setTicksAtTime(ticks, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Get the clock's ticks at the given time.\n\t\t * @param  {Time} time  When to get the tick value\n\t\t * @return {Ticks}       The tick value at the given time.\n\t\t */\n\t    Tone.Clock.prototype.getTicksAtTime = function (time) {\n\t        return this._tickSource.getTicksAtTime(time);\n\t    };\n\t    /**\n\t\t * Get the time of the next tick\n\t\t * @param  {Ticks} ticks The tick number.\n\t\t * @param  {Time} before \n\t\t * @return {Tone.Clock}       this\n\t\t */\n\t    Tone.Clock.prototype.nextTickTime = function (offset, when) {\n\t        when = this.toSeconds(when);\n\t        var currentTick = this.getTicksAtTime(when);\n\t        return this._tickSource.getTimeOfTick(currentTick + offset, when);\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        var startTime = this._lastUpdate;\n\t        var endTime = this.now();\n\t        this._lastUpdate = endTime;\n\t        if (startTime !== endTime) {\n\t            //the state change events\n\t            this._state.forEachBetween(startTime, endTime, function (e) {\n\t                switch (e.state) {\n\t                case Tone.State.Started:\n\t                    var offset = this._tickSource.getTicksAtTime(e.time);\n\t                    this.emit('start', e.time, offset);\n\t                    break;\n\t                case Tone.State.Stopped:\n\t                    if (e.time !== 0) {\n\t                        this.emit('stop', e.time);\n\t                    }\n\t                    break;\n\t                case Tone.State.Paused:\n\t                    this.emit('pause', e.time);\n\t                    break;\n\t                }\n\t            }.bind(this));\n\t            //the tick callbacks\n\t            this._tickSource.forEachTickBetween(startTime, endTime, function (time, ticks) {\n\t                this.callback(time, ticks);\n\t            }.bind(this));\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this._tickSource.dispose();\n\t        this._tickSource = null;\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The\n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must\n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (Tone.isUndef(event.time) || Tone.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        event.time = event.time.valueOf();\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachFrom(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @param  {IntervalNode}  replacement\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with\n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else if (node.right.left === null) {\n\t                replacement = node.right;\n\t                replacement.left = node.left;\n\t                temp = replacement;\n\t            } else {\n\t                replacement = node.right.left;\n\t                while (replacement.left !== null) {\n\t                    replacement = replacement.left;\n\t                }\n\t                replacement.parent = replacement.parent;\n\t                replacement.parent.left = replacement.right;\n\t                temp = replacement.parent;\n\t                replacement.left = node.left;\n\t                replacement.right = node.right;\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than or equal to the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachFrom = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                callback(ev);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children.\n\t\t *  References:\n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /**\n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else if (this.right === null) {\n\t            this.right = node;\n\t        } else {\n\t            this.right.insert(node);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap\n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less\n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Ticks is a primitive type for encoding Time values.\n\t\t *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed\n\t\t *         into the parameter of any method which takes time as an argument.\n\t\t *  @constructor\n\t\t *  @extends {Tone.TransportTime}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Ticks(\"4n\");//a quarter note\n\t\t */\n\t    Tone.Ticks = function (val, units) {\n\t        if (this instanceof Tone.Ticks) {\n\t            Tone.TransportTime.call(this, val, units);\n\t        } else {\n\t            return new Tone.Ticks(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Ticks, Tone.TransportTime);\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Ticks.prototype._defaultUnits = 'i';\n\t    /**\n\t\t * Get the current time in the given units\n\t\t * @return {Ticks}\n\t\t * @private\n\t\t */\n\t    Tone.Ticks.prototype._now = function () {\n\t        return Tone.Transport.ticks;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Ticks.prototype._beatsToUnits = function (beats) {\n\t        return this._getPPQ() * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Ticks.prototype._secondsToUnits = function (seconds) {\n\t        return seconds / (60 / this._getBpm()) * this._getPPQ();\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Ticks.prototype._ticksToUnits = function (ticks) {\n\t        return ticks;\n\t    };\n\t    /**\n\t\t *  Return the time in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Ticks.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Ticks.prototype.toSeconds = function () {\n\t        return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n\t    };\n\t    return Tone.Ticks;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]\n\t\t *         to schedule events. Do no invoke this class directly, it is\n\t\t *         handled from within Tone.Transport.\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportEvent = function (Transport, options) {\n\t        options = Tone.defaultArg(options, Tone.TransportEvent.defaults);\n\t        Tone.call(this);\n\t        /**\n\t\t\t * Reference to the Transport that created it\n\t\t\t * @type {Tone.Transport}\n\t\t\t */\n\t        this.Transport = Transport;\n\t        /**\n\t\t\t * The unique id of the event\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this.id = Tone.TransportEvent._eventId++;\n\t        /**\n\t\t\t * The time the event starts\n\t\t\t * @type {Ticks}\n\t\t\t */\n\t        this.time = Tone.Ticks(options.time);\n\t        /**\n\t\t\t * The callback to invoke\n\t\t\t * @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t * If the event should be removed after being created.\n\t\t\t * @type {Boolean}\n\t\t\t * @private\n\t\t\t */\n\t        this._once = options.once;\n\t    };\n\t    Tone.extend(Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportEvent.defaults = {\n\t        'once': false,\n\t        'callback': Tone.noOp\n\t    };\n\t    /**\n\t\t * Current ID counter\n\t\t * @private\n\t\t * @static\n\t\t * @type {Number}\n\t\t */\n\t    Tone.TransportEvent._eventId = 0;\n\t    /**\n\t\t * Invoke the event callback.\n\t\t * @param  {Time} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportEvent.prototype.invoke = function (time) {\n\t        if (this.callback) {\n\t            this.callback(time);\n\t            if (this._once && this.Transport) {\n\t                this.Transport.clear(this.id);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportEvent} this\n\t\t */\n\t    Tone.TransportEvent.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.Transport = null;\n\t        this.callback = null;\n\t        this.time = null;\n\t        return this;\n\t    };\n\t    return Tone.TransportEvent;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport\n\t\t *         to schedule repeat events. This class should not be instantiated directly.\n\t\t *  @extends {Tone.TransportEvent}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportRepeatEvent = function (Transport, options) {\n\t        Tone.TransportEvent.call(this, Transport, options);\n\t        options = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);\n\t        /**\n\t\t\t * When the event should stop repeating\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this.duration = Tone.Ticks(options.duration);\n\t        /**\n\t\t\t * The interval of the repeated event\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this._interval = Tone.Ticks(options.interval);\n\t        /**\n\t\t\t * The ID of the current timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._currentId = -1;\n\t        /**\n\t\t\t * The ID of the next timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._nextId = -1;\n\t        /**\n\t\t\t  * The time of the next event\n\t\t\t  * @type {Ticks}\n\t\t\t  * @private\n\t\t\t  */\n\t        this._nextTick = this.time;\n\t        /**\n\t\t\t * a reference to the bound start method\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._boundRestart = this._restart.bind(this);\n\t        this.Transport.on('start loopStart', this._boundRestart);\n\t        this._restart();\n\t    };\n\t    Tone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportRepeatEvent.defaults = {\n\t        'duration': Infinity,\n\t        'interval': 1\n\t    };\n\t    /**\n\t\t * Invoke the callback. Returns the tick time which\n\t\t * the next event should be scheduled at.\n\t\t * @param  {Number} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.invoke = function (time) {\n\t        //create more events if necessary\n\t        this._createEvents(time);\n\t        //call the super class\n\t        Tone.TransportEvent.prototype.invoke.call(this, time);\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._createEvents = function (time) {\n\t        // schedule the next event\n\t        var ticks = this.Transport.getTicksAtTime(time);\n\t        if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t            this._nextTick += this._interval;\n\t            this._currentId = this._nextId;\n\t            this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t        }\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._restart = function (time) {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        this._nextTick = this.time;\n\t        var ticks = this.Transport.getTicksAtTime(time);\n\t        if (ticks > this.time) {\n\t            this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t        }\n\t        this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t        this._nextTick += this._interval;\n\t        this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportRepeatEvent} this\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.dispose = function () {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        this.Transport.off('start loopStart', this._boundRestart);\n\t        this._boundCreateEvents = null;\n\t        Tone.TransportEvent.prototype.dispose.call(this);\n\t        this.duration = null;\n\t        this._interval = null;\n\t        return this;\n\t    };\n\t    return Tone.TransportRepeatEvent;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized.\n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument.\n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        Tone.getContext(function () {\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tLOOPING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t * \tIf the transport loops or not.\n\t\t\t\t *  @type {boolean}\n\t\t\t\t */\n\t            this.loop = false;\n\t            /**\n\t\t\t\t * \tThe loop start position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopStart = 0;\n\t            /**\n\t\t\t\t * \tThe loop end position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopEnd = 0;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tCLOCK/TEMPO\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t            this._ppq = TransportConstructor.defaults.PPQ;\n\t            /**\n\t\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t\t *  initially starts at 120bpm\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Clock}\n\t\t\t\t */\n\t            this._clock = new Tone.Clock({\n\t                'callback': this._processTick.bind(this),\n\t                'frequency': 0\n\t            });\n\t            this._bindClockEvents();\n\t            /**\n\t\t\t\t *  The Beats Per Minute of the Transport.\n\t\t\t\t *  @type {BPM}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t\t */\n\t            this.bpm = this._clock.frequency;\n\t            this.bpm._toUnits = this._toUnits.bind(this);\n\t            this.bpm._fromUnits = this._fromUnits.bind(this);\n\t            this.bpm.units = Tone.Type.BPM;\n\t            this.bpm.value = TransportConstructor.defaults.bpm;\n\t            this._readOnly('bpm');\n\t            /**\n\t\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t\t *  of the time signature over a denominator of 4.\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tTIMELINE EVENTS\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  All the events in an object to keep track by ID\n\t\t\t\t *  @type {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._scheduledEvents = {};\n\t            /**\n\t\t\t\t * \tThe scheduled events.\n\t\t\t\t *  @type {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeline = new Tone.Timeline();\n\t            /**\n\t\t\t\t *  Repeated events\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._repeatedEvents = new Tone.IntervalTimeline();\n\t            /**\n\t\t\t\t *  All of the synced Signals\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t            this._syncedSignals = [];\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tSWING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  The subdivision of the swing\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t            //8n\n\t            /**\n\t\t\t\t *  The swing amount\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingAmount = 0;\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime, ticks) {\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Ticks(this._swingTicks * 2 / 3).toSeconds() * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks >= this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.setTicksAtTime(this._loopStart, tickTime);\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this._clock.getSecondsAtTime(tickTime));\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //invoke the timeline events scheduled on this tick\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.invoke(tickTime);\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event.\n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': Tone.TransportTime(time),\n\t            'callback': callback\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`.\n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks. Must be a positive number.\n\t\t *  @param  {TransportTime=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat.\n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event.\n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        var event = new Tone.TransportRepeatEvent(this, {\n\t            'callback': callback,\n\t            'interval': Tone.Time(interval),\n\t            'time': Tone.TransportTime(startTime),\n\t            'duration': Tone.Time(Tone.defaultArg(duration, Infinity))\n\t        });\n\t        //kick it off if the Transport is started\n\t        return this._addEvent(event, this._repeatedEvents);\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked.\n\t\t *  Note that if the given time is less than the current transport time,\n\t\t *  the event will be invoked immediately.\n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event.\n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': Tone.TransportTime(time),\n\t            'callback': callback,\n\t            'once': true\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            item.event.dispose();\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Add an event to the correct timeline. Keep track of the\n\t\t * timeline it was added to.\n\t\t * @param {Tone.TransportEvent}\tevent\n\t\t * @param {Tone.Timeline} timeline\n\t\t * @returns {Number} the event id which was just added\n\t\t * @private\n\t\t */\n\t    Tone.Transport.prototype._addEvent = function (event, timeline) {\n\t        this._scheduledEvents[event.id.toString()] = {\n\t            'event': event,\n\t            'timeline': timeline\n\t        };\n\t        timeline.add(event);\n\t        return event.id;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = Tone.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.forEachFrom(after, function (event) {\n\t            this.clear(event.id);\n\t        }.bind(this));\n\t        this._repeatedEvents.forEachFrom(after, function (event) {\n\t            this.clear(event.id);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Ticks(offset).toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure.\n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (Tone.isDefined(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Toggle the current state of the transport. If it is\n\t\t * started, it will stop it, otherwise it will start the Transport.\n\t\t * @param  {Time=} time The time of the event\n\t\t * @return {Tone.Transport}      this\n\t\t */\n\t    Tone.Transport.prototype.toggle = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._clock.getStateAtTime(time) !== Tone.State.Started) {\n\t            this.start(time);\n\t        } else {\n\t            this.stop(time);\n\t        }\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4.\n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (Tone.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopStart).toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopEnd).toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time.\n\t\t *  @param {TransportTime} startPosition\n\t\t *  @param {TransportTime} endPosition\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to\n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to.\n\t\t *  The default value is an 8th note. Value must be less\n\t\t *  than a quarter note.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Ticks(this._swingTicks).toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var ticks = this._clock.getTicksAtTime(now);\n\t            return Tone.Ticks(ticks).toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return this._clock.seconds;\n\t        },\n\t        set: function (s) {\n\t            var now = this.now();\n\t            var ticks = this.bpm.timeToTicks(s, now);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                var now = this.now();\n\t                var ticks = this._clock.getTicksAtTime(now);\n\t                return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.setTicksAtTime(t, now);\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.setTicksAtTime(t, now);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Get the clock's ticks at the given time.\n\t\t * @param  {Time} time  When to get the tick value\n\t\t * @return {Ticks}       The tick value at the given time.\n\t\t */\n\t    Tone.Transport.prototype.getTicksAtTime = function (time) {\n\t        return Math.round(this._clock.getTicksAtTime(time));\n\t    };\n\t    /**\n\t\t *  Return the elapsed seconds at the given time.\n\t\t *  @param  {Time}  time  When to get the elapsed seconds\n\t\t *  @return  {Seconds}  The number of elapsed seconds\n\t\t */\n\t    Tone.Transport.prototype.getSecondsAtTime = function (time) {\n\t        return this._clock.getSecondsAtTime(time);\n\t    };\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value\n\t\t *  after other objects have been created can cause problems.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toTicks(subdivision);\n\t        if (this.state !== Tone.State.Started) {\n\t            //if the transport's not started, return 0\n\t            return 0;\n\t        } else {\n\t            var now = this.now();\n\t            //the remainder of the current ticks and the subdivision\n\t            var transportPos = this.getTicksAtTime(now);\n\t            var remainingTicks = subdivision - transportPos % subdivision;\n\t            return this._clock.nextTickTime(remainingTicks, now);\n\t        }\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that\n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio.\n\t\t *\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            var now = this.now();\n\t            if (signal.getValueAtTime(now) !== 0) {\n\t                ratio = signal.getValueAtTime(now) / this.bpm.getValueAtTime(now);\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal.value\n\t        });\n\t        signal.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control.\n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t        }\n\t        //store the Transport on the context so it can be retrieved later\n\t        context.Transport = Tone.Transport;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            context.Transport.dispose();\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.Volume);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers).\n\t\t *          It provides useful conveniences such as the ability\n\t\t *          to set the volume and mute the entire application.\n\t\t *          It also gives you the ability to apply master effects to your application.\n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        Tone.AudioNode.call(this);\n\t        Tone.getContext(function () {\n\t            this.createInsOuts(1, 0);\n\t            /**\n\t\t\t\t *  The private volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._volume = this.output = new Tone.Volume();\n\t            /**\n\t\t\t\t * The volume of the master output.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t            this.volume = this._volume.volume;\n\t            this._readOnly('volume');\n\t            //connections\n\t            this.input.chain(this.output, this.context.destination);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Master, Tone.AudioNode);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t\t *  chained in the master effects chain.\n\t\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter\n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        // Also augment AudioNode's prototype to include toMaster as a convenience\n\t        AudioNode.prototype.toMaster = function () {\n\t            this.connect(Tone.Master);\n\t            return this;\n\t        };\n\t    }\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Master instanceof MasterConstructor) {\n\t            context.Master.dispose();\n\t        }\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the\n\t\t *          start/stop of Tone.Transport.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t *\n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t *\n\t\t */\n\t    Tone.Source = function (options) {\n\t        options = Tone.defaultArg(options, Tone.Source.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 100;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source, Tone.AudioNode);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype.restart = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given,\n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.cancel(time);\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            this.restart(time, offset, duration);\n\t        } else {\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            if (this._synced) {\n\t                // add the offset time to the event\n\t                var event = this._state.get(time);\n\t                event.offset = Tone.defaultArg(offset, 0);\n\t                event.duration = duration;\n\t                var sched = Tone.Transport.schedule(function (t) {\n\t                    this._start(t, offset, duration);\n\t                }.bind(this), time);\n\t                this._scheduled.push(sched);\n\t                //if it's already started\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    this._syncedStart(this.now(), Tone.Transport.seconds);\n\t                }\n\t            } else {\n\t                this._start.apply(this, arguments);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given,\n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time.\n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        this._syncedStart = function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this);\n\t        this._syncedStop = function (time) {\n\t            var seconds = Tone.Transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t            if (this._state.getValueAtTime(seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this);\n\t        Tone.Transport.on('start loopStart', this._syncedStart);\n\t        Tone.Transport.on('stop pause loopEnd', this._syncedStop);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        if (this._synced) {\n\t            Tone.Transport.off('stop pause loopEnd', this._syncedStop);\n\t            Tone.Transport.off('start loopStart', this._syncedStart);\n\t        }\n\t        this._synced = false;\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  AudioBuffer.copyTo/FromChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (Tone.supported) {\n\t        if (!AudioBuffer.prototype.copyToChannel) {\n\t            AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t                var channel = this.getChannelData(chanNum);\n\t                start = start || 0;\n\t                for (var i = 0; i < channel.length; i++) {\n\t                    channel[i + start] = src[i];\n\t                }\n\t            };\n\t            AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t                var channel = this.getChannelData(chanNum);\n\t                start = start || 0;\n\t                for (var i = 0; i < dest.length; i++) {\n\t                    dest[i] = channel[i + start];\n\t                }\n\t            };\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all\n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer\n\t\t *  \t\tprovides events which keep track of the loading progress\n\t\t *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.\n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded.\n\t\t *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead\n\t\t *                            since it will give you a callback when _all_ buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t *  @example\n\t\t * //can load provide fallback extension types if the first type is not supported.\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        /**\n\t\t\t * Private callback when the buffer is loaded.\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._onload = Tone.noOp;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                if (this.loaded) {\n\t                    options.onload(this);\n\t                } else {\n\t                    this._onload = options.onload;\n\t                }\n\t            }\n\t        } else if (Tone.isString(options.url)) {\n\t            this.load(options.url).then(options.onload).catch(options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false,\n\t        'onload': Tone.noOp,\n\t        'onerror': Tone.noOp\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            if (buffer.loaded) {\n\t                this._buffer = buffer.get();\n\t            } else {\n\t                buffer._onload = function () {\n\t                    this.set(buffer);\n\t                    this._onload(this);\n\t                }.bind(this);\n\t            }\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                this._onload(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._removeFromDownloadQueue(this._xhr);\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array.\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (Tone.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (Tone.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = Tone.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array.\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} A Tone.Buffer created from the array\n\t\t */\n\t    Tone.Buffer.fromArray = function (array) {\n\t        return new Tone.Buffer().fromArray(array);\n\t    };\n\t    /**\n\t\t * Creates a Tone.Buffer from a URL, returns a promise\n\t\t * which resolves to a Tone.Buffer\n\t\t * @param  {String} url The url to load.\n\t\t * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer\n\t\t */\n\t    Tone.Buffer.fromUrl = function (url) {\n\t        var buffer = new Tone.Buffer();\n\t        return buffer.load(url).then(function () {\n\t            return buffer;\n\t        });\n\t    };\n\t    /**\n\t\t * Remove an xhr request from the download queue\n\t\t * @private\n\t\t */\n\t    Tone.Buffer._removeFromDownloadQueue = function (request) {\n\t        var index = Tone.Buffer._downloadQueue.indexOf(request);\n\t        if (index !== -1) {\n\t            Tone.Buffer._downloadQueue.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = Tone.defaultArg(onload, Tone.noOp);\n\t        // test if the url contains multiple extensions\n\t        var matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t        if (matches) {\n\t            var extensions = matches[1].split('|');\n\t            var extension = extensions[0];\n\t            for (var i = 0; i < extensions.length; i++) {\n\t                if (Tone.Buffer.supportsType(extensions[i])) {\n\t                    extension = extensions[i];\n\t                    break;\n\t                }\n\t            }\n\t            url = url.replace(matches[0], extension);\n\t        }\n\t        function onError(e) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            Tone.Buffer.emit('error', e);\n\t            if (onerror) {\n\t                onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response).then(function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    if (Tone.Buffer._downloadQueue.length === 0) {\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }).catch(function () {\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.slice().forEach(function (request) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            request.abort();\n\t        });\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Wrapper around the native fire-and-forget OscillatorNode. Adds the\n\t\t *     ability to reschedule the stop method.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onload  The callback to invoke when the\n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.OscillatorNode = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OscillatorNode);\n\t        Tone.AudioNode.call(this, options);\n\t        /**\n\t\t\t *  The callback to invoke after the\n\t\t\t *  buffer source is done playing.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The oscillator start time\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The oscillator stop time\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the OscillatorNode\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        this._gainNode.gain.setValueAtTime(0, this.context.currentTime);\n\t        /**\n\t\t\t *  The oscillator\n\t\t\t *  @type  {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.connect(this._gainNode);\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The frequency of the oscillator\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Param(this._oscillator.frequency, Tone.Type.Frequency);\n\t        this.frequency.value = options.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Param(this._oscillator.detune, Tone.Type.Cents);\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t    };\n\t    Tone.extend(Tone.OscillatorNode, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.OscillatorNode.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'onended': Tone.noOp\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the oscillator, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.OscillatorNode#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.OscillatorNode.prototype, 'state', {\n\t        get: function () {\n\t            return this.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Get the playback state at the given time\n\t\t *  @param  {Time}  time  The time to test the state at\n\t\t *  @return  {Tone.State}  The playback state. \n\t\t */\n\t    Tone.OscillatorNode.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._startTime !== -1 && time >= this._startTime && (this._stopTime === -1 || time <= this._stopTime)) {\n\t            return Tone.State.Started;\n\t        } else {\n\t            return Tone.State.Stopped;\n\t        }\n\t    };\n\t    /**\n\t     * Start the oscillator node at the given time\n\t     * @param  {Time=} time When to start the oscillator\n\t     * @return {OscillatorNode}      this\n\t     */\n\t    Tone.OscillatorNode.prototype.start = function (time) {\n\t        if (this._startTime === -1) {\n\t            this._startTime = this.toSeconds(time);\n\t            this._oscillator.start(this._startTime);\n\t            var now = this.context.currentTime;\n\t            this._gainNode.gain.cancelScheduledValues(now);\n\t            this._gainNode.gain.setValueAtTime(0, now);\n\t            this._gainNode.gain.setValueAtTime(1, this._startTime);\n\t        } else {\n\t            throw new Error('cannot call OscillatorNode.start more than once');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t     * @param  {PeriodicWave} periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t     * @return {OscillatorNode} this\n\t     */\n\t    Tone.OscillatorNode.prototype.setPeriodicWave = function (periodicWave) {\n\t        this._oscillator.setPeriodicWave(periodicWave);\n\t        return this;\n\t    };\n\t    /**\n\t     * Stop the oscillator node at the given time\n\t     * @param  {Time=} time When to stop the oscillator\n\t     * @return {OscillatorNode}      this\n\t     */\n\t    Tone.OscillatorNode.prototype.stop = function (time) {\n\t        //cancel the previous stop\n\t        this.cancelStop();\n\t        //reschedule it\n\t        this._stopTime = this.toSeconds(time);\n\t        this._gainNode.gain.setValueAtTime(0, this._stopTime);\n\t        this.context.clearTimeout(this._timeout);\n\t        this._timeout = this.context.setTimeout(function () {\n\t            this._oscillator.stop(this.now());\n\t            this.onended();\n\t        }.bind(this), this._stopTime - this.now());\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel a scheduled stop event\n\t\t *  @return  {Tone.OscillatorNode}  this\n\t\t */\n\t    Tone.OscillatorNode.prototype.cancelStop = function () {\n\t        if (this._startTime !== -1) {\n\t            //cancel the stop envelope\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            this._gainNode.gain.setValueAtTime(1, Math.max(this.now(), this._startTime));\n\t            this.context.clearTimeout(this._timeout);\n\t            this._stopTime = -1;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t\t * @memberOf Tone.OscillatorNode#\n\t\t * @type {Time}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.OscillatorNode.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.OscillatorNode}  this\n\t\t */\n\t    Tone.OscillatorNode.prototype.dispose = function () {\n\t        this.context.clearTimeout(this._timeout);\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.onended = null;\n\t        this._oscillator.disconnect();\n\t        this._oscillator = null;\n\t        this._gainNode.dispose();\n\t        this._gainNode = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.OscillatorNode;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),\n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = new Tone.OscillatorNode();\n\t        if (this._wave) {\n\t            this._oscillator.setPeriodicWave(this._wave);\n\t        } else {\n\t            this._oscillator.type = this._type;\n\t        }\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        time = this.toSeconds(time);\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            time = this.toSeconds(time);\n\t            this._oscillator.stop(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t\t * just cancels any scheduled 'stop' from being invoked.\n\t\t * @param  {Time=} time\n\t\t * @return {Tone.Oscillator}      this\n\t\t */\n\t    Tone.Oscillator.prototype.restart = function (time) {\n\t        this._oscillator.cancelStop();\n\t        this._state.cancel(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency.\n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240;\n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport.\n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br>\n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t\t * PeriodicWave equations are from the\n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var isBasicType = [\n\t                Tone.Oscillator.Type.Sine,\n\t                Tone.Oscillator.Type.Square,\n\t                Tone.Oscillator.Type.Triangle,\n\t                Tone.Oscillator.Type.Sawtooth\n\t            ].includes(type);\n\t            if (this._phase === 0 && isBasicType) {\n\t                this._wave = null;\n\t                //just go with the basic approach\n\t                if (this._oscillator !== null) {\n\t                    this._oscillator.type === type;\n\t                }\n\t            } else {\n\t                var coefs = this._getRealImaginary(type, this._phase);\n\t                var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t                this._wave = periodicWave;\n\t                if (this._oscillator !== null) {\n\t                    this._oscillator.setPeriodicWave(this._wave);\n\t                }\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based\n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag\n\t\t *  @param  {NormalRange}  phase\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.dispose();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph.\n\t\t *  @extends {Tone.SignalBase}\n\t\t */\n\t    Tone.Zero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal\n\t\t *          which can be attached to an AudioParam or Tone.Signal\n\t\t *          in order to modulate that parameter with an oscillator. The LFO can\n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz.\n\t\t *  @param {number=} min The minimum output value of the LFO.\n\t\t *  @param {number=} max The maximum value of the LFO.\n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max\n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport\n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note,\n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.\n\t\t *  Tone.LFO will automatically convert to the destination units of the\n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.SignalBase.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal.\n\t\t *         It is composed of a Tone.Compressor with a fast attack\n\t\t *         and release. Limiters are commonly used to safeguard against\n\t\t *         signal clipping. Unlike a compressor, limiters do not provide\n\t\t *         smooth gain reduction and almost completely prevent\n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied.\n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = Tone.defaults(arguments, ['threshold'], Tone.Limiter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter, Tone.AudioNode);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to\n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback.\n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right\n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw\n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().open();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input in decibels\n\t\t * var level = meter.getValue();\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = Tone.defaults(arguments, ['smoothing'], Tone.Meter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 1024);\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame.\n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t    };\n\t    Tone.extend(Tone.Meter, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = { 'smoothing': 0.8 };\n\t    /**\n\t\t *  Get the current decibel value of the incoming signal\n\t\t *  @returns {Decibels}\n\t\t */\n\t    Tone.Meter.prototype.getLevel = function () {\n\t        this._analyser.type = 'fft';\n\t        var values = this._analyser.getValue();\n\t        var offset = 28;\n\t        // normalizes most signal levels\n\t        // TODO: compute loudness from FFT\n\t        return Math.max.apply(this, values) + offset;\n\t    };\n\t    /**\n\t\t *  Get the signal value of the incoming signal\n\t\t *  @returns {Number}\n\t\t */\n\t    Tone.Meter.prototype.getValue = function () {\n\t        this._analyser.type = 'waveform';\n\t        var value = this._analyser.getValue();\n\t        return value[0];\n\t    };\n\t    /**\n\t\t * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name smoothing\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothing;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothing = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        this._splitter.channelCount = 2;\n\t        this._splitter.channelCountMode = 'explicit';\n\t        /**\n\t\t\t *  Left channel output.\n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Add}\n\t\t\t */\n\t        this._midAdd = new Tone.Add();\n\t        /**\n\t\t\t * Multiply the _midAdd by sqrt(1/2)\n\t\t\t * @type {Tone.Multiply}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Multiply(Math.SQRT1_2);\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Also Output 1\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t */\n\t        this._sideSubtract = new Tone.Subtract();\n\t        /**\n\t\t\t * Multiply the _midAdd by sqrt(1/2)\n\t\t\t * @type {Tone.Multiply}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Multiply(Math.SQRT1_2);\n\t        this._split.connect(this._midAdd, 0, 0);\n\t        this._split.connect(this._midAdd, 1, 1);\n\t        this._split.connect(this._sideSubtract, 0, 0);\n\t        this._split.connect(this._sideSubtract, 1, 1);\n\t        this._midAdd.connect(this.mid);\n\t        this._sideSubtract.connect(this.side);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midAdd.dispose();\n\t        this._midAdd = null;\n\t        this._sideSubtract.dispose();\n\t        this._sideSubtract = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels).\n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Add();\n\t        /**\n\t\t\t * Multiply the left by sqrt(1/2)\n\t\t\t * @type {Tone.Multiply}\n\t\t\t */\n\t        this._timesTwoLeft = new Tone.Multiply(Math.SQRT1_2);\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Subtract();\n\t        /**\n\t\t\t * Multiply the right by sqrt(1/2)\n\t\t\t * @type {Tone.Multiply}\n\t\t\t */\n\t        this._timesTwoRight = new Tone.Multiply(Math.SQRT1_2);\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._timesTwoLeft);\n\t        this._right.connect(this._timesTwoRight);\n\t        this._timesTwoLeft.connect(this._merge, 0, 0);\n\t        this._timesTwoRight.connect(this._merge, 0, 1);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._timesTwoLeft.dispose();\n\t        this._timesTwoLeft = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._timesTwoRight.dispose();\n\t        this._timesTwoRight = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors.\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful\n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t    };\n\t    Tone.extend(Tone.Mono, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported && !window.StereoPannerNode) {\n\t        /**\n\t\t\t * @class Shimmed StereoPannerNode\n\t\t\t * @param  {AudioContext} context\n\t\t\t * @private\n\t\t\t */\n\t        var StereoPannerNode = function (context) {\n\t            /**\n\t\t\t\t * The audio context\n\t\t\t\t * @type {AudioContext}\n\t\t\t\t */\n\t            this.context = context;\n\t            /**\n\t\t\t\t * The left/right panning. [-1, 1]\n\t\t\t\t * @type {AudioRange}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t * Equal power scaling of the right gain\n\t\t\t\t * @type {Tone.WaveShaper}\n\t\t\t\t */\n\t            var rightWaveShaper = new Tone.WaveShaper(function (val) {\n\t                return Tone.equalPowerScale((val + 1) / 2);\n\t            }, 4096);\n\t            /**\n\t\t\t\t * Equal power scaling of the left gain\n\t\t\t\t * @type {Tone.WaveShaper}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var leftWaveShaper = new Tone.WaveShaper(function (val) {\n\t                return Tone.equalPowerScale(1 - (val + 1) / 2);\n\t            }, 4096);\n\t            /**\n\t\t\t\t * The left gain value\n\t\t\t\t * @type {Tone.Gain}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var leftGain = new Tone.Gain();\n\t            /**\n\t\t\t\t * The right gain value\n\t\t\t\t * @type {Tone.Gain}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var rightGain = new Tone.Gain();\n\t            /**\n\t\t\t\t * Split the incoming signal\n\t\t\t\t * @type {Tone.Split}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var split = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t * Keeps the waveshapers from optimizing 0s\n\t\t\t\t * @type {Tone.Zero}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var zero = new Tone.Zero();\n\t            zero.fan(rightWaveShaper, leftWaveShaper);\n\t            /**\n\t\t\t\t * Merge the outgoing signal\n\t\t\t\t * @type {Tone.Merge}\n\t\t\t\t * @private\n\t\t\t\t */\n\t            var merge = this.output = new Tone.Merge();\n\t            //connections\n\t            split.left.chain(leftGain, merge.left);\n\t            split.right.chain(rightGain, merge.right);\n\t            this.pan.chain(leftWaveShaper, leftGain.gain);\n\t            this.pan.chain(rightWaveShaper, rightGain.gain);\n\t        };\n\t        StereoPannerNode.prototype.disconnect = function () {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        };\n\t        StereoPannerNode.prototype.connect = function () {\n\t            this.output.connect.apply(this.output, arguments);\n\t        };\n\t        //add it to the AudioContext\n\t        AudioContext.prototype.createStereoPanner = function () {\n\t            return new StereoPannerNode(this);\n\t        };\n\t        Tone.Context.prototype.createStereoPanner = function () {\n\t            return new StereoPannerNode(this);\n\t        };\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (center).\n\t\t *  @example\n\t\t *  //pan the input signal hard right.\n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t*  the panner node\n\t\t\t*  @type {StereoPannerNode}\n\t\t\t*  @private\n\t\t\t*/\n\t        this._panner = this.input = this.output = this.context.createStereoPanner();\n\t        /**\n\t\t\t*  The pan control. -1 = hard left, 1 = hard right.\n\t\t\t*  @type {AudioRange}\n\t\t\t*  @signal\n\t\t\t*/\n\t        this.pan = this._panner.pan;\n\t        //initial value\n\t        this.pan.value = Tone.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced\n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener,\n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume.\n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(-0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this.mute = options.mute;\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0,\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute/unmute the volume\n\t\t * @memberOf Tone.PanVol#\n\t\t * @name mute\n\t\t * @type {Boolean}\n\t\t */\n\t    Object.defineProperty(Tone.PanVol.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Solo lets you isolate a specific audio stream. When\n\t\t *         an instance is set to `solo=true`, it will mute all other instances.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var soloA = new Tone.Solo()\n\t\t * var soloB = new Tone.Solo()\n\t\t * soloA.solo = true\n\t\t * //no audio will pass through soloB\n\t\t */\n\t    Tone.Solo = function () {\n\t        var options = Tone.defaults(arguments, ['solo'], Tone.Solo);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The input and output node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  A bound _soloed method\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._soloBind = this._soloed.bind(this);\n\t        //listen for solo events class-wide.\n\t        this.context.on('solo', this._soloBind);\n\t        //set initially\n\t        this.solo = options.solo;\n\t    };\n\t    Tone.extend(Tone.Solo, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.Solo.defaults = { solo: false };\n\t    /**\n\t\t *  Isolates this instance and mutes all other instances of Tone.Solo.\n\t\t *  Only one instance can be soloed at a time. A soloed\n\t\t *  instance will report `solo=false` when another instance is soloed.\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name solo\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'solo', {\n\t        get: function () {\n\t            return this._isSoloed();\n\t        },\n\t        set: function (solo) {\n\t            if (solo) {\n\t                this._addSolo();\n\t            } else {\n\t                this._removeSolo();\n\t            }\n\t            this.context.emit('solo', this);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the current instance is muted, i.e. another instance is soloed\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name muted\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'muted', {\n\t        get: function () {\n\t            return this.input.gain.value === 0;\n\t        }\n\t    });\n\t    /**\n\t\t * Add this to the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._addSolo = function () {\n\t        if (!Tone.isArray(this.context._currentSolo)) {\n\t            this.context._currentSolo = [];\n\t        }\n\t        if (!this._isSoloed()) {\n\t            this.context._currentSolo.push(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Remove this from the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._removeSolo = function () {\n\t        if (this._isSoloed()) {\n\t            var index = this.context._currentSolo.indexOf(this);\n\t            this.context._currentSolo.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Is this on the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._isSoloed = function () {\n\t        if (Tone.isArray(this.context._currentSolo)) {\n\t            return this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;\n\t        } else {\n\t            return false;\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Returns true if no one is soloed\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._noSolos = function () {\n\t        return !Tone.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;\n\t    };\n\t    /**\n\t\t *  Solo the current instance and unsolo all other instances.\n\t\t *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.\n\t\t *  @private\n\t\t */\n\t    Tone.Solo.prototype._soloed = function () {\n\t        if (this._isSoloed()) {\n\t            this.input.gain.value = 1;\n\t        } else if (this._noSolos()) {\n\t            //no one is soloed\n\t            this.input.gain.value = 1;\n\t        } else {\n\t            this.input.gain.value = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Solo}  this\n\t\t */\n\t    Tone.Solo.prototype.dispose = function () {\n\t        this.context.off('solo', this._soloBind);\n\t        this._removeSolo();\n\t        this._soloBind = null;\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Solo;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Waveform = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.Waveform);\n\t        options.type = Tone.Analyser.Type.Waveform;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.Waveform, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Waveform.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Waveform.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Waveform#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Waveform.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Waveform}  this\n\t\t */\n\t    Tone.Waveform.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.Waveform;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (Tone.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (Tone.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (Tone.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = Tone.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = Tone.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (Tone.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (Tone.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (Tone.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \t@example\n\t\t * //To pass in additional parameters in the second parameter\n\t\t * var buffers = new Tone.Buffers(urls, {\n\t\t * \t\"onload\" : callback,\n\t\t * \t\"baseUrl\" : \"../path/to/audio/\"\n\t\t * })\n\t\t */\n\t    Tone.Buffers = function (urls) {\n\t        //remove the urls from the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Buffers);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = options.baseUrl;\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Buffers.defaults = {\n\t        'onload': Tone.noOp,\n\t        'baseUrl': ''\n\t    };\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (Tone.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t *  All of the routes\n\t\t *\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @private\n\t\t */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name.\n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus.\n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel.\n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = Tone.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.connect(sendKnob);\n\t        sendKnob.connect(Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Number=} channelNumber The channel to connect to\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, inputNum) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        Buses[channelName].connect(this, 0, inputNum);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space\n\t\t *          using a right-handed cartesian coordinate system.\n\t\t *          The units used in the coordinate system are not defined;\n\t\t *          these coordinates are independent/invariant of any particular\n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward\n\t\t *          vector representing the direction the sound is projecting. Additionally,\n\t\t *          they have a sound cone representing how directional the sound is.\n\t\t *          For example, the sound could be omnidirectional, in which case it would\n\t\t *          be heard anywhere regardless of its forward, or it can be more directional\n\t\t *          and heard only if it is facing the listener. Tone.Listener objects\n\t\t *          (representing a person's ears) have an forward and up vector\n\t\t *          representing in which direction the person is facing. Because both the\n\t\t *          source stream and the listener can be moving, they both have a velocity\n\t\t *          vector representing both the speed and direction of movement. Taken together,\n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t */\n\t    Tone.Listener = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        Tone.getContext(function () {\n\t            // set the default position/forward\n\t            this.set(ListenerConstructor.defaults);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector\n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e.\n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e.\n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e.\n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * Because of a bug in iOS causing the currentTime to increment\n\t\t * before the rendering is started, sometimes it takes multiple\n\t\t * attempts to render the audio correctly.\n\t\t * @private\n\t\t */\n\t    function attemptRender(callback, duration, sampleRate, tries) {\n\t        tries = Tone.defaultArg(tries, 0);\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        var response = callback(Tone.Transport);\n\t        if (context.currentTime > 0 && tries < 1000) {\n\t            return attemptRender(callback, duration, sampleRate, ++tries);\n\t        } else {\n\t            return {\n\t                'response': response,\n\t                'context': context\n\t            };\n\t        }\n\t    }\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n\t\t *  as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n\t\t *  user action like a click or tap. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var renderRet = attemptRender(callback, duration, sampleRate);\n\t        var response = renderRet.response;\n\t        var context = renderRet.context;\n\t        var ret;\n\t        if (response instanceof Promise) {\n\t            //wait for the promise to resolve\n\t            ret = response.then(function () {\n\t                //then render the audio\n\t                return context.render();\n\t            });\n\t        } else {\n\t            //process the audio\n\t            ret = context.render();\n\t        }\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return ret.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value.\n\t\t */\n\t    Tone.Effect = function () {\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = Tone.defaults(arguments, ['frequency'], Tone.AutoPanner);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the\n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set\n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for\n\t\t *                                   the incoming signal. Normal range of -40 to 0.\n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed.\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the\n\t\t * baseFrequency.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return Tone.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / Tone.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        Tone.SignalBase.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of\n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth.\n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8.\n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = Tone.defaults(arguments, ['bits'], Tone.BitCrusher);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8.\n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = Tone.defaults(arguments, ['order'], Tone.Chebyshev);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        //get the defaults\n\t        Tone.AudioNode.call(this);\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect composed of\n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel.\n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms.\n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime.\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio\n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response.\n\t\t *  @param {Function=} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer(options.url, function (buffer) {\n\t            this._convolver.buffer = buffer.get();\n\t            options.onload();\n\t        }.bind(this));\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = Tone.defaults(arguments, ['distortion'], Tone.Distortion);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which\n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime, options.maxDelay);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values.\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelay': 1\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.\n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part\n\t\t *                                 of the reverb.\n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersL);\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter.\n\t\t *\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5);\n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = Tone.defaults(arguments, ['roomSize'], Tone.JCReverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        Tone.connectSeries.apply(Tone, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels)\n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects.\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on\n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing.\n\t\t *\t@param {number} [octaves] The octaves of the effect.\n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters.\n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15,\n\t\t * \t\"octaves\" : 5,\n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        Tone.connectSeries.apply(Tone, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters.\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always\n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which\n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal.\n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave.\n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by.\n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = Tone.defaults(arguments, ['pitch'], Tone.PitchShift);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave.\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones).\n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = Tone.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = Tone.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t\t * A nominal range of 0.03 to 0.1 is recommended.\n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onload  The callback to invoke when the\n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'buffer',\n\t            'onload'\n\t        ], Tone.BufferSource);\n\t        Tone.AudioNode.call(this, options);\n\t        /**\n\t\t\t *  The callback to invoke after the\n\t\t\t *  buffer source is done playing.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  An additional flag if the actual BufferSourceNode\n\t\t\t *  has been started. b/c stopping an unstarted buffer\n\t\t\t *  will throw it into an invalid state\n\t\t\t *  @type  {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceStarted = false;\n\t        /**\n\t\t\t *  Flag if the source has already been stopped\n\t\t\t *  @type  {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceStopped = false;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        this._source.onended = this._onended.bind(this);\n\t        /**\n\t\t\t * The private buffer instance\n\t\t\t * @type {Tone.Buffer}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer(options.buffer, options.onload);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t\t\t * @type {String}\n\t\t\t */\n\t        this.curve = options.curve;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set some values initially\n\t        this.loop = options.loop;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.playbackRate.value = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.BufferSource, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0,\n\t        'curve': 'linear',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            return this.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Get the playback state at the given time\n\t\t *  @param  {Time}  time  The time to test the state at\n\t\t *  @return  {Tone.State}  The playback state. \n\t\t */\n\t    Tone.BufferSource.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._startTime !== -1 && time >= this._startTime && !this._sourceStopped) {\n\t            return Tone.State.Started;\n\t        } else {\n\t            return Tone.State.Stopped;\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource can only be started once.');\n\t        }\n\t        if (!this.buffer.loaded) {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        time = this.toSeconds(time);\n\t        //if it's a loop the default offset is the loopstart point\n\t        if (this.loop) {\n\t            offset = Tone.defaultArg(offset, this.loopStart);\n\t        } else {\n\t            //otherwise the default offset is 0\n\t            offset = Tone.defaultArg(offset, 0);\n\t        }\n\t        offset = this.toSeconds(offset);\n\t        gain = Tone.defaultArg(gain, 1);\n\t        this._gain = gain;\n\t        fadeInTime = this.toSeconds(Tone.defaultArg(fadeInTime, this.fadeIn));\n\t        this.fadeIn = fadeInTime;\n\t        if (fadeInTime > 0) {\n\t            this._gainNode.gain.setValueAtTime(0, time);\n\t            if (this.curve === 'linear') {\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.exponentialApproachValueAtTime(this._gain, time, fadeInTime);\n\t            }\n\t        } else {\n\t            this._gainNode.gain.setValueAtTime(gain, time);\n\t        }\n\t        this._startTime = time;\n\t        var computedDur = this.toSeconds(Tone.defaultArg(duration, this.buffer.duration - offset % this.buffer.duration));\n\t        computedDur = Math.max(computedDur, 0);\n\t        if (Tone.isDefined(duration)) {\n\t            //clip the duration when not looping\n\t            if (!this.loop) {\n\t                computedDur = Math.min(computedDur, this.buffer.duration - offset % this.buffer.duration);\n\t            }\n\t            this.stop(time + computedDur, this.fadeOut);\n\t        }\n\t        //start the buffer source\n\t        if (this.loop) {\n\t            //modify the offset if it's greater than the loop time\n\t            var loopEnd = this.loopEnd || this.buffer.duration;\n\t            var loopStart = this.loopStart;\n\t            var loopDuration = loopEnd - loopStart;\n\t            //move the offset back\n\t            if (offset >= loopEnd) {\n\t                offset = (offset - loopStart) % loopDuration + loopStart;\n\t            }\n\t        }\n\t        this._source.buffer = this.buffer.get();\n\t        this._source.loopEnd = this.loopEnd || this.buffer.duration;\n\t        if (offset < this.buffer.duration) {\n\t            this._sourceStarted = true;\n\t            this._source.start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the\n\t\t *  buffer out.\n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (!this.buffer.loaded) {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        if (this._sourceStopped) {\n\t            return;\n\t        }\n\t        time = this.toSeconds(time);\n\t        //if the event has already been scheduled, clear it\n\t        if (this._stopTime !== -1) {\n\t            this.cancelStop();\n\t        }\n\t        //stop if it's schedule before the start time\n\t        if (time <= this._startTime) {\n\t            this._gainNode.gain.cancelScheduledValues(time);\n\t            this._gainNode.gain.value = 0;\n\t            return this;\n\t        }\n\t        time = Math.max(this._startTime + this.fadeIn + this.sampleTime, time);\n\t        //cancel the previous curve\n\t        this._gainNode.gain.cancelScheduledValues(time);\n\t        this._stopTime = time;\n\t        //the fadeOut time\n\t        fadeOutTime = this.toSeconds(Tone.defaultArg(fadeOutTime, this.fadeOut));\n\t        var heldDuration = time - this._startTime - this.fadeIn - this.sampleTime;\n\t        if (!this.loop) {\n\t            //make sure the fade does not go beyond the length of the buffer\n\t            heldDuration = Math.min(heldDuration, this.buffer.duration);\n\t        }\n\t        fadeOutTime = Math.min(heldDuration, fadeOutTime);\n\t        var startFade = time - fadeOutTime;\n\t        if (fadeOutTime > this.sampleTime) {\n\t            this._gainNode.gain.setValueAtTime(this._gain, startFade);\n\t            if (this.curve === 'linear') {\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time);\n\t            } else {\n\t                this._gainNode.gain.exponentialApproachValueAtTime(0, startFade, fadeOutTime);\n\t            }\n\t        } else {\n\t            this._gainNode.gain.setValueAtTime(0, time);\n\t        }\n\t        Tone.context.clearTimeout(this._onendedTimeout);\n\t        this._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel a scheduled stop event\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.cancelStop = function () {\n\t        if (this._startTime !== -1 && !this._sourceStopped) {\n\t            //cancel the stop envelope\n\t            var fadeInTime = this.toSeconds(this.fadeIn);\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + fadeInTime + this.sampleTime);\n\t            this._gainNode.gain.setValueAtTime(1, Math.max(this.now(), this._startTime + fadeInTime + this.sampleTime));\n\t            this.context.clearTimeout(this._onendedTimeout);\n\t            this._stopTime = -1;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended.\n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        if (!this._sourceStopped) {\n\t            this._sourceStopped = true;\n\t            //allow additional time for the exponential curve to fully decay\n\t            var additionalTail = this.curve === 'exponential' ? this.fadeOut * 2 : 0;\n\t            if (this._sourceStarted && this._stopTime !== -1) {\n\t                this._source.stop(this._stopTime + additionalTail);\n\t            }\n\t            this.onended(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t            this.cancelStop();\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.onended = null;\n\t        this._source.onended = null;\n\t        this._source.disconnect();\n\t        this._source = null;\n\t        this._gainNode.dispose();\n\t        this._gainNode = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        Tone.context.clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t *\n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\",\n\t\t * \t\"min\" : 800,\n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t *\n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = Tone.defaults(arguments, ['type'], Tone.Noise);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now();\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t * Restarts the noise.\n\t\t * @param  {[type]} time [description]\n\t\t * @return {[type]}      [description]\n\t\t */\n\t    Tone.Noise.prototype.restart = function (time) {\n\t        //TODO could be optimized by cancelling the buffer source 'stop'\n\t        //stop and restart\n\t        this._stop(time);\n\t        this._start(time);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tThe noise arrays. Generated on initialization.\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js\n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    //create the noise buffers\n\t    Tone.getContext(createBuffers);\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Simple convolution created with decaying noise.\n\t\t *  \t\tGenerates an Impulse Response Buffer\n\t\t * \t\t\twith Tone.Offline then feeds the IR into ConvolverNode.\n\t\t * \t\t\tNote: the Reverb will not make any sound until [generate](#generate)\n\t\t * \t\t\thas been invoked and resolved.\n\t\t *\n\t\t * \t\t\tInspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n\t\t * \t\t\tCopyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n\t\t *\n\t\t *  @extends {Tone.Convolver}\n\t\t *  @param {Time=} decay The amount of time it will reverberate for.\n\t\t */\n\t    Tone.Reverb = function () {\n\t        var options = Tone.defaults(arguments, ['decay'], Tone.Reverb);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  Convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t * The duration of the reverb\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * The amount of time before the reverb is fully\n\t\t\t * ramped in.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.preDelay = options.preDelay;\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Reverb, Tone.Effect);\n\t    /**\n\t\t * The defaults\n\t\t * @type {Object}\n\t\t * @static\n\t\t */\n\t    Tone.Reverb.defaults = {\n\t        'decay': 1.5,\n\t        'preDelay': 0.01\n\t    };\n\t    /**\n\t\t * Generate the Impulse Response. Returns a promise while the IR is being\n\t\t * generated.\n\t\t * @return {Promise<Tone.Reverb>} Promise which returns this object.\n\t\t */\n\t    Tone.Reverb.prototype.generate = function () {\n\t        return Tone.Offline(function () {\n\t            //create a noise burst which decays over the duration\n\t            var noiseL = new Tone.Noise();\n\t            var noiseR = new Tone.Noise();\n\t            var merge = new Tone.Merge();\n\t            noiseL.connect(merge.left);\n\t            noiseR.connect(merge.right);\n\t            var gainNode = new Tone.Gain().toMaster();\n\t            merge.connect(gainNode);\n\t            noiseL.start(0);\n\t            noiseR.start(0);\n\t            //short fade in\n\t            gainNode.gain.setValueAtTime(0, 0);\n\t            gainNode.gain.linearRampToValueAtTime(1, this.preDelay);\n\t            //decay\n\t            gainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay - this.preDelay);\n\t        }.bind(this), this.decay).then(function (buffer) {\n\t            this._convolver.buffer = buffer.get();\n\t            return this;\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Reverb}  this\n\t\t */\n\t    Tone.Reverb.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        return this;\n\t    };\n\t    return Tone.Reverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation.\n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = Tone.defaults(arguments, ['width'], Tone.StereoWidener);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        this._readOnly(['width']);\n\t        /**\n\t\t\t * Two times the (1-width) for the mid channel\n\t\t\t * @type {Tone.Multiply}\n\t\t\t * @private\n\t\t\t */\n\t        this._twoTimesWidthMid = new Tone.Multiply(2);\n\t        /**\n\t\t\t * Two times the width for the side channel\n\t\t\t * @type {Tone.Multiply}\n\t\t\t * @private\n\t\t\t */\n\t        this._twoTimesWidthSide = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Multiply();\n\t        this._twoTimesWidthMid.connect(this._midMult, 0, 1);\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        /**\n\t\t\t * 1 - width\n\t\t\t * @type {Tone}\n\t\t\t */\n\t        this._oneMinusWidth = new Tone.Subtract();\n\t        this._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t        this.context.getConstant(1).connect(this._oneMinusWidth, 0, 0);\n\t        this.width.connect(this._oneMinusWidth, 0, 1);\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Multiply();\n\t        this.width.connect(this._twoTimesWidthSide);\n\t        this._twoTimesWidthSide.connect(this._sideMult, 0, 1);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._twoTimesWidthMid.dispose();\n\t        this._twoTimesWidthMid = null;\n\t        this._twoTimesWidthSide.dispose();\n\t        this._twoTimesWidthSide = null;\n\t        this._oneMinusWidth.dispose();\n\t        this._oneMinusWidth = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time.\n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.\n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change.\n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time.\n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = Tone.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (Tone.isDefined(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (Tone.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Ticks(duration);\n\t                    }\n\t                    var interval = Tone.Ticks(this._getLoopDuration());\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.Ticks(startTick), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), Tone.Ticks(startTick));\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = Tone.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also\n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        var ticks = Tone.Transport.getTicksAtTime(time);\n\t        if (!this.mute && this._state.getValueAtTime(ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!Tone.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and\n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Time}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopEnd).toSeconds();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Time}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopStart).toSeconds();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stopped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part);\n\t        Tone.Event.call(this, options);\n\t        /**\n\t\t\t *  An array of Objects.\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        //add the events\n\t        for (var i = 0; i < options.events.length; i++) {\n\t            if (Array.isArray(options.events[i])) {\n\t                this.add(options.events[i][0], options.events[i][1]);\n\t            } else {\n\t                this.add(options.events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false,\n\t        'events': []\n\t    };\n\t    /**\n\t\t *  Start the part at the given time.\n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = Tone.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = Tone.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event\n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.Ticks(ticks));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.Ticks(ticks));\n\t            }\n\t        } else if (event.startOffset >= offset) {\n\t            event.start(Tone.Ticks(ticks));\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time.\n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value.\n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Ticks(1).toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (Tone.isDefined(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (Tone.isDefined(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part.\n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value\n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.Ticks(stateEvent.time));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else if (event.startOffset === time) {\n\t                if (Tone.isUndef(value) || Tone.isDefined(value) && event.value === value) {\n\t                    this._events.splice(i, 1);\n\t                    event.dispose();\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(this.toTicks(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        if (this._events) {\n\t            ctx = Tone.defaultArg(ctx, this);\n\t            for (var i = this._events.length - 1; i >= 0; i--) {\n\t                var e = this._events[i];\n\t                if (e instanceof Tone.Part) {\n\t                    e._forEach(callback, ctx);\n\t                } else {\n\t                    callback.call(ctx, e);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else if (event.state === Tone.State.Stopped) {\n\t            //reschedule it if it's stopped\n\t            this._restartEvent(event);\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and\n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will\n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Time}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopEnd).toSeconds();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will\n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Time}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.Ticks(this._loopStart).toSeconds();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'callback': Tone.noOp,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array.\n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed.\n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (Tone.isUndef(options.loopEnd) && Tone.isDefined(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (Tone.isDefined(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be\n\t\t *  set in the constructor. The subdivision is the\n\t\t *  interval between successive steps.\n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Ticks(this._subdivision).toSeconds();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray,\n\t\t *  a Tone.Sequence representing that sub-array will be returned.\n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array,\n\t        if (Tone.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array,\n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (Tone.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Ticks(subSubdivision));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index\n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.Ticks(index * this._subdivision + this.startOffset).toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is\n\t\t *         a square and only odd-numbered harmonics are present. At all other widths\n\t\t *         even-numbered harmonics are present. Read more\n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Source);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output.\n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t *  restart the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype.restart = function (time) {\n\t        this._sawtooth.restart(time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator\n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics\n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent\n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t *  restart the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype.restart = function (time) {\n\t        this._modulator.restart(time);\n\t        this._pulse.restart(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t\t\t *  Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype.restart = function (time) {\n\t        this._modulator.restart(time);\n\t        this._carrier.restart(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t\t\t *  Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t *  restart the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype.restart = function (time) {\n\t        this._modulator.restart(time);\n\t        this._carrier.restart(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  restart the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype.restart = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.restart(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count * 1.1;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`.\n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively.\n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\".\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    Tone.OmniOscillator.prototype.restart = function (time) {\n\t        this._oscillator.restart(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t\t * when it's not.\n\t\t *\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\".\n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator.\n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (Tone.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now();\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                this.context.setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2;\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t * modulating signal (ma) -- as in ma/mf.\n\t\t * See Tone.FMOscillator for more info.\n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info.\n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator\n\t\t * (only if the oscillator type is set to pwm). See\n\t\t * Tone.PWMOscillator for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2;\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * Keep track of all events scheduled to the transport\n\t\t\t * when the instrument is 'synced'\n\t\t\t * @type {Array<Number>}\n\t\t\t * @private\n\t\t\t */\n\t        this._scheduledEvents = [];\n\t    };\n\t    Tone.extend(Tone.Instrument, Tone.AudioNode);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t * Sync the instrument to the Transport. All subsequent calls of\n\t\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t\t * will be scheduled along the transport.\n\t\t * @example\n\t\t * instrument.sync()\n\t\t * //schedule 3 notes when the transport first starts\n\t\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t\t * //start the transport to hear the notes\n\t\t * Transport.start()\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.sync = function () {\n\t        this._syncMethod('triggerAttack', 1);\n\t        this._syncMethod('triggerRelease', 0);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Wrap the given method so that it can be synchronized\n\t\t * @param {String} method Which method to wrap and sync\n\t\t * @param  {Number} timePosition What position the time argument appears in\n\t\t * @private\n\t\t */\n\t    Tone.Instrument.prototype._syncMethod = function (method, timePosition) {\n\t        var originalMethod = this['_original_' + method] = this[method];\n\t        this[method] = function () {\n\t            var args = Array.prototype.slice.call(arguments);\n\t            var time = args[timePosition];\n\t            var id = Tone.Transport.schedule(function (t) {\n\t                args[timePosition] = t;\n\t                originalMethod.apply(this, args);\n\t            }.bind(this), time);\n\t            this._scheduledEvents.push(id);\n\t        }.bind(this);\n\t    };\n\t    /**\n\t\t * Unsync the instrument from the Transport\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.unsync = function () {\n\t        this._scheduledEvents.forEach(function (id) {\n\t            Tone.Transport.clear(id);\n\t        });\n\t        this._scheduledEvents = [];\n\t        if (this._original_triggerAttack) {\n\t            this.triggerAttack = this._original_triggerAttack;\n\t            this.triggerRelease = this._original_triggerRelease;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration.\n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        this.unsync();\n\t        this._scheduledEvents = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Get the level of the output at the given time. Measures\n\t\t *  the envelope(s) value at the time. \n\t\t *  @param {Time} time The time to query the envelope value\n\t\t *  @return {NormalRange} The output level between 0-1\n\t\t */\n\t    Tone.Monophonic.prototype.getLevelAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this.envelope.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampTo(note, portTime, time);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.oscillator.start(time);\n\t        //if there is no release portion, stop the oscillator\n\t        if (this.envelope.sustain === 0) {\n\t            this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.oscillator.stop(time + this.envelope.release);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on\n\t\t *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this._carrier._triggerEnvelopeAttack(time, velocity);\n\t        this._modulator._triggerEnvelopeAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this._carrier._triggerEnvelopeRelease(time);\n\t        this._modulator._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the\n\t\t *          Tone.Filter are controlled by Tone.Envelopes.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        this.oscillator.start(time);\n\t        if (this.envelope.sustain === 0) {\n\t            this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        this.oscillator.stop(time + this.envelope.release);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two\n\t\t *          MonoSynths run in parallel with control over the\n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO.\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0._triggerEnvelopeAttack(time, velocity);\n\t        this.voice1._triggerEnvelopeAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0._triggerEnvelopeRelease(time);\n\t        this.voice1._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the level of the output at the given time. Measures\n\t\t *  the envelope(s) value at the time. \n\t\t *  @param {Time} time The time to query the envelope value\n\t\t *  @return {NormalRange} The output level between 0-1\n\t\t */\n\t    Tone.DuoSynth.prototype.getLevelAtTime = function (time) {\n\t        return (this.voice0.getLevelAtTime(time) + this.voice1.getLevelAtTime(time)) / 2;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content\n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the\n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this._carrier._triggerEnvelopeAttack(time, velocity);\n\t        this._modulator._triggerEnvelopeAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._carrier._triggerEnvelopeRelease(time);\n\t        this._modulator._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during Tone.MembraneSynth.triggerAttack(note). The frequency envelope\n\t\t *          starts at <code>note * .octaves</code> and ramps to <code>note</code>\n\t\t *          over the duration of <code>.pitchDecay</code>.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity.\n\t\t *\n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.oscillator.stop(time + this.envelope.release);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the\n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = Tone.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        this._oscillators.forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t        //if the sustain is 0, stop the oscillator as well\n\t        if (this.envelope.sustain === 0) {\n\t            this._oscillators.forEach(function (osc) {\n\t                osc.stop(time + this.envelope.attack + this.envelope.decay);\n\t            }.bind(this));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this._oscillators.forEach(function (osc) {\n\t            osc.stop(time + this.envelope.release);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the instrument to the Transport. All subsequent calls of\n\t\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t\t * will be scheduled along the transport.\n\t\t * @example\n\t\t * synth.sync()\n\t\t * //schedule 3 notes when the transport first starts\n\t\t * synth.triggerAttackRelease('8n', 0)\n\t\t * synth.triggerAttackRelease('8n', '8n')\n\t\t * synth.triggerAttackRelease('8n', '4n')\n\t\t * //start the transport to hear the notes\n\t\t * Transport.start()\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.MetalSynth.prototype.sync = function () {\n\t        this._syncMethod('triggerAttack', 0);\n\t        this._syncMethod('triggerRelease', 0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given\n\t\t *  duration.\n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter),\n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other\n\t\t *  instruments, Tone.NoiseSynth doesn't have a note.\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        //start the noise\n\t        this.noise.start(time);\n\t        if (this.envelope.sustain === 0) {\n\t            this.noise.stop(time = this.envelope.attack + this.envelope.decay);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.noise.stop(time + this.envelope.release);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the instrument to the Transport. All subsequent calls of\n\t\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t\t * will be scheduled along the transport.\n\t\t * @example\n\t\t * synth.sync()\n\t\t * //schedule 3 notes when the transport first starts\n\t\t * synth.triggerAttackRelease('8n', 0)\n\t\t * synth.triggerAttackRelease('8n', '8n')\n\t\t * synth.triggerAttackRelease('8n', '4n')\n\t\t * //start the transport to hear the notes\n\t\t * Transport.start()\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.sync = function () {\n\t        this._syncMethod('triggerAttack', 0);\n\t        this._syncMethod('triggerRelease', 0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune.\n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack.\n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.7\n\t    };\n\t    /**\n\t\t *  Trigger the note.\n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is\n\t\t *          not a synthesizer by itself, it merely manages voices of\n\t\t *          one of the other types of synths, allowing any of the\n\t\t *          monophonic synthesizers to be polyphonic.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default.\n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth);\n\t        Tone.Instrument.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            if (!(v instanceof Tone.Monophonic)) {\n\t                throw new Error('Synth constructor must be instance of Tone.Monophonic');\n\t            }\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (Tone.isArray(duration) && Tone.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments,\n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the instrument to the Transport. All subsequent calls of\n\t\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t\t * will be scheduled along the transport.\n\t\t * @example\n\t\t * synth.sync()\n\t\t * //schedule 3 notes when the transport first starts\n\t\t * synth.triggerAttackRelease('8n', 0)\n\t\t * synth.triggerAttackRelease('8n', '8n')\n\t\t * synth.triggerAttackRelease('8n', '4n')\n\t\t * //start the transport to hear the notes\n\t\t * Transport.start()\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.PolySynth.prototype.sync = function () {\n\t        this._syncMethod('triggerAttack', 1);\n\t        this._syncMethod('triggerRelease', 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return\n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated\n\t\t *  to a polysynth.\n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n\t\t *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n\t\t * @param {Object} samples An object of samples mapping either Midi\n\t\t *                         Note Numbers or Scientific Pitch Notation\n\t\t *                         to the url of that sample.\n\t\t * @param {Function=} onload The callback to invoke when all of the samples are loaded.\n\t\t * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t\t * @example\n\t\t * var sampler = new Tone.Sampler({\n\t\t * \t\"C3\" : \"path/to/C3.mp3\",\n\t\t * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t\t * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t\t * \t\"A3\" : \"path/to/A3.mp3\",\n\t\t * }, function(){\n\t\t * \t//sampler will repitch the closest sample\n\t\t * \tsampler.triggerAttack(\"D3\")\n\t\t * })\n\t\t * @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Sampler = function (urls) {\n\t        // shift arguments over one. Those are the remainder of the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Sampler);\n\t        Tone.Instrument.call(this, options);\n\t        var urlMap = {};\n\t        for (var note in urls) {\n\t            if (Tone.isNote(note)) {\n\t                //convert the note name to MIDI\n\t                var mid = Tone.Frequency(note).toMidi();\n\t                urlMap[mid] = urls[note];\n\t            } else if (!isNaN(parseFloat(note))) {\n\t                //otherwise if it's numbers assume it's midi\n\t                urlMap[note] = urls[note];\n\t            } else {\n\t                throw new Error('Tone.Sampler: url keys must be the note\\'s pitch');\n\t            }\n\t        }\n\t        /**\n\t\t\t * The stored and loaded buffers\n\t\t\t * @type {Tone.Buffers}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);\n\t        /**\n\t\t\t * The object of all currently playing BufferSources\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t * The envelope applied to the beginning of the sample.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t * The envelope applied to the end of the envelope.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t * The defaults\n\t\t * @const\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        attack: 0,\n\t        release: 0.1,\n\t        onload: Tone.noOp,\n\t        baseUrl: ''\n\t    };\n\t    /**\n\t\t * Returns the difference in steps between the given midi note at the closets sample.\n\t\t * @param  {Midi} midi\n\t\t * @return {Interval}\n\t\t * @private\n\t\t */\n\t    Tone.Sampler.prototype._findClosest = function (midi) {\n\t        //searches within 8 octaves of the given midi note\n\t        var MAX_INTERVAL = 96;\n\t        var interval = 0;\n\t        while (interval < MAX_INTERVAL) {\n\t            // check above and below\n\t            if (this._buffers.has(midi + interval)) {\n\t                return -interval;\n\t            } else if (this._buffers.has(midi - interval)) {\n\t                return interval;\n\t            }\n\t            interval++;\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time=} time     When to play the note\n\t\t * @param  {NormalRange=} velocity The velocity to play the sample back.\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (note, time, velocity) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the closest note pitch\n\t        var difference = this._findClosest(midi);\n\t        if (difference !== null) {\n\t            var closestNote = midi - difference;\n\t            var buffer = this._buffers.get(closestNote);\n\t            // play that note\n\t            var source = new Tone.BufferSource({\n\t                'buffer': buffer,\n\t                'playbackRate': Tone.intervalToFrequencyRatio(difference),\n\t                'fadeIn': this.attack,\n\t                'fadeOut': this.release,\n\t                'curve': 'exponential'\n\t            }).connect(this.output);\n\t            source.start(time, 0, buffer.duration, velocity);\n\t            // add it to the active sources\n\t            if (!Tone.isArray(this._activeSources[midi])) {\n\t                this._activeSources[midi] = [];\n\t            }\n\t            this._activeSources[midi].push({\n\t                note: midi,\n\t                source: source\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to release.\n\t\t * @param  {Time=} time     \tWhen to release the note.\n\t\t * @return {Tone.Sampler}\tthis\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (note, time) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the note\n\t        if (this._activeSources[midi] && this._activeSources[midi].length) {\n\t            var source = this._activeSources[midi].shift().source;\n\t            time = this.toSeconds(time);\n\t            source.stop(time + this.release, this.release);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Release all currently active notes.\n\t\t * @param  {Time=} time     \tWhen to release the notes.\n\t\t * @return {Tone.Sampler}\tthis\n\t\t */\n\t    Tone.Sampler.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var note in this._activeSources) {\n\t            var sources = this._activeSources[note];\n\t            while (sources.length) {\n\t                var source = sources.shift().source;\n\t                source.stop(time + this.release, this.release);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the instrument to the Transport. All subsequent calls of\n\t\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t\t * will be scheduled along the transport.\n\t\t * @example\n\t\t * synth.sync()\n\t\t * //schedule 3 notes when the transport first starts\n\t\t * synth.triggerAttackRelease('8n', 0)\n\t\t * synth.triggerAttackRelease('8n', '8n')\n\t\t * synth.triggerAttackRelease('8n', '4n')\n\t\t * //start the transport to hear the notes\n\t\t * Transport.start()\n\t\t * @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Sampler.prototype.sync = function () {\n\t        this._syncMethod('triggerAttack', 1);\n\t        this._syncMethod('triggerRelease', 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Invoke the attack phase, then after the duration, invoke the release.\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time} duration The time the note should be held\n\t\t * @param  {Time=} time     When to start the attack\n\t\t * @param  {NormalRange} [velocity=1] The velocity of the attack\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(note, time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add a note to the sampler.\n\t\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Sampler.prototype.add = function (note, url, callback) {\n\t        if (Tone.isNote(note)) {\n\t            //convert the note name to MIDI\n\t            var mid = Tone.Frequency(note).toMidi();\n\t            this._buffers.add(mid, url, callback);\n\t        } else if (!isNaN(parseFloat(note))) {\n\t            //otherwise if it's numbers assume it's midi\n\t            this._buffers.add(note, url, callback);\n\t        } else {\n\t            throw new Error('Tone.Sampler: note must be the note\\'s pitch. Instead got ' + note);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffers.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._buffers.dispose();\n\t        this._buffers = null;\n\t        for (var midi in this._activeSources) {\n\t            this._activeSources[midi].forEach(function (event) {\n\t                event.source.dispose();\n\t            });\n\t        }\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    if (Tone.supported) {\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = Tone.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = Tone.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TransportTimelineSignal extends Tone.Signal, but adds the ability to synchronize the signal to the signal to the Tone.Transport\n\t\t * @extends {Tone.Signal}\n\t\t */\n\t    Tone.TransportTimelineSignal = function () {\n\t        Tone.Signal.apply(this, arguments);\n\t        /**\n\t\t\t * The real signal output\n\t\t\t * @type {Tone.Signal}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._outputSig = new Tone.Signal(this._initialValue);\n\t        /**\n\t\t\t * Keep track of the last value. (small optimization)\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._lastVal = this.value;\n\t        /**\n\t\t\t * The event id of the tick update loop\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._synced = Tone.Transport.scheduleRepeat(this._onTick.bind(this), '1i');\n\t        /**\n\t\t\t * A bound version of the anchor value methods\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._bindAnchorValue = this._anchorValue.bind(this);\n\t        Tone.Transport.on('start stop pause', this._bindAnchorValue);\n\t        this._events.memory = Infinity;\n\t    };\n\t    Tone.extend(Tone.TransportTimelineSignal, Tone.Signal);\n\t    /**\n\t\t * Callback which is invoked every tick.\n\t\t * @private\n\t\t * @param  {Number} time\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._onTick = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.seconds);\n\t        if (this._lastVal !== val) {\n\t            this._lastVal = val;\n\t            //approximate ramp curves with linear ramps\n\t            this._outputSig.linearRampToValueAtTime(val, time);\n\t        }\n\t    };\n\t    /**\n\t\t * Anchor the value at the start and stop of the Transport\n\t\t * @param  {Number} time The time of the event\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t * @private\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._anchorValue = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.seconds);\n\t        this._lastVal = val;\n\t        this._outputSig.cancelScheduledValues(time);\n\t        this._outputSig.setValueAtTime(val, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {TransportTime}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = Tone.TransportTime(time);\n\t        return Tone.Signal.prototype.getValueAtTime.call(this, time);\n\t    };\n\t    /**\n\t\t * Set the output of the signal at the given time\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueAtTime = function (value, time) {\n\t        time = Tone.TransportTime(time);\n\t        Tone.Signal.prototype.setValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Linear ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.linearRampToValueAtTime = function (value, time) {\n\t        time = Tone.TransportTime(time);\n\t        Tone.Signal.prototype.linearRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Exponential ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        time = Tone.TransportTime(time);\n\t        Tone.Signal.prototype.exponentialRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {TransportTime} startTime\n\t\t *  @param {number} timeConstant\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        startTime = Tone.TransportTime(startTime);\n\t        Tone.Signal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *  @param  {TransportTime} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.cancelScheduledValues = function (startTime) {\n\t        startTime = Tone.TransportTime(startTime);\n\t        Tone.Signal.prototype.cancelScheduledValues.call(this, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        startTime = Tone.TransportTime(startTime);\n\t        duration = Tone.TransportTime(duration);\n\t        Tone.Signal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t\t *  it holds the automated value at time until the next automated event.\n\t\t *  @param  {Time} time\n\t\t *  @returns {Tone.TransportTimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.cancelAndHoldAtTime = function (time) {\n\t        return Tone.Signal.prototype.cancelAndHoldAtTime.call(this, Tone.TransportTime(time));\n\t    };\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.TransportTimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.dispose = function () {\n\t        Tone.Transport.clear(this._synced);\n\t        Tone.Transport.off('start stop pause', this._syncedCallback);\n\t        this._events.cancel(0);\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._outputSig.dispose();\n\t        this._outputSig = null;\n\t    };\n\t    return Tone.TransportTimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n\t\t *        amount of time each small chunk of audio is played for and the overlap is the\n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone.Source}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), options.grainSize);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t * All of the currently playing BufferSources\n\t\t\t * @type {Array}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = [];\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t        this._clock.on('stop', this._onstop.bind(this));\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration.\n\t\t *\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = Tone.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        if (duration) {\n\t            this.stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t    };\n\t    /**\n\t\t * Invoked when the clock is stopped\n\t\t * @param  {Number} time\n\t\t * @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._onstop = function (time) {\n\t        //stop the players\n\t        this._activeSources.forEach(function (source) {\n\t            source.stop(time, 0);\n\t        });\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var fadeIn = this._offset < this._overlap ? 0 : this._overlap;\n\t        var source = new Tone.BufferSource({\n\t            'buffer': this.buffer,\n\t            'fadeIn': fadeIn,\n\t            'fadeOut': this._overlap,\n\t            'loop': this.loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'playbackRate': Tone.intervalToFrequencyRatio(this.detune / 100)\n\t        }).connect(this.output);\n\t        source.start(time, this._offset);\n\t        this._offset += this.grainSize;\n\t        source.stop(time + this.grainSize);\n\t        //add it to the active sources\n\t        this._activeSources.push(source);\n\t        //remove it when it's done\n\t        source.onended = function () {\n\t            var index = this._activeSources.indexOf(source);\n\t            if (index !== -1) {\n\t                this._activeSources.splice(index, 1);\n\t            }\n\t        }.bind(this);\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {Tone.GrainPlayer}  this\n\t\t */\n\t    Tone.GrainPlayer.prototype.seek = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the\n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between\n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            this._overlap = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._activeSources.forEach(function (source) {\n\t            source.dispose();\n\t        });\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {Function=} onload The function to invoke when the buffer is loaded.\n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer && url.loaded) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = Tone.defaults(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded.\n\t\t\t *  @type {Boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  All of the active buffer source nodes\n\t\t\t *  @type {Array<Tone.BufferSource>}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = [];\n\t        /**\n\t\t\t *  The elapsed time counter.\n\t\t\t *  @type {Tone.TickSource}\n\t\t\t *  @private\n\t\t\t */\n\t        this._elapsedTime = new Tone.TickSource(options.playbackRate);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url.\n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {Function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is done playing.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onSourceEnd = function (source) {\n\t        var index = this._activeSources.indexOf(source);\n\t        this._activeSources.splice(index, 1);\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration.\n\t\t *\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        //if it's a loop the default offset is the loopstart point\n\t        if (this._loop) {\n\t            offset = Tone.defaultArg(offset, this._loopStart);\n\t        } else {\n\t            //otherwise the default offset is 0\n\t            offset = Tone.defaultArg(offset, 0);\n\t        }\n\t        //compute the values in seconds\n\t        offset = this.toSeconds(offset);\n\t        var computedDuration = Tone.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t        computedDuration = this.toSeconds(computedDuration);\n\t        startTime = this.toSeconds(startTime);\n\t        //start the elapsed time counter\n\t        this._elapsedTime.start(startTime, offset);\n\t        //make the source\n\t        var source = new Tone.BufferSource({\n\t            'buffer': this._buffer,\n\t            'loop': this._loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'onended': this._onSourceEnd.bind(this),\n\t            'playbackRate': this._playbackRate,\n\t            'fadeIn': this.fadeIn,\n\t            'fadeOut': this.fadeOut\n\t        }).connect(this.output);\n\t        //set the looping properties\n\t        if (!this._loop && !this._synced) {\n\t            //if it's not looping, set the state change at the end of the sample\n\t            this._state.setStateAtTime(Tone.State.Stopped, startTime + computedDuration / this._playbackRate);\n\t        }\n\t        //add it to the array of active sources\n\t        this._activeSources.push(source);\n\t        //start it\n\t        if (this._loop && Tone.isUndef(duration)) {\n\t            source.start(startTime, offset);\n\t        } else {\n\t            source.start(startTime, offset, computedDuration);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._elapsedTime.stop(time);\n\t        this._activeSources.forEach(function (source) {\n\t            source.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop and then restart the player from the beginning (or offset)\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.restart = function (time, offset, duration) {\n\t        this._stop(time);\n\t        this._start(time, offset, duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the\n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that\n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is\n\t\t *  set to true.\n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file.\n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            //get the current source\n\t            this._activeSources.forEach(function (source) {\n\t                source.loopStart = loopStart;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            //get the current source\n\t            this._activeSources.forEach(function (source) {\n\t                source.loopEnd = loopEnd;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            //if no change, do nothing\n\t            if (this._loop === loop) {\n\t                return;\n\t            }\n\t            this._loop = loop;\n\t            var now = this.now();\n\t            if (!loop) {\n\t                //stop the playback on the next cycle\n\t                this._stopAtNextIteration(now);\n\t            } else {\n\t                //remove the next stopEvent\n\t                var stopEvent = this._state.getNextState(Tone.State.Stopped, now);\n\t                if (stopEvent) {\n\t                    this._activeSources.forEach(function (source) {\n\t                        source.loop = loop;\n\t                    });\n\t                    this._state.cancel(stopEvent.time);\n\t                    this._elapsedTime.cancel(stopEvent.time);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Schedules a stop event at the next full iteration. Used\n\t\t *  for scheduling stop when the loop state or playbackRate changes\n\t\t *  @param  {Number}  now  The current time\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._stopAtNextIteration = function (now) {\n\t        if (this._state.getValueAtTime(now) === Tone.State.Started) {\n\t            var nextStop = this._state.getNextState(Tone.State.Stopped, now);\n\t            var position = this._elapsedTime.getTicksAtTime(now);\n\t            var iterations = Math.max(Math.ceil(position / this.buffer.duration), 1);\n\t            var stopTime = this._elapsedTime.getTimeOfTick(iterations * this.buffer.duration, nextStop ? nextStop.time - this.sampleTime : Infinity);\n\t            this.stop(stopTime);\n\t        }\n\t    };\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            var now = this.now();\n\t            this._elapsedTime.frequency.setValueAtTime(rate, now);\n\t            //if it's not looping\n\t            if (!this._loop) {\n\t                this._stopAtNextIteration(now);\n\t            }\n\t            //set all the sources\n\t            this._activeSources.forEach(function (source) {\n\t                source.playbackRate.setValueAtTime(rate, now);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The current playback position of the buffer. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Number}\n\t\t * @name position\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'position', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._state.getValueAtTime(now) === Tone.State.Started && this.loaded) {\n\t                var duration = this.buffer.duration;\n\t                var position = this._elapsedTime.getTicksAtTime(now);\n\t                return position % duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * If all the buffer is loaded\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffer.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        //disconnect all of the players\n\t        this._activeSources.forEach(function (source) {\n\t            source.dispose();\n\t        });\n\t        this._activeSources = null;\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        this._elapsedTime.dispose();\n\t        this._elapsedTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} urls An object mapping a name to a url.\n\t\t *  @param {function=} onload The function to invoke when all buffers are loaded.\n\t\t */\n\t    Tone.Players = function (urls) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, ['onload'], Tone.Players);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t        /**\n\t\t\t * The container of all of the players\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._players = {};\n\t        /**\n\t\t\t * The loading count\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._loadingCount = 0;\n\t        /**\n\t\t\t * private holder of the fadeIn time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeIn = options.fadeIn;\n\t        /**\n\t\t\t * private holder of the fadeOut time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeOut = options.fadeOut;\n\t        //add all of the players\n\t        for (var name in urls) {\n\t            this._loadingCount++;\n\t            this.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Players, Tone.AudioNode);\n\t    /**\n\t\t * The default values\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Players.defaults = {\n\t        'volume': 0,\n\t        'mute': false,\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback\n\t\t *  @private\n\t\t */\n\t    Tone.Players.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeIn time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeIn\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeIn', {\n\t        get: function () {\n\t            return this._fadeIn;\n\t        },\n\t        set: function (fadeIn) {\n\t            this._fadeIn = fadeIn;\n\t            this._forEach(function (player) {\n\t                player.fadeIn = fadeIn;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeOut time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeOut\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeOut', {\n\t        get: function () {\n\t            return this._fadeOut;\n\t        },\n\t        set: function (fadeOut) {\n\t            this._fadeOut = fadeOut;\n\t            this._forEach(function (player) {\n\t                player.fadeOut = fadeOut;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t\t * @memberOf Tone.Players#\n\t\t * @type {String}\n\t\t * @name state\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'state', {\n\t        get: function () {\n\t            var playing = false;\n\t            this._forEach(function (player) {\n\t                playing = playing || player.state === Tone.State.Started;\n\t            });\n\t            return playing ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the\n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Players.prototype.has = function (name) {\n\t        return this._players.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a player by name.\n\t\t *  @param  {String}  name  The players name as defined in\n\t\t *                          the constructor object or `add` method.\n\t\t *  @return  {Tone.Player}\n\t\t */\n\t    Tone.Players.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._players[name];\n\t        } else {\n\t            throw new Error('Tone.Players: no player named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t * Iterate over all of the players\n\t\t * @param  {Function} callback\n\t\t * @return {Tone.Players}            this\n\t\t * @private\n\t\t */\n\t    Tone.Players.prototype._forEach = function (callback) {\n\t        for (var playerName in this._players) {\n\t            callback(this._players[playerName], playerName);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If all the buffers are loaded or not\n\t\t * @memberOf Tone.Players#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            this._forEach(function (player) {\n\t                isLoaded = isLoaded && player.loaded;\n\t            });\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a player by name and url to the Players\n\t\t *  @param  {String}    name      A unique name to give the player\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Players.prototype.add = function (name, url, callback) {\n\t        this._players[name] = new Tone.Player(url, callback).connect(this.output);\n\t        this._players[name].fadeIn = this._fadeIn;\n\t        this._players[name].fadeOut = this._fadeOut;\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop all of the players at the given time\n\t\t * @param {Time} time The time to stop all of the players.\n\t\t * @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.stopAll = function (time) {\n\t        this._forEach(function (player) {\n\t            player.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        this.output = null;\n\t        this._forEach(function (player) {\n\t            player.dispose();\n\t        });\n\t        this._players = null;\n\t        return this;\n\t    };\n\t    return Tone.Players;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check\n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t *\n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//promise resolves when input is available\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.UserMedia);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The MediaStreamNode\n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia, Tone.AudioNode);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device.\n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        return Tone.UserMedia.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (Tone.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                //didn't find a matching device\n\t                if (!device && devices.length > 0) {\n\t                    device = devices[0];\n\t                } else if (!device && Tone.isDefined(labelOrId)) {\n\t                    throw new Error('Tone.UserMedia: no matching device: ' + labelOrId);\n\t                }\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            if (device) {\n\t                constraints.audio.deviceId = device.deviceId;\n\t            }\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.UserMedia.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is\n\t\t * \tpersisted across sessions. It is un-guessable by other applications and\n\t\t * \tunique to the origin of the calling application. It is reset when the\n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is\n\t\t * \tused that is not persisted across sessions). Returns undefined when the\n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the\n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\").\n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return Tone.isDefined(navigator.mediaDevices) && Tone.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Midi is a primitive type for encoding Time values.\n\t\t *         Tone.Midi can be constructed with or without the `new` keyword. Tone.Midi can be passed\n\t\t *         into the parameter of any method which takes time as an argument.\n\t\t *  @constructor\n\t\t *  @extends {Tone.Frequency}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Midi(\"4n\");//a quarter note\n\t\t */\n\t    Tone.Midi = function (val, units) {\n\t        if (this instanceof Tone.Midi) {\n\t            Tone.Frequency.call(this, val, units);\n\t        } else {\n\t            return new Tone.Midi(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Midi, Tone.Frequency);\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Midi.prototype._defaultUnits = 'midi';\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Midi.prototype._frequencyToUnits = function (freq) {\n\t        return Tone.Frequency.ftom(Tone.Frequency.prototype._frequencyToUnits.call(this, freq));\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Midi.prototype._ticksToUnits = function (ticks) {\n\t        return Tone.Frequency.ftom(Tone.Frequency.prototype._ticksToUnits.call(this, ticks));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Midi.prototype._beatsToUnits = function (beats) {\n\t        return Tone.Frequency.ftom(Tone.Frequency.prototype._beatsToUnits.call(this, beats));\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Midi.prototype._secondsToUnits = function (seconds) {\n\t        return Tone.Frequency.ftom(Tone.Frequency.prototype._secondsToUnits.call(this, seconds));\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Midi(60).toMidi(); //60\n\t\t */\n\t    Tone.Midi.prototype.toMidi = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Midi(60).toMidi(); //60\n\t\t */\n\t    Tone.Midi.prototype.toFrequency = function () {\n\t        return Tone.Frequency.mtof(this.toMidi());\n\t    };\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} A new transposed frequency\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Midi.prototype.transpose = function (interval) {\n\t        return new this.constructor(this.toMidi() + interval);\n\t    };\n\t    return Tone.Midi;\n\t});\n\t\n\treturn Tone;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tone/build/Tone.js\n// module id = ZnLv\n// module chunks = 0","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared-key.js\n// module id = ax3d\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isIterable2 = require(\"../core-js/is-iterable\");\n\nvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\nvar _getIterator2 = require(\"../core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if ((0, _isIterable3.default)(Object(arr))) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/slicedToArray.js\n// module id = d7EF\n// module chunks = 0","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_wks.js\n// module id = dSzd\n// module chunks = 0","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_set-to-string-tag.js\n// module id = e6n0\n// module chunks = 0","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_shared.js\n// module id = e8AB\n// module chunks = 0","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dp.js\n// module id = evD5\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-absolute-index.js\n// module id = fkB2\n// module chunks = 0","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/get-iterator.js\n// module id = fxRn\n// module chunks = 0","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/core.get-iterator.js\n// module id = g8Ux\n// module chunks = 0","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_string-at.js\n// module id = h65t\n// module chunks = 0","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_hide.js\n// module id = hJx8\n// module chunks = 0","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_export.js\n// module id = kM2E\n// module chunks = 0","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_a-function.js\n// module id = lOnJ\n// module chunks = 0","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-keys.js\n// module id = lktj\n// module chunks = 0","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_object-dps.js\n// module id = qio6\n// module chunks = 0","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_to-object.js\n// module id = sB3e\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/is-iterable\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/is-iterable.js\n// module id = us/S\n// module chunks = 0","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_array-includes.js\n// module id = vFc/\n// module chunks = 0","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_iter-define.js\n// module id = vIB/\n// module chunks = 0","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.array.iterator.js\n// module id = xGkn\n// module chunks = 0","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/_enum-bug-keys.js\n// module id = xnc9\n// module chunks = 0","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/modules/es6.string.iterator.js\n// module id = zQR9\n// module chunks = 0"],"sourceRoot":""}